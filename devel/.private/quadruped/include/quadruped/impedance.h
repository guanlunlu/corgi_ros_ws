// Generated by gencpp from file quadruped/impedance.msg
// DO NOT EDIT!


#ifndef QUADRUPED_MESSAGE_IMPEDANCE_H
#define QUADRUPED_MESSAGE_IMPEDANCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace quadruped
{
template <class ContainerAllocator>
struct impedance_
{
  typedef impedance_<ContainerAllocator> Type;

  impedance_()
    : M_x(0.0)
    , M_y(0.0)
    , K0_x(0.0)
    , K0_y(0.0)
    , D_x(0.0)
    , D_y(0.0)
    , adaptive_kp_x(0.0)
    , adaptive_kp_y(0.0)
    , adaptive_ki_x(0.0)
    , adaptive_ki_y(0.0)
    , adaptive_kd_x(0.0)
    , adaptive_kd_y(0.0)  {
    }
  impedance_(const ContainerAllocator& _alloc)
    : M_x(0.0)
    , M_y(0.0)
    , K0_x(0.0)
    , K0_y(0.0)
    , D_x(0.0)
    , D_y(0.0)
    , adaptive_kp_x(0.0)
    , adaptive_kp_y(0.0)
    , adaptive_ki_x(0.0)
    , adaptive_ki_y(0.0)
    , adaptive_kd_x(0.0)
    , adaptive_kd_y(0.0)  {
  (void)_alloc;
    }



   typedef double _M_x_type;
  _M_x_type M_x;

   typedef double _M_y_type;
  _M_y_type M_y;

   typedef double _K0_x_type;
  _K0_x_type K0_x;

   typedef double _K0_y_type;
  _K0_y_type K0_y;

   typedef double _D_x_type;
  _D_x_type D_x;

   typedef double _D_y_type;
  _D_y_type D_y;

   typedef double _adaptive_kp_x_type;
  _adaptive_kp_x_type adaptive_kp_x;

   typedef double _adaptive_kp_y_type;
  _adaptive_kp_y_type adaptive_kp_y;

   typedef double _adaptive_ki_x_type;
  _adaptive_ki_x_type adaptive_ki_x;

   typedef double _adaptive_ki_y_type;
  _adaptive_ki_y_type adaptive_ki_y;

   typedef double _adaptive_kd_x_type;
  _adaptive_kd_x_type adaptive_kd_x;

   typedef double _adaptive_kd_y_type;
  _adaptive_kd_y_type adaptive_kd_y;





  typedef boost::shared_ptr< ::quadruped::impedance_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadruped::impedance_<ContainerAllocator> const> ConstPtr;

}; // struct impedance_

typedef ::quadruped::impedance_<std::allocator<void> > impedance;

typedef boost::shared_ptr< ::quadruped::impedance > impedancePtr;
typedef boost::shared_ptr< ::quadruped::impedance const> impedanceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadruped::impedance_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadruped::impedance_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadruped::impedance_<ContainerAllocator1> & lhs, const ::quadruped::impedance_<ContainerAllocator2> & rhs)
{
  return lhs.M_x == rhs.M_x &&
    lhs.M_y == rhs.M_y &&
    lhs.K0_x == rhs.K0_x &&
    lhs.K0_y == rhs.K0_y &&
    lhs.D_x == rhs.D_x &&
    lhs.D_y == rhs.D_y &&
    lhs.adaptive_kp_x == rhs.adaptive_kp_x &&
    lhs.adaptive_kp_y == rhs.adaptive_kp_y &&
    lhs.adaptive_ki_x == rhs.adaptive_ki_x &&
    lhs.adaptive_ki_y == rhs.adaptive_ki_y &&
    lhs.adaptive_kd_x == rhs.adaptive_kd_x &&
    lhs.adaptive_kd_y == rhs.adaptive_kd_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadruped::impedance_<ContainerAllocator1> & lhs, const ::quadruped::impedance_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadruped

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadruped::impedance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadruped::impedance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadruped::impedance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadruped::impedance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadruped::impedance_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadruped::impedance_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadruped::impedance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d8f3da9fe1b8bf0d60714457a27593ec";
  }

  static const char* value(const ::quadruped::impedance_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd8f3da9fe1b8bf0dULL;
  static const uint64_t static_value2 = 0x60714457a27593ecULL;
};

template<class ContainerAllocator>
struct DataType< ::quadruped::impedance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadruped/impedance";
  }

  static const char* value(const ::quadruped::impedance_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadruped::impedance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 M_x\n"
"float64 M_y\n"
"float64 K0_x\n"
"float64 K0_y\n"
"float64 D_x\n"
"float64 D_y\n"
"float64 adaptive_kp_x\n"
"float64 adaptive_kp_y\n"
"float64 adaptive_ki_x\n"
"float64 adaptive_ki_y\n"
"float64 adaptive_kd_x\n"
"float64 adaptive_kd_y\n"
;
  }

  static const char* value(const ::quadruped::impedance_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadruped::impedance_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.M_x);
      stream.next(m.M_y);
      stream.next(m.K0_x);
      stream.next(m.K0_y);
      stream.next(m.D_x);
      stream.next(m.D_y);
      stream.next(m.adaptive_kp_x);
      stream.next(m.adaptive_kp_y);
      stream.next(m.adaptive_ki_x);
      stream.next(m.adaptive_ki_y);
      stream.next(m.adaptive_kd_x);
      stream.next(m.adaptive_kd_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct impedance_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadruped::impedance_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadruped::impedance_<ContainerAllocator>& v)
  {
    s << indent << "M_x: ";
    Printer<double>::stream(s, indent + "  ", v.M_x);
    s << indent << "M_y: ";
    Printer<double>::stream(s, indent + "  ", v.M_y);
    s << indent << "K0_x: ";
    Printer<double>::stream(s, indent + "  ", v.K0_x);
    s << indent << "K0_y: ";
    Printer<double>::stream(s, indent + "  ", v.K0_y);
    s << indent << "D_x: ";
    Printer<double>::stream(s, indent + "  ", v.D_x);
    s << indent << "D_y: ";
    Printer<double>::stream(s, indent + "  ", v.D_y);
    s << indent << "adaptive_kp_x: ";
    Printer<double>::stream(s, indent + "  ", v.adaptive_kp_x);
    s << indent << "adaptive_kp_y: ";
    Printer<double>::stream(s, indent + "  ", v.adaptive_kp_y);
    s << indent << "adaptive_ki_x: ";
    Printer<double>::stream(s, indent + "  ", v.adaptive_ki_x);
    s << indent << "adaptive_ki_y: ";
    Printer<double>::stream(s, indent + "  ", v.adaptive_ki_y);
    s << indent << "adaptive_kd_x: ";
    Printer<double>::stream(s, indent + "  ", v.adaptive_kd_x);
    s << indent << "adaptive_kd_y: ";
    Printer<double>::stream(s, indent + "  ", v.adaptive_kd_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADRUPED_MESSAGE_IMPEDANCE_H
