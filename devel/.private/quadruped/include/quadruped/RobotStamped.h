// Generated by gencpp from file quadruped/RobotStamped.msg
// DO NOT EDIT!


#ifndef QUADRUPED_MESSAGE_ROBOTSTAMPED_H
#define QUADRUPED_MESSAGE_ROBOTSTAMPED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <quadruped/LegStamped.h>
#include <quadruped/LegStamped.h>
#include <quadruped/LegStamped.h>
#include <quadruped/LegStamped.h>

namespace quadruped
{
template <class ContainerAllocator>
struct RobotStamped_
{
  typedef RobotStamped_<ContainerAllocator> Type;

  RobotStamped_()
    : A_LF()
    , B_RF()
    , C_RH()
    , D_LH()  {
    }
  RobotStamped_(const ContainerAllocator& _alloc)
    : A_LF(_alloc)
    , B_RF(_alloc)
    , C_RH(_alloc)
    , D_LH(_alloc)  {
  (void)_alloc;
    }



   typedef  ::quadruped::LegStamped_<ContainerAllocator>  _A_LF_type;
  _A_LF_type A_LF;

   typedef  ::quadruped::LegStamped_<ContainerAllocator>  _B_RF_type;
  _B_RF_type B_RF;

   typedef  ::quadruped::LegStamped_<ContainerAllocator>  _C_RH_type;
  _C_RH_type C_RH;

   typedef  ::quadruped::LegStamped_<ContainerAllocator>  _D_LH_type;
  _D_LH_type D_LH;





  typedef boost::shared_ptr< ::quadruped::RobotStamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadruped::RobotStamped_<ContainerAllocator> const> ConstPtr;

}; // struct RobotStamped_

typedef ::quadruped::RobotStamped_<std::allocator<void> > RobotStamped;

typedef boost::shared_ptr< ::quadruped::RobotStamped > RobotStampedPtr;
typedef boost::shared_ptr< ::quadruped::RobotStamped const> RobotStampedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadruped::RobotStamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadruped::RobotStamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadruped::RobotStamped_<ContainerAllocator1> & lhs, const ::quadruped::RobotStamped_<ContainerAllocator2> & rhs)
{
  return lhs.A_LF == rhs.A_LF &&
    lhs.B_RF == rhs.B_RF &&
    lhs.C_RH == rhs.C_RH &&
    lhs.D_LH == rhs.D_LH;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadruped::RobotStamped_<ContainerAllocator1> & lhs, const ::quadruped::RobotStamped_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadruped

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadruped::RobotStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadruped::RobotStamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadruped::RobotStamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadruped::RobotStamped_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadruped::RobotStamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadruped::RobotStamped_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadruped::RobotStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "62662962505d5647d611c2ede8e80fa9";
  }

  static const char* value(const ::quadruped::RobotStamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x62662962505d5647ULL;
  static const uint64_t static_value2 = 0xd611c2ede8e80fa9ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadruped::RobotStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadruped/RobotStamped";
  }

  static const char* value(const ::quadruped::RobotStamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadruped::RobotStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "LegStamped A_LF\n"
"LegStamped B_RF\n"
"LegStamped C_RH\n"
"LegStamped D_LH\n"
"\n"
"================================================================================\n"
"MSG: quadruped/LegStamped\n"
"Header header\n"
"\n"
"float64 theta\n"
"float64 beta\n"
"\n"
"motor motor_r\n"
"motor motor_l\n"
"\n"
"force force\n"
"impedance impedance\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: quadruped/motor\n"
"float64 angle\n"
"float64 twist\n"
"float64 torque\n"
"float64 kp\n"
"float64 ki\n"
"float64 kd\n"
"================================================================================\n"
"MSG: quadruped/force\n"
"float64 pose_x\n"
"float64 pose_y\n"
"float64 force_x\n"
"float64 force_y\n"
"================================================================================\n"
"MSG: quadruped/impedance\n"
"float64 M_x\n"
"float64 M_y\n"
"float64 K0_x\n"
"float64 K0_y\n"
"float64 D_x\n"
"float64 D_y\n"
"float64 adaptive_kp_x\n"
"float64 adaptive_kp_y\n"
"float64 adaptive_ki_x\n"
"float64 adaptive_ki_y\n"
"float64 adaptive_kd_x\n"
"float64 adaptive_kd_y\n"
;
  }

  static const char* value(const ::quadruped::RobotStamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadruped::RobotStamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.A_LF);
      stream.next(m.B_RF);
      stream.next(m.C_RH);
      stream.next(m.D_LH);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotStamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadruped::RobotStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadruped::RobotStamped_<ContainerAllocator>& v)
  {
    s << indent << "A_LF: ";
    s << std::endl;
    Printer< ::quadruped::LegStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.A_LF);
    s << indent << "B_RF: ";
    s << std::endl;
    Printer< ::quadruped::LegStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.B_RF);
    s << indent << "C_RH: ";
    s << std::endl;
    Printer< ::quadruped::LegStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.C_RH);
    s << indent << "D_LH: ";
    s << std::endl;
    Printer< ::quadruped::LegStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.D_LH);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADRUPED_MESSAGE_ROBOTSTAMPED_H
