// Generated by gencpp from file quadruped/LegStamped.msg
// DO NOT EDIT!


#ifndef QUADRUPED_MESSAGE_LEGSTAMPED_H
#define QUADRUPED_MESSAGE_LEGSTAMPED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <quadruped/motor.h>
#include <quadruped/motor.h>
#include <quadruped/force.h>
#include <quadruped/impedance.h>

namespace quadruped
{
template <class ContainerAllocator>
struct LegStamped_
{
  typedef LegStamped_<ContainerAllocator> Type;

  LegStamped_()
    : header()
    , theta(0.0)
    , beta(0.0)
    , motor_r()
    , motor_l()
    , force()
    , impedance()  {
    }
  LegStamped_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , theta(0.0)
    , beta(0.0)
    , motor_r(_alloc)
    , motor_l(_alloc)
    , force(_alloc)
    , impedance(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _beta_type;
  _beta_type beta;

   typedef  ::quadruped::motor_<ContainerAllocator>  _motor_r_type;
  _motor_r_type motor_r;

   typedef  ::quadruped::motor_<ContainerAllocator>  _motor_l_type;
  _motor_l_type motor_l;

   typedef  ::quadruped::force_<ContainerAllocator>  _force_type;
  _force_type force;

   typedef  ::quadruped::impedance_<ContainerAllocator>  _impedance_type;
  _impedance_type impedance;





  typedef boost::shared_ptr< ::quadruped::LegStamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadruped::LegStamped_<ContainerAllocator> const> ConstPtr;

}; // struct LegStamped_

typedef ::quadruped::LegStamped_<std::allocator<void> > LegStamped;

typedef boost::shared_ptr< ::quadruped::LegStamped > LegStampedPtr;
typedef boost::shared_ptr< ::quadruped::LegStamped const> LegStampedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadruped::LegStamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadruped::LegStamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadruped::LegStamped_<ContainerAllocator1> & lhs, const ::quadruped::LegStamped_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.theta == rhs.theta &&
    lhs.beta == rhs.beta &&
    lhs.motor_r == rhs.motor_r &&
    lhs.motor_l == rhs.motor_l &&
    lhs.force == rhs.force &&
    lhs.impedance == rhs.impedance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadruped::LegStamped_<ContainerAllocator1> & lhs, const ::quadruped::LegStamped_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadruped

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadruped::LegStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadruped::LegStamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadruped::LegStamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadruped::LegStamped_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadruped::LegStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadruped::LegStamped_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadruped::LegStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "25edac3637c8888c0a44c3649cad03ef";
  }

  static const char* value(const ::quadruped::LegStamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x25edac3637c8888cULL;
  static const uint64_t static_value2 = 0x0a44c3649cad03efULL;
};

template<class ContainerAllocator>
struct DataType< ::quadruped::LegStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadruped/LegStamped";
  }

  static const char* value(const ::quadruped::LegStamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadruped::LegStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"float64 theta\n"
"float64 beta\n"
"\n"
"motor motor_r\n"
"motor motor_l\n"
"\n"
"force force\n"
"impedance impedance\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: quadruped/motor\n"
"float64 angle\n"
"float64 twist\n"
"float64 torque\n"
"float64 kp\n"
"float64 ki\n"
"float64 kd\n"
"================================================================================\n"
"MSG: quadruped/force\n"
"float64 pose_x\n"
"float64 pose_y\n"
"float64 force_x\n"
"float64 force_y\n"
"================================================================================\n"
"MSG: quadruped/impedance\n"
"float64 M_x\n"
"float64 M_y\n"
"float64 K0_x\n"
"float64 K0_y\n"
"float64 D_x\n"
"float64 D_y\n"
"float64 adaptive_kp_x\n"
"float64 adaptive_kp_y\n"
"float64 adaptive_ki_x\n"
"float64 adaptive_ki_y\n"
"float64 adaptive_kd_x\n"
"float64 adaptive_kd_y\n"
;
  }

  static const char* value(const ::quadruped::LegStamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadruped::LegStamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.theta);
      stream.next(m.beta);
      stream.next(m.motor_r);
      stream.next(m.motor_l);
      stream.next(m.force);
      stream.next(m.impedance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LegStamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadruped::LegStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadruped::LegStamped_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "beta: ";
    Printer<double>::stream(s, indent + "  ", v.beta);
    s << indent << "motor_r: ";
    s << std::endl;
    Printer< ::quadruped::motor_<ContainerAllocator> >::stream(s, indent + "  ", v.motor_r);
    s << indent << "motor_l: ";
    s << std::endl;
    Printer< ::quadruped::motor_<ContainerAllocator> >::stream(s, indent + "  ", v.motor_l);
    s << indent << "force: ";
    s << std::endl;
    Printer< ::quadruped::force_<ContainerAllocator> >::stream(s, indent + "  ", v.force);
    s << indent << "impedance: ";
    s << std::endl;
    Printer< ::quadruped::impedance_<ContainerAllocator> >::stream(s, indent + "  ", v.impedance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADRUPED_MESSAGE_LEGSTAMPED_H
