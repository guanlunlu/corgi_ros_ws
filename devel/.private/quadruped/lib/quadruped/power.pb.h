// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: power.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_power_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_power_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "std.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_power_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_power_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_power_2eproto;
namespace power_msg {
class PowerBoardStamped;
struct PowerBoardStampedDefaultTypeInternal;
extern PowerBoardStampedDefaultTypeInternal _PowerBoardStamped_default_instance_;
class PowerBoardStamped_AnalogEntry_DoNotUse;
struct PowerBoardStamped_AnalogEntry_DoNotUseDefaultTypeInternal;
extern PowerBoardStamped_AnalogEntry_DoNotUseDefaultTypeInternal _PowerBoardStamped_AnalogEntry_DoNotUse_default_instance_;
class PowerBoardStamped_DigitalEntry_DoNotUse;
struct PowerBoardStamped_DigitalEntry_DoNotUseDefaultTypeInternal;
extern PowerBoardStamped_DigitalEntry_DoNotUseDefaultTypeInternal _PowerBoardStamped_DigitalEntry_DoNotUse_default_instance_;
}  // namespace power_msg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace power_msg {
enum MOTORMODE : int {
  REST_MODE = 0,
  HALL_CALIBRATE = 1,
  MOTOR_MODE = 2,
  SET_ZERO = 3,
  MOTORMODE_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MOTORMODE_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MOTORMODE_IsValid(int value);
extern const uint32_t MOTORMODE_internal_data_[];
constexpr MOTORMODE MOTORMODE_MIN = static_cast<MOTORMODE>(0);
constexpr MOTORMODE MOTORMODE_MAX = static_cast<MOTORMODE>(3);
constexpr int MOTORMODE_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
MOTORMODE_descriptor();
template <typename T>
const std::string& MOTORMODE_Name(T value) {
  static_assert(std::is_same<T, MOTORMODE>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MOTORMODE_Name().");
  return MOTORMODE_Name(static_cast<MOTORMODE>(value));
}
template <>
inline const std::string& MOTORMODE_Name(MOTORMODE value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MOTORMODE_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool MOTORMODE_Parse(absl::string_view name, MOTORMODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MOTORMODE>(
      MOTORMODE_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PowerBoardStamped_DigitalEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          PowerBoardStamped_DigitalEntry_DoNotUse, std::string, bool,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_BOOL> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      PowerBoardStamped_DigitalEntry_DoNotUse, std::string, bool,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>;
  PowerBoardStamped_DigitalEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PowerBoardStamped_DigitalEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit PowerBoardStamped_DigitalEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const PowerBoardStamped_DigitalEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const PowerBoardStamped_DigitalEntry_DoNotUse*>(
        &_PowerBoardStamped_DigitalEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "power_msg.PowerBoardStamped.DigitalEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_power_2eproto;
};
// -------------------------------------------------------------------

class PowerBoardStamped_AnalogEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          PowerBoardStamped_AnalogEntry_DoNotUse, std::string, float,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      PowerBoardStamped_AnalogEntry_DoNotUse, std::string, float,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>;
  PowerBoardStamped_AnalogEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PowerBoardStamped_AnalogEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit PowerBoardStamped_AnalogEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const PowerBoardStamped_AnalogEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const PowerBoardStamped_AnalogEntry_DoNotUse*>(
        &_PowerBoardStamped_AnalogEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "power_msg.PowerBoardStamped.AnalogEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_power_2eproto;
};
// -------------------------------------------------------------------

class PowerBoardStamped final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:power_msg.PowerBoardStamped) */ {
 public:
  inline PowerBoardStamped() : PowerBoardStamped(nullptr) {}
  ~PowerBoardStamped() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PowerBoardStamped(::google::protobuf::internal::ConstantInitialized);

  inline PowerBoardStamped(const PowerBoardStamped& from)
      : PowerBoardStamped(nullptr, from) {}
  PowerBoardStamped(PowerBoardStamped&& from) noexcept
    : PowerBoardStamped() {
    *this = ::std::move(from);
  }

  inline PowerBoardStamped& operator=(const PowerBoardStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerBoardStamped& operator=(PowerBoardStamped&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PowerBoardStamped& default_instance() {
    return *internal_default_instance();
  }
  static inline const PowerBoardStamped* internal_default_instance() {
    return reinterpret_cast<const PowerBoardStamped*>(
               &_PowerBoardStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PowerBoardStamped& a, PowerBoardStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerBoardStamped* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PowerBoardStamped* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PowerBoardStamped* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PowerBoardStamped>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PowerBoardStamped& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PowerBoardStamped& from) {
    PowerBoardStamped::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PowerBoardStamped* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "power_msg.PowerBoardStamped";
  }
  protected:
  explicit PowerBoardStamped(::google::protobuf::Arena* arena);
  PowerBoardStamped(::google::protobuf::Arena* arena, const PowerBoardStamped& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDigitalFieldNumber = 2,
    kAnalogFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kModeFieldNumber = 4,
  };
  // map<string, bool> digital = 2;
  int digital_size() const;
  private:
  int _internal_digital_size() const;

  public:
  void clear_digital() ;
  const ::google::protobuf::Map<std::string, bool>& digital() const;
  ::google::protobuf::Map<std::string, bool>* mutable_digital();

  private:
  const ::google::protobuf::Map<std::string, bool>& _internal_digital() const;
  ::google::protobuf::Map<std::string, bool>* _internal_mutable_digital();

  public:
  // map<string, float> analog = 3;
  int analog_size() const;
  private:
  int _internal_analog_size() const;

  public:
  void clear_analog() ;
  const ::google::protobuf::Map<std::string, float>& analog() const;
  ::google::protobuf::Map<std::string, float>* mutable_analog();

  private:
  const ::google::protobuf::Map<std::string, float>& _internal_analog() const;
  ::google::protobuf::Map<std::string, float>* _internal_mutable_analog();

  public:
  // .std_msg.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::std_msg::Header& header() const;
  PROTOBUF_NODISCARD ::std_msg::Header* release_header();
  ::std_msg::Header* mutable_header();
  void set_allocated_header(::std_msg::Header* value);
  void unsafe_arena_set_allocated_header(::std_msg::Header* value);
  ::std_msg::Header* unsafe_arena_release_header();

  private:
  const ::std_msg::Header& _internal_header() const;
  ::std_msg::Header* _internal_mutable_header();

  public:
  // .power_msg.MOTORMODE mode = 4;
  void clear_mode() ;
  ::power_msg::MOTORMODE mode() const;
  void set_mode(::power_msg::MOTORMODE value);

  private:
  ::power_msg::MOTORMODE _internal_mode() const;
  void _internal_set_mode(::power_msg::MOTORMODE value);

  public:
  // @@protoc_insertion_point(class_scope:power_msg.PowerBoardStamped)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 4, 3,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<PowerBoardStamped_DigitalEntry_DoNotUse, std::string, bool,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>
        digital_;
    ::google::protobuf::internal::MapField<PowerBoardStamped_AnalogEntry_DoNotUse, std::string, float,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>
        analog_;
    ::std_msg::Header* header_;
    int mode_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_power_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PowerBoardStamped

// .std_msg.Header header = 1;
inline bool PowerBoardStamped::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::std_msg::Header& PowerBoardStamped::_internal_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::std_msg::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::std_msg::Header&>(::std_msg::_Header_default_instance_);
}
inline const ::std_msg::Header& PowerBoardStamped::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:power_msg.PowerBoardStamped.header)
  return _internal_header();
}
inline void PowerBoardStamped::unsafe_arena_set_allocated_header(::std_msg::Header* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::std_msg::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:power_msg.PowerBoardStamped.header)
}
inline ::std_msg::Header* PowerBoardStamped::release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::std_msg::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::std_msg::Header* PowerBoardStamped::unsafe_arena_release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:power_msg.PowerBoardStamped.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::std_msg::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::std_msg::Header* PowerBoardStamped::_internal_mutable_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::std_msg::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::std_msg::Header*>(p);
  }
  return _impl_.header_;
}
inline ::std_msg::Header* PowerBoardStamped::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std_msg::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:power_msg.PowerBoardStamped.header)
  return _msg;
}
inline void PowerBoardStamped::set_allocated_header(::std_msg::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::std_msg::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:power_msg.PowerBoardStamped.header)
}

// map<string, bool> digital = 2;
inline int PowerBoardStamped::_internal_digital_size() const {
  return _internal_digital().size();
}
inline int PowerBoardStamped::digital_size() const {
  return _internal_digital_size();
}
inline void PowerBoardStamped::clear_digital() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.digital_.Clear();
}
inline const ::google::protobuf::Map<std::string, bool>& PowerBoardStamped::_internal_digital() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.digital_.GetMap();
}
inline const ::google::protobuf::Map<std::string, bool>& PowerBoardStamped::digital() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:power_msg.PowerBoardStamped.digital)
  return _internal_digital();
}
inline ::google::protobuf::Map<std::string, bool>* PowerBoardStamped::_internal_mutable_digital() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.digital_.MutableMap();
}
inline ::google::protobuf::Map<std::string, bool>* PowerBoardStamped::mutable_digital() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:power_msg.PowerBoardStamped.digital)
  return _internal_mutable_digital();
}

// map<string, float> analog = 3;
inline int PowerBoardStamped::_internal_analog_size() const {
  return _internal_analog().size();
}
inline int PowerBoardStamped::analog_size() const {
  return _internal_analog_size();
}
inline void PowerBoardStamped::clear_analog() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.analog_.Clear();
}
inline const ::google::protobuf::Map<std::string, float>& PowerBoardStamped::_internal_analog() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.analog_.GetMap();
}
inline const ::google::protobuf::Map<std::string, float>& PowerBoardStamped::analog() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:power_msg.PowerBoardStamped.analog)
  return _internal_analog();
}
inline ::google::protobuf::Map<std::string, float>* PowerBoardStamped::_internal_mutable_analog() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.analog_.MutableMap();
}
inline ::google::protobuf::Map<std::string, float>* PowerBoardStamped::mutable_analog() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:power_msg.PowerBoardStamped.analog)
  return _internal_mutable_analog();
}

// .power_msg.MOTORMODE mode = 4;
inline void PowerBoardStamped::clear_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mode_ = 0;
}
inline ::power_msg::MOTORMODE PowerBoardStamped::mode() const {
  // @@protoc_insertion_point(field_get:power_msg.PowerBoardStamped.mode)
  return _internal_mode();
}
inline void PowerBoardStamped::set_mode(::power_msg::MOTORMODE value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:power_msg.PowerBoardStamped.mode)
}
inline ::power_msg::MOTORMODE PowerBoardStamped::_internal_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::power_msg::MOTORMODE>(_impl_.mode_);
}
inline void PowerBoardStamped::_internal_set_mode(::power_msg::MOTORMODE value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mode_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace power_msg


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::power_msg::MOTORMODE> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::power_msg::MOTORMODE>() {
  return ::power_msg::MOTORMODE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_power_2eproto_2epb_2eh
