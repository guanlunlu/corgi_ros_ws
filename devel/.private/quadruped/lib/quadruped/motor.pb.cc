// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: motor.proto

#include "motor.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace motor_msg {

inline constexpr Motor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : angle_{0},
        twist_{0},
        torque_{0},
        kp_{0},
        ki_{0},
        kd_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Motor::Motor(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MotorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MotorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MotorDefaultTypeInternal() {}
  union {
    Motor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MotorDefaultTypeInternal _Motor_default_instance_;

inline constexpr LegAngle::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : theta_{0},
        beta_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LegAngle::LegAngle(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LegAngleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LegAngleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LegAngleDefaultTypeInternal() {}
  union {
    LegAngle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LegAngleDefaultTypeInternal _LegAngle_default_instance_;

inline constexpr MotorStamped::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        motors_{},
        legs_{},
        header_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MotorStamped::MotorStamped(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MotorStampedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MotorStampedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MotorStampedDefaultTypeInternal() {}
  union {
    MotorStamped _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MotorStampedDefaultTypeInternal _MotorStamped_default_instance_;
}  // namespace motor_msg
static ::_pb::Metadata file_level_metadata_motor_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_motor_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_motor_2eproto = nullptr;
const ::uint32_t TableStruct_motor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::motor_msg::Motor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::motor_msg::Motor, _impl_.angle_),
    PROTOBUF_FIELD_OFFSET(::motor_msg::Motor, _impl_.twist_),
    PROTOBUF_FIELD_OFFSET(::motor_msg::Motor, _impl_.torque_),
    PROTOBUF_FIELD_OFFSET(::motor_msg::Motor, _impl_.kp_),
    PROTOBUF_FIELD_OFFSET(::motor_msg::Motor, _impl_.ki_),
    PROTOBUF_FIELD_OFFSET(::motor_msg::Motor, _impl_.kd_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::motor_msg::LegAngle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::motor_msg::LegAngle, _impl_.theta_),
    PROTOBUF_FIELD_OFFSET(::motor_msg::LegAngle, _impl_.beta_),
    PROTOBUF_FIELD_OFFSET(::motor_msg::MotorStamped, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::motor_msg::MotorStamped, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::motor_msg::MotorStamped, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::motor_msg::MotorStamped, _impl_.motors_),
    PROTOBUF_FIELD_OFFSET(::motor_msg::MotorStamped, _impl_.legs_),
    0,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::motor_msg::Motor)},
        {14, -1, -1, sizeof(::motor_msg::LegAngle)},
        {24, 35, -1, sizeof(::motor_msg::MotorStamped)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::motor_msg::_Motor_default_instance_._instance,
    &::motor_msg::_LegAngle_default_instance_._instance,
    &::motor_msg::_MotorStamped_default_instance_._instance,
};
const char descriptor_table_protodef_motor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\013motor.proto\022\tmotor_msg\032\tstd.proto\"Y\n\005M"
    "otor\022\r\n\005angle\030\001 \001(\002\022\r\n\005twist\030\002 \001(\002\022\016\n\006to"
    "rque\030\003 \001(\002\022\n\n\002kp\030\004 \001(\002\022\n\n\002ki\030\005 \001(\002\022\n\n\002kd"
    "\030\006 \001(\002\"\'\n\010LegAngle\022\r\n\005theta\030\001 \001(\002\022\014\n\004bet"
    "a\030\002 \001(\002\"t\n\014MotorStamped\022\037\n\006header\030\001 \001(\0132"
    "\017.std_msg.Header\022 \n\006motors\030\002 \003(\0132\020.motor"
    "_msg.Motor\022!\n\004legs\030\003 \003(\0132\023.motor_msg.Leg"
    "Angleb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_motor_2eproto_deps[1] =
    {
        &::descriptor_table_std_2eproto,
};
static ::absl::once_flag descriptor_table_motor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_motor_2eproto = {
    false,
    false,
    293,
    descriptor_table_protodef_motor_2eproto,
    "motor.proto",
    &descriptor_table_motor_2eproto_once,
    descriptor_table_motor_2eproto_deps,
    1,
    3,
    schemas,
    file_default_instances,
    TableStruct_motor_2eproto::offsets,
    file_level_metadata_motor_2eproto,
    file_level_enum_descriptors_motor_2eproto,
    file_level_service_descriptors_motor_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_motor_2eproto_getter() {
  return &descriptor_table_motor_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_motor_2eproto(&descriptor_table_motor_2eproto);
namespace motor_msg {
// ===================================================================

class Motor::_Internal {
 public:
};

Motor::Motor(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:motor_msg.Motor)
}
Motor::Motor(
    ::google::protobuf::Arena* arena, const Motor& from)
    : Motor(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Motor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Motor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, angle_),
           0,
           offsetof(Impl_, kd_) -
               offsetof(Impl_, angle_) +
               sizeof(Impl_::kd_));
}
Motor::~Motor() {
  // @@protoc_insertion_point(destructor:motor_msg.Motor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Motor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Motor::Clear() {
// @@protoc_insertion_point(message_clear_start:motor_msg.Motor)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.angle_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.kd_) -
      reinterpret_cast<char*>(&_impl_.angle_)) + sizeof(_impl_.kd_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Motor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> Motor::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Motor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float angle = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Motor, _impl_.angle_)}},
    // float twist = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Motor, _impl_.twist_)}},
    // float torque = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Motor, _impl_.torque_)}},
    // float kp = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Motor, _impl_.kp_)}},
    // float ki = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(Motor, _impl_.ki_)}},
    // float kd = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(Motor, _impl_.kd_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float angle = 1;
    {PROTOBUF_FIELD_OFFSET(Motor, _impl_.angle_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float twist = 2;
    {PROTOBUF_FIELD_OFFSET(Motor, _impl_.twist_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float torque = 3;
    {PROTOBUF_FIELD_OFFSET(Motor, _impl_.torque_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float kp = 4;
    {PROTOBUF_FIELD_OFFSET(Motor, _impl_.kp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ki = 5;
    {PROTOBUF_FIELD_OFFSET(Motor, _impl_.ki_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float kd = 6;
    {PROTOBUF_FIELD_OFFSET(Motor, _impl_.kd_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Motor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:motor_msg.Motor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float angle = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  ::uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_angle(), target);
  }

  // float twist = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_twist = this->_internal_twist();
  ::uint32_t raw_twist;
  memcpy(&raw_twist, &tmp_twist, sizeof(tmp_twist));
  if (raw_twist != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_twist(), target);
  }

  // float torque = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_torque = this->_internal_torque();
  ::uint32_t raw_torque;
  memcpy(&raw_torque, &tmp_torque, sizeof(tmp_torque));
  if (raw_torque != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_torque(), target);
  }

  // float kp = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_kp = this->_internal_kp();
  ::uint32_t raw_kp;
  memcpy(&raw_kp, &tmp_kp, sizeof(tmp_kp));
  if (raw_kp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_kp(), target);
  }

  // float ki = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ki = this->_internal_ki();
  ::uint32_t raw_ki;
  memcpy(&raw_ki, &tmp_ki, sizeof(tmp_ki));
  if (raw_ki != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_ki(), target);
  }

  // float kd = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_kd = this->_internal_kd();
  ::uint32_t raw_kd;
  memcpy(&raw_kd, &tmp_kd, sizeof(tmp_kd));
  if (raw_kd != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_kd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motor_msg.Motor)
  return target;
}

::size_t Motor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:motor_msg.Motor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float angle = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  ::uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    total_size += 5;
  }

  // float twist = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_twist = this->_internal_twist();
  ::uint32_t raw_twist;
  memcpy(&raw_twist, &tmp_twist, sizeof(tmp_twist));
  if (raw_twist != 0) {
    total_size += 5;
  }

  // float torque = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_torque = this->_internal_torque();
  ::uint32_t raw_torque;
  memcpy(&raw_torque, &tmp_torque, sizeof(tmp_torque));
  if (raw_torque != 0) {
    total_size += 5;
  }

  // float kp = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_kp = this->_internal_kp();
  ::uint32_t raw_kp;
  memcpy(&raw_kp, &tmp_kp, sizeof(tmp_kp));
  if (raw_kp != 0) {
    total_size += 5;
  }

  // float ki = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ki = this->_internal_ki();
  ::uint32_t raw_ki;
  memcpy(&raw_ki, &tmp_ki, sizeof(tmp_ki));
  if (raw_ki != 0) {
    total_size += 5;
  }

  // float kd = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_kd = this->_internal_kd();
  ::uint32_t raw_kd;
  memcpy(&raw_kd, &tmp_kd, sizeof(tmp_kd));
  if (raw_kd != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Motor::_class_data_ = {
    Motor::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Motor::GetClassData() const {
  return &_class_data_;
}

void Motor::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Motor*>(&to_msg);
  auto& from = static_cast<const Motor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:motor_msg.Motor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angle = from._internal_angle();
  ::uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    _this->_internal_set_angle(from._internal_angle());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_twist = from._internal_twist();
  ::uint32_t raw_twist;
  memcpy(&raw_twist, &tmp_twist, sizeof(tmp_twist));
  if (raw_twist != 0) {
    _this->_internal_set_twist(from._internal_twist());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_torque = from._internal_torque();
  ::uint32_t raw_torque;
  memcpy(&raw_torque, &tmp_torque, sizeof(tmp_torque));
  if (raw_torque != 0) {
    _this->_internal_set_torque(from._internal_torque());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_kp = from._internal_kp();
  ::uint32_t raw_kp;
  memcpy(&raw_kp, &tmp_kp, sizeof(tmp_kp));
  if (raw_kp != 0) {
    _this->_internal_set_kp(from._internal_kp());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ki = from._internal_ki();
  ::uint32_t raw_ki;
  memcpy(&raw_ki, &tmp_ki, sizeof(tmp_ki));
  if (raw_ki != 0) {
    _this->_internal_set_ki(from._internal_ki());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_kd = from._internal_kd();
  ::uint32_t raw_kd;
  memcpy(&raw_kd, &tmp_kd, sizeof(tmp_kd));
  if (raw_kd != 0) {
    _this->_internal_set_kd(from._internal_kd());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Motor::CopyFrom(const Motor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:motor_msg.Motor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Motor::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Motor::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Motor::InternalSwap(Motor* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Motor, _impl_.kd_)
      + sizeof(Motor::_impl_.kd_)
      - PROTOBUF_FIELD_OFFSET(Motor, _impl_.angle_)>(
          reinterpret_cast<char*>(&_impl_.angle_),
          reinterpret_cast<char*>(&other->_impl_.angle_));
}

::google::protobuf::Metadata Motor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_motor_2eproto_getter, &descriptor_table_motor_2eproto_once,
      file_level_metadata_motor_2eproto[0]);
}
// ===================================================================

class LegAngle::_Internal {
 public:
};

LegAngle::LegAngle(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:motor_msg.LegAngle)
}
LegAngle::LegAngle(
    ::google::protobuf::Arena* arena, const LegAngle& from)
    : LegAngle(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE LegAngle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LegAngle::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, theta_),
           0,
           offsetof(Impl_, beta_) -
               offsetof(Impl_, theta_) +
               sizeof(Impl_::beta_));
}
LegAngle::~LegAngle() {
  // @@protoc_insertion_point(destructor:motor_msg.LegAngle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LegAngle::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LegAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:motor_msg.LegAngle)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.theta_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.beta_) -
      reinterpret_cast<char*>(&_impl_.theta_)) + sizeof(_impl_.beta_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LegAngle::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> LegAngle::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LegAngle_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float beta = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(LegAngle, _impl_.beta_)}},
    // float theta = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(LegAngle, _impl_.theta_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float theta = 1;
    {PROTOBUF_FIELD_OFFSET(LegAngle, _impl_.theta_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float beta = 2;
    {PROTOBUF_FIELD_OFFSET(LegAngle, _impl_.beta_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* LegAngle::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:motor_msg.LegAngle)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float theta = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_theta = this->_internal_theta();
  ::uint32_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_theta(), target);
  }

  // float beta = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_beta = this->_internal_beta();
  ::uint32_t raw_beta;
  memcpy(&raw_beta, &tmp_beta, sizeof(tmp_beta));
  if (raw_beta != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_beta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motor_msg.LegAngle)
  return target;
}

::size_t LegAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:motor_msg.LegAngle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float theta = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_theta = this->_internal_theta();
  ::uint32_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    total_size += 5;
  }

  // float beta = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_beta = this->_internal_beta();
  ::uint32_t raw_beta;
  memcpy(&raw_beta, &tmp_beta, sizeof(tmp_beta));
  if (raw_beta != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LegAngle::_class_data_ = {
    LegAngle::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LegAngle::GetClassData() const {
  return &_class_data_;
}

void LegAngle::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LegAngle*>(&to_msg);
  auto& from = static_cast<const LegAngle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:motor_msg.LegAngle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_theta = from._internal_theta();
  ::uint32_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    _this->_internal_set_theta(from._internal_theta());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_beta = from._internal_beta();
  ::uint32_t raw_beta;
  memcpy(&raw_beta, &tmp_beta, sizeof(tmp_beta));
  if (raw_beta != 0) {
    _this->_internal_set_beta(from._internal_beta());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LegAngle::CopyFrom(const LegAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:motor_msg.LegAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LegAngle::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LegAngle::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LegAngle::InternalSwap(LegAngle* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LegAngle, _impl_.beta_)
      + sizeof(LegAngle::_impl_.beta_)
      - PROTOBUF_FIELD_OFFSET(LegAngle, _impl_.theta_)>(
          reinterpret_cast<char*>(&_impl_.theta_),
          reinterpret_cast<char*>(&other->_impl_.theta_));
}

::google::protobuf::Metadata LegAngle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_motor_2eproto_getter, &descriptor_table_motor_2eproto_once,
      file_level_metadata_motor_2eproto[1]);
}
// ===================================================================

class MotorStamped::_Internal {
 public:
  using HasBits = decltype(std::declval<MotorStamped>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MotorStamped, _impl_._has_bits_);
  static const ::std_msg::Header& header(const MotorStamped* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::std_msg::Header& MotorStamped::_Internal::header(const MotorStamped* msg) {
  return *msg->_impl_.header_;
}
void MotorStamped::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MotorStamped::MotorStamped(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:motor_msg.MotorStamped)
}
inline PROTOBUF_NDEBUG_INLINE MotorStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        motors_{visibility, arena, from.motors_},
        legs_{visibility, arena, from.legs_} {}

MotorStamped::MotorStamped(
    ::google::protobuf::Arena* arena,
    const MotorStamped& from)
    : ::google::protobuf::Message(arena) {
  MotorStamped* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::std_msg::Header>(arena, *from._impl_.header_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:motor_msg.MotorStamped)
}
inline PROTOBUF_NDEBUG_INLINE MotorStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        motors_{visibility, arena},
        legs_{visibility, arena} {}

inline void MotorStamped::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.header_ = {};
}
MotorStamped::~MotorStamped() {
  // @@protoc_insertion_point(destructor:motor_msg.MotorStamped)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MotorStamped::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MotorStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:motor_msg.MotorStamped)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.motors_.Clear();
  _impl_.legs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MotorStamped::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> MotorStamped::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MotorStamped, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MotorStamped_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .std_msg.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MotorStamped, _impl_.header_)}},
    // repeated .motor_msg.Motor motors = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(MotorStamped, _impl_.motors_)}},
    // repeated .motor_msg.LegAngle legs = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(MotorStamped, _impl_.legs_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .std_msg.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(MotorStamped, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .motor_msg.Motor motors = 2;
    {PROTOBUF_FIELD_OFFSET(MotorStamped, _impl_.motors_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .motor_msg.LegAngle legs = 3;
    {PROTOBUF_FIELD_OFFSET(MotorStamped, _impl_.legs_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::std_msg::Header>()},
    {::_pbi::TcParser::GetTable<::motor_msg::Motor>()},
    {::_pbi::TcParser::GetTable<::motor_msg::LegAngle>()},
  }}, {{
  }},
};

::uint8_t* MotorStamped::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:motor_msg.MotorStamped)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .std_msg.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .motor_msg.Motor motors = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_motors_size()); i < n; i++) {
    const auto& repfield = this->_internal_motors().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .motor_msg.LegAngle legs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_legs_size()); i < n; i++) {
    const auto& repfield = this->_internal_legs().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motor_msg.MotorStamped)
  return target;
}

::size_t MotorStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:motor_msg.MotorStamped)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .motor_msg.Motor motors = 2;
  total_size += 1UL * this->_internal_motors_size();
  for (const auto& msg : this->_internal_motors()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .motor_msg.LegAngle legs = 3;
  total_size += 1UL * this->_internal_legs_size();
  for (const auto& msg : this->_internal_legs()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .std_msg.Header header = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MotorStamped::_class_data_ = {
    MotorStamped::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MotorStamped::GetClassData() const {
  return &_class_data_;
}

void MotorStamped::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MotorStamped*>(&to_msg);
  auto& from = static_cast<const MotorStamped&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:motor_msg.MotorStamped)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_motors()->MergeFrom(
      from._internal_motors());
  _this->_internal_mutable_legs()->MergeFrom(
      from._internal_legs());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_header()->::std_msg::Header::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MotorStamped::CopyFrom(const MotorStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:motor_msg.MotorStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MotorStamped::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MotorStamped::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MotorStamped::InternalSwap(MotorStamped* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.motors_.InternalSwap(&other->_impl_.motors_);
  _impl_.legs_.InternalSwap(&other->_impl_.legs_);
  swap(_impl_.header_, other->_impl_.header_);
}

::google::protobuf::Metadata MotorStamped::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_motor_2eproto_getter, &descriptor_table_motor_2eproto_once,
      file_level_metadata_motor_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace motor_msg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
