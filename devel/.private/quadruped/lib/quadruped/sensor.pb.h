// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensor_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sensor_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "geometry.pb.h"
#include "std.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sensor_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sensor_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_sensor_2eproto;
namespace sensor_msg {
class IMU;
struct IMUDefaultTypeInternal;
extern IMUDefaultTypeInternal _IMU_default_instance_;
class Lidar;
struct LidarDefaultTypeInternal;
extern LidarDefaultTypeInternal _Lidar_default_instance_;
class Odometry;
struct OdometryDefaultTypeInternal;
extern OdometryDefaultTypeInternal _Odometry_default_instance_;
class SensorReply;
struct SensorReplyDefaultTypeInternal;
extern SensorReplyDefaultTypeInternal _SensorReply_default_instance_;
class SensorRequest;
struct SensorRequestDefaultTypeInternal;
extern SensorRequestDefaultTypeInternal _SensorRequest_default_instance_;
}  // namespace sensor_msg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace sensor_msg {
enum SensorMode : int {
  REST = 0,
  CALIBRATION = 1,
  SENSOR = 2,
  RESET = 3,
  SensorMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SensorMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SensorMode_IsValid(int value);
extern const uint32_t SensorMode_internal_data_[];
constexpr SensorMode SensorMode_MIN = static_cast<SensorMode>(0);
constexpr SensorMode SensorMode_MAX = static_cast<SensorMode>(3);
constexpr int SensorMode_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
SensorMode_descriptor();
template <typename T>
const std::string& SensorMode_Name(T value) {
  static_assert(std::is_same<T, SensorMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SensorMode_Name().");
  return SensorMode_Name(static_cast<SensorMode>(value));
}
template <>
inline const std::string& SensorMode_Name(SensorMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SensorMode_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool SensorMode_Parse(absl::string_view name, SensorMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SensorMode>(
      SensorMode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SensorRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensor_msg.SensorRequest) */ {
 public:
  inline SensorRequest() : SensorRequest(nullptr) {}
  ~SensorRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SensorRequest(::google::protobuf::internal::ConstantInitialized);

  inline SensorRequest(const SensorRequest& from)
      : SensorRequest(nullptr, from) {}
  SensorRequest(SensorRequest&& from) noexcept
    : SensorRequest() {
    *this = ::std::move(from);
  }

  inline SensorRequest& operator=(const SensorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorRequest& operator=(SensorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SensorRequest* internal_default_instance() {
    return reinterpret_cast<const SensorRequest*>(
               &_SensorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SensorRequest& a, SensorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SensorRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SensorRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SensorRequest& from) {
    SensorRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SensorRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensor_msg.SensorRequest";
  }
  protected:
  explicit SensorRequest(::google::protobuf::Arena* arena);
  SensorRequest(::google::protobuf::Arena* arena, const SensorRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
  };
  // .sensor_msg.SensorMode mode = 1;
  void clear_mode() ;
  ::sensor_msg::SensorMode mode() const;
  void set_mode(::sensor_msg::SensorMode value);

  private:
  ::sensor_msg::SensorMode _internal_mode() const;
  void _internal_set_mode(::sensor_msg::SensorMode value);

  public:
  // @@protoc_insertion_point(class_scope:sensor_msg.SensorRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    int mode_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_2eproto;
};// -------------------------------------------------------------------

class SensorReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensor_msg.SensorReply) */ {
 public:
  inline SensorReply() : SensorReply(nullptr) {}
  ~SensorReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SensorReply(::google::protobuf::internal::ConstantInitialized);

  inline SensorReply(const SensorReply& from)
      : SensorReply(nullptr, from) {}
  SensorReply(SensorReply&& from) noexcept
    : SensorReply() {
    *this = ::std::move(from);
  }

  inline SensorReply& operator=(const SensorReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorReply& operator=(SensorReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SensorReply* internal_default_instance() {
    return reinterpret_cast<const SensorReply*>(
               &_SensorReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SensorReply& a, SensorReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SensorReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SensorReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SensorReply& from) {
    SensorReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SensorReply* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensor_msg.SensorReply";
  }
  protected:
  explicit SensorReply(::google::protobuf::Arena* arena);
  SensorReply(::google::protobuf::Arena* arena, const SensorReply& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 2,
  };
  // .sensor_msg.SensorMode mode = 2;
  void clear_mode() ;
  ::sensor_msg::SensorMode mode() const;
  void set_mode(::sensor_msg::SensorMode value);

  private:
  ::sensor_msg::SensorMode _internal_mode() const;
  void _internal_set_mode(::sensor_msg::SensorMode value);

  public:
  // @@protoc_insertion_point(class_scope:sensor_msg.SensorReply)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    int mode_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_2eproto;
};// -------------------------------------------------------------------

class Lidar final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensor_msg.Lidar) */ {
 public:
  inline Lidar() : Lidar(nullptr) {}
  ~Lidar() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Lidar(::google::protobuf::internal::ConstantInitialized);

  inline Lidar(const Lidar& from)
      : Lidar(nullptr, from) {}
  Lidar(Lidar&& from) noexcept
    : Lidar() {
    *this = ::std::move(from);
  }

  inline Lidar& operator=(const Lidar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lidar& operator=(Lidar&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Lidar& default_instance() {
    return *internal_default_instance();
  }
  static inline const Lidar* internal_default_instance() {
    return reinterpret_cast<const Lidar*>(
               &_Lidar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Lidar& a, Lidar& b) {
    a.Swap(&b);
  }
  inline void Swap(Lidar* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Lidar* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Lidar* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Lidar>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Lidar& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Lidar& from) {
    Lidar::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Lidar* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensor_msg.Lidar";
  }
  protected:
  explicit Lidar(::google::protobuf::Arena* arena);
  Lidar(::google::protobuf::Arena* arena, const Lidar& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated double dist = 2;
  int dist_size() const;
  private:
  int _internal_dist_size() const;

  public:
  void clear_dist() ;
  double dist(int index) const;
  void set_dist(int index, double value);
  void add_dist(double value);
  const ::google::protobuf::RepeatedField<double>& dist() const;
  ::google::protobuf::RepeatedField<double>* mutable_dist();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_dist() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_dist();

  public:
  // .std_msg.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::std_msg::Header& header() const;
  PROTOBUF_NODISCARD ::std_msg::Header* release_header();
  ::std_msg::Header* mutable_header();
  void set_allocated_header(::std_msg::Header* value);
  void unsafe_arena_set_allocated_header(::std_msg::Header* value);
  ::std_msg::Header* unsafe_arena_release_header();

  private:
  const ::std_msg::Header& _internal_header() const;
  ::std_msg::Header* _internal_mutable_header();

  public:
  // @@protoc_insertion_point(class_scope:sensor_msg.Lidar)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<double> dist_;
    ::std_msg::Header* header_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_2eproto;
};// -------------------------------------------------------------------

class IMU final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensor_msg.IMU) */ {
 public:
  inline IMU() : IMU(nullptr) {}
  ~IMU() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IMU(::google::protobuf::internal::ConstantInitialized);

  inline IMU(const IMU& from)
      : IMU(nullptr, from) {}
  IMU(IMU&& from) noexcept
    : IMU() {
    *this = ::std::move(from);
  }

  inline IMU& operator=(const IMU& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMU& operator=(IMU&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMU& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMU* internal_default_instance() {
    return reinterpret_cast<const IMU*>(
               &_IMU_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IMU& a, IMU& b) {
    a.Swap(&b);
  }
  inline void Swap(IMU* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMU* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IMU* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IMU>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IMU& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IMU& from) {
    IMU::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IMU* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensor_msg.IMU";
  }
  protected:
  explicit IMU(::google::protobuf::Arena* arena);
  IMU(::google::protobuf::Arena* arena, const IMU& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovarianceFieldNumber = 5,
    kHeaderFieldNumber = 1,
    kAccelerationFieldNumber = 2,
    kTwistFieldNumber = 3,
    kOrientationFieldNumber = 4,
  };
  // repeated double covariance = 5;
  int covariance_size() const;
  private:
  int _internal_covariance_size() const;

  public:
  void clear_covariance() ;
  double covariance(int index) const;
  void set_covariance(int index, double value);
  void add_covariance(double value);
  const ::google::protobuf::RepeatedField<double>& covariance() const;
  ::google::protobuf::RepeatedField<double>* mutable_covariance();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_covariance() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_covariance();

  public:
  // .std_msg.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::std_msg::Header& header() const;
  PROTOBUF_NODISCARD ::std_msg::Header* release_header();
  ::std_msg::Header* mutable_header();
  void set_allocated_header(::std_msg::Header* value);
  void unsafe_arena_set_allocated_header(::std_msg::Header* value);
  ::std_msg::Header* unsafe_arena_release_header();

  private:
  const ::std_msg::Header& _internal_header() const;
  ::std_msg::Header* _internal_mutable_header();

  public:
  // .geometry_msg.Vector3 acceleration = 2;
  bool has_acceleration() const;
  void clear_acceleration() ;
  const ::geometry_msg::Vector3& acceleration() const;
  PROTOBUF_NODISCARD ::geometry_msg::Vector3* release_acceleration();
  ::geometry_msg::Vector3* mutable_acceleration();
  void set_allocated_acceleration(::geometry_msg::Vector3* value);
  void unsafe_arena_set_allocated_acceleration(::geometry_msg::Vector3* value);
  ::geometry_msg::Vector3* unsafe_arena_release_acceleration();

  private:
  const ::geometry_msg::Vector3& _internal_acceleration() const;
  ::geometry_msg::Vector3* _internal_mutable_acceleration();

  public:
  // .geometry_msg.Vector3 twist = 3;
  bool has_twist() const;
  void clear_twist() ;
  const ::geometry_msg::Vector3& twist() const;
  PROTOBUF_NODISCARD ::geometry_msg::Vector3* release_twist();
  ::geometry_msg::Vector3* mutable_twist();
  void set_allocated_twist(::geometry_msg::Vector3* value);
  void unsafe_arena_set_allocated_twist(::geometry_msg::Vector3* value);
  ::geometry_msg::Vector3* unsafe_arena_release_twist();

  private:
  const ::geometry_msg::Vector3& _internal_twist() const;
  ::geometry_msg::Vector3* _internal_mutable_twist();

  public:
  // .geometry_msg.Quaternion orientation = 4;
  bool has_orientation() const;
  void clear_orientation() ;
  const ::geometry_msg::Quaternion& orientation() const;
  PROTOBUF_NODISCARD ::geometry_msg::Quaternion* release_orientation();
  ::geometry_msg::Quaternion* mutable_orientation();
  void set_allocated_orientation(::geometry_msg::Quaternion* value);
  void unsafe_arena_set_allocated_orientation(::geometry_msg::Quaternion* value);
  ::geometry_msg::Quaternion* unsafe_arena_release_orientation();

  private:
  const ::geometry_msg::Quaternion& _internal_orientation() const;
  ::geometry_msg::Quaternion* _internal_mutable_orientation();

  public:
  // @@protoc_insertion_point(class_scope:sensor_msg.IMU)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<double> covariance_;
    ::std_msg::Header* header_;
    ::geometry_msg::Vector3* acceleration_;
    ::geometry_msg::Vector3* twist_;
    ::geometry_msg::Quaternion* orientation_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_2eproto;
};// -------------------------------------------------------------------

class Odometry final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensor_msg.Odometry) */ {
 public:
  inline Odometry() : Odometry(nullptr) {}
  ~Odometry() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Odometry(::google::protobuf::internal::ConstantInitialized);

  inline Odometry(const Odometry& from)
      : Odometry(nullptr, from) {}
  Odometry(Odometry&& from) noexcept
    : Odometry() {
    *this = ::std::move(from);
  }

  inline Odometry& operator=(const Odometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Odometry& operator=(Odometry&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Odometry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Odometry* internal_default_instance() {
    return reinterpret_cast<const Odometry*>(
               &_Odometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Odometry& a, Odometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Odometry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Odometry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Odometry* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Odometry>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Odometry& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Odometry& from) {
    Odometry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Odometry* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensor_msg.Odometry";
  }
  protected:
  explicit Odometry(::google::protobuf::Arena* arena);
  Odometry(::google::protobuf::Arena* arena, const Odometry& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPositionFieldNumber = 2,
    kTwistFieldNumber = 3,
  };
  // .std_msg.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::std_msg::Header& header() const;
  PROTOBUF_NODISCARD ::std_msg::Header* release_header();
  ::std_msg::Header* mutable_header();
  void set_allocated_header(::std_msg::Header* value);
  void unsafe_arena_set_allocated_header(::std_msg::Header* value);
  ::std_msg::Header* unsafe_arena_release_header();

  private:
  const ::std_msg::Header& _internal_header() const;
  ::std_msg::Header* _internal_mutable_header();

  public:
  // .geometry_msg.PoseWithCovariance position = 2;
  bool has_position() const;
  void clear_position() ;
  const ::geometry_msg::PoseWithCovariance& position() const;
  PROTOBUF_NODISCARD ::geometry_msg::PoseWithCovariance* release_position();
  ::geometry_msg::PoseWithCovariance* mutable_position();
  void set_allocated_position(::geometry_msg::PoseWithCovariance* value);
  void unsafe_arena_set_allocated_position(::geometry_msg::PoseWithCovariance* value);
  ::geometry_msg::PoseWithCovariance* unsafe_arena_release_position();

  private:
  const ::geometry_msg::PoseWithCovariance& _internal_position() const;
  ::geometry_msg::PoseWithCovariance* _internal_mutable_position();

  public:
  // .geometry_msg.TwistWithCovariance twist = 3;
  bool has_twist() const;
  void clear_twist() ;
  const ::geometry_msg::TwistWithCovariance& twist() const;
  PROTOBUF_NODISCARD ::geometry_msg::TwistWithCovariance* release_twist();
  ::geometry_msg::TwistWithCovariance* mutable_twist();
  void set_allocated_twist(::geometry_msg::TwistWithCovariance* value);
  void unsafe_arena_set_allocated_twist(::geometry_msg::TwistWithCovariance* value);
  ::geometry_msg::TwistWithCovariance* unsafe_arena_release_twist();

  private:
  const ::geometry_msg::TwistWithCovariance& _internal_twist() const;
  ::geometry_msg::TwistWithCovariance* _internal_mutable_twist();

  public:
  // @@protoc_insertion_point(class_scope:sensor_msg.Odometry)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::std_msg::Header* header_;
    ::geometry_msg::PoseWithCovariance* position_;
    ::geometry_msg::TwistWithCovariance* twist_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IMU

// .std_msg.Header header = 1;
inline bool IMU::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::std_msg::Header& IMU::_internal_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::std_msg::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::std_msg::Header&>(::std_msg::_Header_default_instance_);
}
inline const ::std_msg::Header& IMU::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensor_msg.IMU.header)
  return _internal_header();
}
inline void IMU::unsafe_arena_set_allocated_header(::std_msg::Header* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::std_msg::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensor_msg.IMU.header)
}
inline ::std_msg::Header* IMU::release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::std_msg::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::std_msg::Header* IMU::unsafe_arena_release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensor_msg.IMU.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::std_msg::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::std_msg::Header* IMU::_internal_mutable_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::std_msg::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::std_msg::Header*>(p);
  }
  return _impl_.header_;
}
inline ::std_msg::Header* IMU::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std_msg::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:sensor_msg.IMU.header)
  return _msg;
}
inline void IMU::set_allocated_header(::std_msg::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::std_msg::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensor_msg.IMU.header)
}

// .geometry_msg.Vector3 acceleration = 2;
inline bool IMU::has_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.acceleration_ != nullptr);
  return value;
}
inline const ::geometry_msg::Vector3& IMU::_internal_acceleration() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::geometry_msg::Vector3* p = _impl_.acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::geometry_msg::Vector3&>(::geometry_msg::_Vector3_default_instance_);
}
inline const ::geometry_msg::Vector3& IMU::acceleration() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensor_msg.IMU.acceleration)
  return _internal_acceleration();
}
inline void IMU::unsafe_arena_set_allocated_acceleration(::geometry_msg::Vector3* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.acceleration_);
  }
  _impl_.acceleration_ = reinterpret_cast<::geometry_msg::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensor_msg.IMU.acceleration)
}
inline ::geometry_msg::Vector3* IMU::release_acceleration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::geometry_msg::Vector3* released = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::geometry_msg::Vector3* IMU::unsafe_arena_release_acceleration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensor_msg.IMU.acceleration)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::geometry_msg::Vector3* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
  return temp;
}
inline ::geometry_msg::Vector3* IMU::_internal_mutable_acceleration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry_msg::Vector3>(GetArena());
    _impl_.acceleration_ = reinterpret_cast<::geometry_msg::Vector3*>(p);
  }
  return _impl_.acceleration_;
}
inline ::geometry_msg::Vector3* IMU::mutable_acceleration() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::geometry_msg::Vector3* _msg = _internal_mutable_acceleration();
  // @@protoc_insertion_point(field_mutable:sensor_msg.IMU.acceleration)
  return _msg;
}
inline void IMU::set_allocated_acceleration(::geometry_msg::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.acceleration_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.acceleration_ = reinterpret_cast<::geometry_msg::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensor_msg.IMU.acceleration)
}

// .geometry_msg.Vector3 twist = 3;
inline bool IMU::has_twist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.twist_ != nullptr);
  return value;
}
inline const ::geometry_msg::Vector3& IMU::_internal_twist() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::geometry_msg::Vector3* p = _impl_.twist_;
  return p != nullptr ? *p : reinterpret_cast<const ::geometry_msg::Vector3&>(::geometry_msg::_Vector3_default_instance_);
}
inline const ::geometry_msg::Vector3& IMU::twist() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensor_msg.IMU.twist)
  return _internal_twist();
}
inline void IMU::unsafe_arena_set_allocated_twist(::geometry_msg::Vector3* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.twist_);
  }
  _impl_.twist_ = reinterpret_cast<::geometry_msg::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensor_msg.IMU.twist)
}
inline ::geometry_msg::Vector3* IMU::release_twist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::geometry_msg::Vector3* released = _impl_.twist_;
  _impl_.twist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::geometry_msg::Vector3* IMU::unsafe_arena_release_twist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensor_msg.IMU.twist)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::geometry_msg::Vector3* temp = _impl_.twist_;
  _impl_.twist_ = nullptr;
  return temp;
}
inline ::geometry_msg::Vector3* IMU::_internal_mutable_twist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.twist_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry_msg::Vector3>(GetArena());
    _impl_.twist_ = reinterpret_cast<::geometry_msg::Vector3*>(p);
  }
  return _impl_.twist_;
}
inline ::geometry_msg::Vector3* IMU::mutable_twist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::geometry_msg::Vector3* _msg = _internal_mutable_twist();
  // @@protoc_insertion_point(field_mutable:sensor_msg.IMU.twist)
  return _msg;
}
inline void IMU::set_allocated_twist(::geometry_msg::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.twist_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.twist_ = reinterpret_cast<::geometry_msg::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensor_msg.IMU.twist)
}

// .geometry_msg.Quaternion orientation = 4;
inline bool IMU::has_orientation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientation_ != nullptr);
  return value;
}
inline const ::geometry_msg::Quaternion& IMU::_internal_orientation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::geometry_msg::Quaternion* p = _impl_.orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::geometry_msg::Quaternion&>(::geometry_msg::_Quaternion_default_instance_);
}
inline const ::geometry_msg::Quaternion& IMU::orientation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensor_msg.IMU.orientation)
  return _internal_orientation();
}
inline void IMU::unsafe_arena_set_allocated_orientation(::geometry_msg::Quaternion* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.orientation_);
  }
  _impl_.orientation_ = reinterpret_cast<::geometry_msg::Quaternion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensor_msg.IMU.orientation)
}
inline ::geometry_msg::Quaternion* IMU::release_orientation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::geometry_msg::Quaternion* released = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::geometry_msg::Quaternion* IMU::unsafe_arena_release_orientation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensor_msg.IMU.orientation)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::geometry_msg::Quaternion* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  return temp;
}
inline ::geometry_msg::Quaternion* IMU::_internal_mutable_orientation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry_msg::Quaternion>(GetArena());
    _impl_.orientation_ = reinterpret_cast<::geometry_msg::Quaternion*>(p);
  }
  return _impl_.orientation_;
}
inline ::geometry_msg::Quaternion* IMU::mutable_orientation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::geometry_msg::Quaternion* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:sensor_msg.IMU.orientation)
  return _msg;
}
inline void IMU::set_allocated_orientation(::geometry_msg::Quaternion* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.orientation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.orientation_ = reinterpret_cast<::geometry_msg::Quaternion*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensor_msg.IMU.orientation)
}

// repeated double covariance = 5;
inline int IMU::_internal_covariance_size() const {
  return _internal_covariance().size();
}
inline int IMU::covariance_size() const {
  return _internal_covariance_size();
}
inline void IMU::clear_covariance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.covariance_.Clear();
}
inline double IMU::covariance(int index) const {
  // @@protoc_insertion_point(field_get:sensor_msg.IMU.covariance)
  return _internal_covariance().Get(index);
}
inline void IMU::set_covariance(int index, double value) {
  _internal_mutable_covariance()->Set(index, value);
  // @@protoc_insertion_point(field_set:sensor_msg.IMU.covariance)
}
inline void IMU::add_covariance(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_covariance()->Add(value);
  // @@protoc_insertion_point(field_add:sensor_msg.IMU.covariance)
}
inline const ::google::protobuf::RepeatedField<double>& IMU::covariance() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensor_msg.IMU.covariance)
  return _internal_covariance();
}
inline ::google::protobuf::RepeatedField<double>* IMU::mutable_covariance()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensor_msg.IMU.covariance)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_covariance();
}
inline const ::google::protobuf::RepeatedField<double>& IMU::_internal_covariance()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.covariance_;
}
inline ::google::protobuf::RepeatedField<double>* IMU::_internal_mutable_covariance() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.covariance_;
}

// -------------------------------------------------------------------

// Odometry

// .std_msg.Header header = 1;
inline bool Odometry::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::std_msg::Header& Odometry::_internal_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::std_msg::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::std_msg::Header&>(::std_msg::_Header_default_instance_);
}
inline const ::std_msg::Header& Odometry::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensor_msg.Odometry.header)
  return _internal_header();
}
inline void Odometry::unsafe_arena_set_allocated_header(::std_msg::Header* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::std_msg::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensor_msg.Odometry.header)
}
inline ::std_msg::Header* Odometry::release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::std_msg::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::std_msg::Header* Odometry::unsafe_arena_release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensor_msg.Odometry.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::std_msg::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::std_msg::Header* Odometry::_internal_mutable_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::std_msg::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::std_msg::Header*>(p);
  }
  return _impl_.header_;
}
inline ::std_msg::Header* Odometry::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std_msg::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:sensor_msg.Odometry.header)
  return _msg;
}
inline void Odometry::set_allocated_header(::std_msg::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::std_msg::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensor_msg.Odometry.header)
}

// .geometry_msg.PoseWithCovariance position = 2;
inline bool Odometry::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline const ::geometry_msg::PoseWithCovariance& Odometry::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::geometry_msg::PoseWithCovariance* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::geometry_msg::PoseWithCovariance&>(::geometry_msg::_PoseWithCovariance_default_instance_);
}
inline const ::geometry_msg::PoseWithCovariance& Odometry::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensor_msg.Odometry.position)
  return _internal_position();
}
inline void Odometry::unsafe_arena_set_allocated_position(::geometry_msg::PoseWithCovariance* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::geometry_msg::PoseWithCovariance*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensor_msg.Odometry.position)
}
inline ::geometry_msg::PoseWithCovariance* Odometry::release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::geometry_msg::PoseWithCovariance* released = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::geometry_msg::PoseWithCovariance* Odometry::unsafe_arena_release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensor_msg.Odometry.position)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::geometry_msg::PoseWithCovariance* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::geometry_msg::PoseWithCovariance* Odometry::_internal_mutable_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry_msg::PoseWithCovariance>(GetArena());
    _impl_.position_ = reinterpret_cast<::geometry_msg::PoseWithCovariance*>(p);
  }
  return _impl_.position_;
}
inline ::geometry_msg::PoseWithCovariance* Odometry::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::geometry_msg::PoseWithCovariance* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:sensor_msg.Odometry.position)
  return _msg;
}
inline void Odometry::set_allocated_position(::geometry_msg::PoseWithCovariance* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.position_ = reinterpret_cast<::geometry_msg::PoseWithCovariance*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensor_msg.Odometry.position)
}

// .geometry_msg.TwistWithCovariance twist = 3;
inline bool Odometry::has_twist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.twist_ != nullptr);
  return value;
}
inline const ::geometry_msg::TwistWithCovariance& Odometry::_internal_twist() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::geometry_msg::TwistWithCovariance* p = _impl_.twist_;
  return p != nullptr ? *p : reinterpret_cast<const ::geometry_msg::TwistWithCovariance&>(::geometry_msg::_TwistWithCovariance_default_instance_);
}
inline const ::geometry_msg::TwistWithCovariance& Odometry::twist() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensor_msg.Odometry.twist)
  return _internal_twist();
}
inline void Odometry::unsafe_arena_set_allocated_twist(::geometry_msg::TwistWithCovariance* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.twist_);
  }
  _impl_.twist_ = reinterpret_cast<::geometry_msg::TwistWithCovariance*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensor_msg.Odometry.twist)
}
inline ::geometry_msg::TwistWithCovariance* Odometry::release_twist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::geometry_msg::TwistWithCovariance* released = _impl_.twist_;
  _impl_.twist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::geometry_msg::TwistWithCovariance* Odometry::unsafe_arena_release_twist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensor_msg.Odometry.twist)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::geometry_msg::TwistWithCovariance* temp = _impl_.twist_;
  _impl_.twist_ = nullptr;
  return temp;
}
inline ::geometry_msg::TwistWithCovariance* Odometry::_internal_mutable_twist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.twist_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry_msg::TwistWithCovariance>(GetArena());
    _impl_.twist_ = reinterpret_cast<::geometry_msg::TwistWithCovariance*>(p);
  }
  return _impl_.twist_;
}
inline ::geometry_msg::TwistWithCovariance* Odometry::mutable_twist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::geometry_msg::TwistWithCovariance* _msg = _internal_mutable_twist();
  // @@protoc_insertion_point(field_mutable:sensor_msg.Odometry.twist)
  return _msg;
}
inline void Odometry::set_allocated_twist(::geometry_msg::TwistWithCovariance* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.twist_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.twist_ = reinterpret_cast<::geometry_msg::TwistWithCovariance*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensor_msg.Odometry.twist)
}

// -------------------------------------------------------------------

// Lidar

// .std_msg.Header header = 1;
inline bool Lidar::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::std_msg::Header& Lidar::_internal_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::std_msg::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::std_msg::Header&>(::std_msg::_Header_default_instance_);
}
inline const ::std_msg::Header& Lidar::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensor_msg.Lidar.header)
  return _internal_header();
}
inline void Lidar::unsafe_arena_set_allocated_header(::std_msg::Header* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::std_msg::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensor_msg.Lidar.header)
}
inline ::std_msg::Header* Lidar::release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::std_msg::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::std_msg::Header* Lidar::unsafe_arena_release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensor_msg.Lidar.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::std_msg::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::std_msg::Header* Lidar::_internal_mutable_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::std_msg::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::std_msg::Header*>(p);
  }
  return _impl_.header_;
}
inline ::std_msg::Header* Lidar::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std_msg::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:sensor_msg.Lidar.header)
  return _msg;
}
inline void Lidar::set_allocated_header(::std_msg::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::std_msg::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensor_msg.Lidar.header)
}

// repeated double dist = 2;
inline int Lidar::_internal_dist_size() const {
  return _internal_dist().size();
}
inline int Lidar::dist_size() const {
  return _internal_dist_size();
}
inline void Lidar::clear_dist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dist_.Clear();
}
inline double Lidar::dist(int index) const {
  // @@protoc_insertion_point(field_get:sensor_msg.Lidar.dist)
  return _internal_dist().Get(index);
}
inline void Lidar::set_dist(int index, double value) {
  _internal_mutable_dist()->Set(index, value);
  // @@protoc_insertion_point(field_set:sensor_msg.Lidar.dist)
}
inline void Lidar::add_dist(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_dist()->Add(value);
  // @@protoc_insertion_point(field_add:sensor_msg.Lidar.dist)
}
inline const ::google::protobuf::RepeatedField<double>& Lidar::dist() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensor_msg.Lidar.dist)
  return _internal_dist();
}
inline ::google::protobuf::RepeatedField<double>* Lidar::mutable_dist()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensor_msg.Lidar.dist)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_dist();
}
inline const ::google::protobuf::RepeatedField<double>& Lidar::_internal_dist()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dist_;
}
inline ::google::protobuf::RepeatedField<double>* Lidar::_internal_mutable_dist() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.dist_;
}

// -------------------------------------------------------------------

// SensorRequest

// .sensor_msg.SensorMode mode = 1;
inline void SensorRequest::clear_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mode_ = 0;
}
inline ::sensor_msg::SensorMode SensorRequest::mode() const {
  // @@protoc_insertion_point(field_get:sensor_msg.SensorRequest.mode)
  return _internal_mode();
}
inline void SensorRequest::set_mode(::sensor_msg::SensorMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:sensor_msg.SensorRequest.mode)
}
inline ::sensor_msg::SensorMode SensorRequest::_internal_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensor_msg::SensorMode>(_impl_.mode_);
}
inline void SensorRequest::_internal_set_mode(::sensor_msg::SensorMode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// SensorReply

// .sensor_msg.SensorMode mode = 2;
inline void SensorReply::clear_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mode_ = 0;
}
inline ::sensor_msg::SensorMode SensorReply::mode() const {
  // @@protoc_insertion_point(field_get:sensor_msg.SensorReply.mode)
  return _internal_mode();
}
inline void SensorReply::set_mode(::sensor_msg::SensorMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:sensor_msg.SensorReply.mode)
}
inline ::sensor_msg::SensorMode SensorReply::_internal_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensor_msg::SensorMode>(_impl_.mode_);
}
inline void SensorReply::_internal_set_mode(::sensor_msg::SensorMode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mode_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace sensor_msg


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::sensor_msg::SensorMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sensor_msg::SensorMode>() {
  return ::sensor_msg::SensorMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sensor_2eproto_2epb_2eh
