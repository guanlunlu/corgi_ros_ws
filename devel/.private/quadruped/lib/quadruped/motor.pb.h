// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: motor.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_motor_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_motor_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "std.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_motor_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_motor_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_motor_2eproto;
namespace motor_msg {
class LegAngle;
struct LegAngleDefaultTypeInternal;
extern LegAngleDefaultTypeInternal _LegAngle_default_instance_;
class Motor;
struct MotorDefaultTypeInternal;
extern MotorDefaultTypeInternal _Motor_default_instance_;
class MotorStamped;
struct MotorStampedDefaultTypeInternal;
extern MotorStampedDefaultTypeInternal _MotorStamped_default_instance_;
}  // namespace motor_msg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace motor_msg {

// ===================================================================


// -------------------------------------------------------------------

class Motor final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:motor_msg.Motor) */ {
 public:
  inline Motor() : Motor(nullptr) {}
  ~Motor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Motor(::google::protobuf::internal::ConstantInitialized);

  inline Motor(const Motor& from)
      : Motor(nullptr, from) {}
  Motor(Motor&& from) noexcept
    : Motor() {
    *this = ::std::move(from);
  }

  inline Motor& operator=(const Motor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Motor& operator=(Motor&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Motor& default_instance() {
    return *internal_default_instance();
  }
  static inline const Motor* internal_default_instance() {
    return reinterpret_cast<const Motor*>(
               &_Motor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Motor& a, Motor& b) {
    a.Swap(&b);
  }
  inline void Swap(Motor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Motor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Motor* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Motor>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Motor& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Motor& from) {
    Motor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Motor* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "motor_msg.Motor";
  }
  protected:
  explicit Motor(::google::protobuf::Arena* arena);
  Motor(::google::protobuf::Arena* arena, const Motor& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 1,
    kTwistFieldNumber = 2,
    kTorqueFieldNumber = 3,
    kKpFieldNumber = 4,
    kKiFieldNumber = 5,
    kKdFieldNumber = 6,
  };
  // float angle = 1;
  void clear_angle() ;
  float angle() const;
  void set_angle(float value);

  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);

  public:
  // float twist = 2;
  void clear_twist() ;
  float twist() const;
  void set_twist(float value);

  private:
  float _internal_twist() const;
  void _internal_set_twist(float value);

  public:
  // float torque = 3;
  void clear_torque() ;
  float torque() const;
  void set_torque(float value);

  private:
  float _internal_torque() const;
  void _internal_set_torque(float value);

  public:
  // float kp = 4;
  void clear_kp() ;
  float kp() const;
  void set_kp(float value);

  private:
  float _internal_kp() const;
  void _internal_set_kp(float value);

  public:
  // float ki = 5;
  void clear_ki() ;
  float ki() const;
  void set_ki(float value);

  private:
  float _internal_ki() const;
  void _internal_set_ki(float value);

  public:
  // float kd = 6;
  void clear_kd() ;
  float kd() const;
  void set_kd(float value);

  private:
  float _internal_kd() const;
  void _internal_set_kd(float value);

  public:
  // @@protoc_insertion_point(class_scope:motor_msg.Motor)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    float angle_;
    float twist_;
    float torque_;
    float kp_;
    float ki_;
    float kd_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_motor_2eproto;
};// -------------------------------------------------------------------

class LegAngle final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:motor_msg.LegAngle) */ {
 public:
  inline LegAngle() : LegAngle(nullptr) {}
  ~LegAngle() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LegAngle(::google::protobuf::internal::ConstantInitialized);

  inline LegAngle(const LegAngle& from)
      : LegAngle(nullptr, from) {}
  LegAngle(LegAngle&& from) noexcept
    : LegAngle() {
    *this = ::std::move(from);
  }

  inline LegAngle& operator=(const LegAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline LegAngle& operator=(LegAngle&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LegAngle& default_instance() {
    return *internal_default_instance();
  }
  static inline const LegAngle* internal_default_instance() {
    return reinterpret_cast<const LegAngle*>(
               &_LegAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LegAngle& a, LegAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(LegAngle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LegAngle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LegAngle* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LegAngle>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LegAngle& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LegAngle& from) {
    LegAngle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LegAngle* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "motor_msg.LegAngle";
  }
  protected:
  explicit LegAngle(::google::protobuf::Arena* arena);
  LegAngle(::google::protobuf::Arena* arena, const LegAngle& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThetaFieldNumber = 1,
    kBetaFieldNumber = 2,
  };
  // float theta = 1;
  void clear_theta() ;
  float theta() const;
  void set_theta(float value);

  private:
  float _internal_theta() const;
  void _internal_set_theta(float value);

  public:
  // float beta = 2;
  void clear_beta() ;
  float beta() const;
  void set_beta(float value);

  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);

  public:
  // @@protoc_insertion_point(class_scope:motor_msg.LegAngle)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    float theta_;
    float beta_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_motor_2eproto;
};// -------------------------------------------------------------------

class MotorStamped final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:motor_msg.MotorStamped) */ {
 public:
  inline MotorStamped() : MotorStamped(nullptr) {}
  ~MotorStamped() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MotorStamped(::google::protobuf::internal::ConstantInitialized);

  inline MotorStamped(const MotorStamped& from)
      : MotorStamped(nullptr, from) {}
  MotorStamped(MotorStamped&& from) noexcept
    : MotorStamped() {
    *this = ::std::move(from);
  }

  inline MotorStamped& operator=(const MotorStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotorStamped& operator=(MotorStamped&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotorStamped& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotorStamped* internal_default_instance() {
    return reinterpret_cast<const MotorStamped*>(
               &_MotorStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MotorStamped& a, MotorStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(MotorStamped* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotorStamped* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotorStamped* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotorStamped>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MotorStamped& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MotorStamped& from) {
    MotorStamped::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MotorStamped* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "motor_msg.MotorStamped";
  }
  protected:
  explicit MotorStamped(::google::protobuf::Arena* arena);
  MotorStamped(::google::protobuf::Arena* arena, const MotorStamped& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotorsFieldNumber = 2,
    kLegsFieldNumber = 3,
    kHeaderFieldNumber = 1,
  };
  // repeated .motor_msg.Motor motors = 2;
  int motors_size() const;
  private:
  int _internal_motors_size() const;

  public:
  void clear_motors() ;
  ::motor_msg::Motor* mutable_motors(int index);
  ::google::protobuf::RepeatedPtrField< ::motor_msg::Motor >*
      mutable_motors();
  private:
  const ::google::protobuf::RepeatedPtrField<::motor_msg::Motor>& _internal_motors() const;
  ::google::protobuf::RepeatedPtrField<::motor_msg::Motor>* _internal_mutable_motors();
  public:
  const ::motor_msg::Motor& motors(int index) const;
  ::motor_msg::Motor* add_motors();
  const ::google::protobuf::RepeatedPtrField< ::motor_msg::Motor >&
      motors() const;
  // repeated .motor_msg.LegAngle legs = 3;
  int legs_size() const;
  private:
  int _internal_legs_size() const;

  public:
  void clear_legs() ;
  ::motor_msg::LegAngle* mutable_legs(int index);
  ::google::protobuf::RepeatedPtrField< ::motor_msg::LegAngle >*
      mutable_legs();
  private:
  const ::google::protobuf::RepeatedPtrField<::motor_msg::LegAngle>& _internal_legs() const;
  ::google::protobuf::RepeatedPtrField<::motor_msg::LegAngle>* _internal_mutable_legs();
  public:
  const ::motor_msg::LegAngle& legs(int index) const;
  ::motor_msg::LegAngle* add_legs();
  const ::google::protobuf::RepeatedPtrField< ::motor_msg::LegAngle >&
      legs() const;
  // .std_msg.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::std_msg::Header& header() const;
  PROTOBUF_NODISCARD ::std_msg::Header* release_header();
  ::std_msg::Header* mutable_header();
  void set_allocated_header(::std_msg::Header* value);
  void unsafe_arena_set_allocated_header(::std_msg::Header* value);
  ::std_msg::Header* unsafe_arena_release_header();

  private:
  const ::std_msg::Header& _internal_header() const;
  ::std_msg::Header* _internal_mutable_header();

  public:
  // @@protoc_insertion_point(class_scope:motor_msg.MotorStamped)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::motor_msg::Motor > motors_;
    ::google::protobuf::RepeatedPtrField< ::motor_msg::LegAngle > legs_;
    ::std_msg::Header* header_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_motor_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Motor

// float angle = 1;
inline void Motor::clear_angle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.angle_ = 0;
}
inline float Motor::angle() const {
  // @@protoc_insertion_point(field_get:motor_msg.Motor.angle)
  return _internal_angle();
}
inline void Motor::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:motor_msg.Motor.angle)
}
inline float Motor::_internal_angle() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.angle_;
}
inline void Motor::_internal_set_angle(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.angle_ = value;
}

// float twist = 2;
inline void Motor::clear_twist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.twist_ = 0;
}
inline float Motor::twist() const {
  // @@protoc_insertion_point(field_get:motor_msg.Motor.twist)
  return _internal_twist();
}
inline void Motor::set_twist(float value) {
  _internal_set_twist(value);
  // @@protoc_insertion_point(field_set:motor_msg.Motor.twist)
}
inline float Motor::_internal_twist() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.twist_;
}
inline void Motor::_internal_set_twist(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.twist_ = value;
}

// float torque = 3;
inline void Motor::clear_torque() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.torque_ = 0;
}
inline float Motor::torque() const {
  // @@protoc_insertion_point(field_get:motor_msg.Motor.torque)
  return _internal_torque();
}
inline void Motor::set_torque(float value) {
  _internal_set_torque(value);
  // @@protoc_insertion_point(field_set:motor_msg.Motor.torque)
}
inline float Motor::_internal_torque() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.torque_;
}
inline void Motor::_internal_set_torque(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.torque_ = value;
}

// float kp = 4;
inline void Motor::clear_kp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.kp_ = 0;
}
inline float Motor::kp() const {
  // @@protoc_insertion_point(field_get:motor_msg.Motor.kp)
  return _internal_kp();
}
inline void Motor::set_kp(float value) {
  _internal_set_kp(value);
  // @@protoc_insertion_point(field_set:motor_msg.Motor.kp)
}
inline float Motor::_internal_kp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kp_;
}
inline void Motor::_internal_set_kp(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.kp_ = value;
}

// float ki = 5;
inline void Motor::clear_ki() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ki_ = 0;
}
inline float Motor::ki() const {
  // @@protoc_insertion_point(field_get:motor_msg.Motor.ki)
  return _internal_ki();
}
inline void Motor::set_ki(float value) {
  _internal_set_ki(value);
  // @@protoc_insertion_point(field_set:motor_msg.Motor.ki)
}
inline float Motor::_internal_ki() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ki_;
}
inline void Motor::_internal_set_ki(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ki_ = value;
}

// float kd = 6;
inline void Motor::clear_kd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.kd_ = 0;
}
inline float Motor::kd() const {
  // @@protoc_insertion_point(field_get:motor_msg.Motor.kd)
  return _internal_kd();
}
inline void Motor::set_kd(float value) {
  _internal_set_kd(value);
  // @@protoc_insertion_point(field_set:motor_msg.Motor.kd)
}
inline float Motor::_internal_kd() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kd_;
}
inline void Motor::_internal_set_kd(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.kd_ = value;
}

// -------------------------------------------------------------------

// LegAngle

// float theta = 1;
inline void LegAngle::clear_theta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.theta_ = 0;
}
inline float LegAngle::theta() const {
  // @@protoc_insertion_point(field_get:motor_msg.LegAngle.theta)
  return _internal_theta();
}
inline void LegAngle::set_theta(float value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:motor_msg.LegAngle.theta)
}
inline float LegAngle::_internal_theta() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.theta_;
}
inline void LegAngle::_internal_set_theta(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.theta_ = value;
}

// float beta = 2;
inline void LegAngle::clear_beta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.beta_ = 0;
}
inline float LegAngle::beta() const {
  // @@protoc_insertion_point(field_get:motor_msg.LegAngle.beta)
  return _internal_beta();
}
inline void LegAngle::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:motor_msg.LegAngle.beta)
}
inline float LegAngle::_internal_beta() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.beta_;
}
inline void LegAngle::_internal_set_beta(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.beta_ = value;
}

// -------------------------------------------------------------------

// MotorStamped

// .std_msg.Header header = 1;
inline bool MotorStamped::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::std_msg::Header& MotorStamped::_internal_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::std_msg::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::std_msg::Header&>(::std_msg::_Header_default_instance_);
}
inline const ::std_msg::Header& MotorStamped::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:motor_msg.MotorStamped.header)
  return _internal_header();
}
inline void MotorStamped::unsafe_arena_set_allocated_header(::std_msg::Header* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::std_msg::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:motor_msg.MotorStamped.header)
}
inline ::std_msg::Header* MotorStamped::release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::std_msg::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::std_msg::Header* MotorStamped::unsafe_arena_release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:motor_msg.MotorStamped.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::std_msg::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::std_msg::Header* MotorStamped::_internal_mutable_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::std_msg::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::std_msg::Header*>(p);
  }
  return _impl_.header_;
}
inline ::std_msg::Header* MotorStamped::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std_msg::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:motor_msg.MotorStamped.header)
  return _msg;
}
inline void MotorStamped::set_allocated_header(::std_msg::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::std_msg::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:motor_msg.MotorStamped.header)
}

// repeated .motor_msg.Motor motors = 2;
inline int MotorStamped::_internal_motors_size() const {
  return _internal_motors().size();
}
inline int MotorStamped::motors_size() const {
  return _internal_motors_size();
}
inline void MotorStamped::clear_motors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.motors_.Clear();
}
inline ::motor_msg::Motor* MotorStamped::mutable_motors(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:motor_msg.MotorStamped.motors)
  return _internal_mutable_motors()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::motor_msg::Motor>* MotorStamped::mutable_motors()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:motor_msg.MotorStamped.motors)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_motors();
}
inline const ::motor_msg::Motor& MotorStamped::motors(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:motor_msg.MotorStamped.motors)
  return _internal_motors().Get(index);
}
inline ::motor_msg::Motor* MotorStamped::add_motors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::motor_msg::Motor* _add = _internal_mutable_motors()->Add();
  // @@protoc_insertion_point(field_add:motor_msg.MotorStamped.motors)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::motor_msg::Motor>& MotorStamped::motors() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:motor_msg.MotorStamped.motors)
  return _internal_motors();
}
inline const ::google::protobuf::RepeatedPtrField<::motor_msg::Motor>&
MotorStamped::_internal_motors() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.motors_;
}
inline ::google::protobuf::RepeatedPtrField<::motor_msg::Motor>*
MotorStamped::_internal_mutable_motors() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.motors_;
}

// repeated .motor_msg.LegAngle legs = 3;
inline int MotorStamped::_internal_legs_size() const {
  return _internal_legs().size();
}
inline int MotorStamped::legs_size() const {
  return _internal_legs_size();
}
inline void MotorStamped::clear_legs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.legs_.Clear();
}
inline ::motor_msg::LegAngle* MotorStamped::mutable_legs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:motor_msg.MotorStamped.legs)
  return _internal_mutable_legs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::motor_msg::LegAngle>* MotorStamped::mutable_legs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:motor_msg.MotorStamped.legs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_legs();
}
inline const ::motor_msg::LegAngle& MotorStamped::legs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:motor_msg.MotorStamped.legs)
  return _internal_legs().Get(index);
}
inline ::motor_msg::LegAngle* MotorStamped::add_legs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::motor_msg::LegAngle* _add = _internal_mutable_legs()->Add();
  // @@protoc_insertion_point(field_add:motor_msg.MotorStamped.legs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::motor_msg::LegAngle>& MotorStamped::legs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:motor_msg.MotorStamped.legs)
  return _internal_legs();
}
inline const ::google::protobuf::RepeatedPtrField<::motor_msg::LegAngle>&
MotorStamped::_internal_legs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.legs_;
}
inline ::google::protobuf::RepeatedPtrField<::motor_msg::LegAngle>*
MotorStamped::_internal_mutable_legs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.legs_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace motor_msg


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_motor_2eproto_2epb_2eh
