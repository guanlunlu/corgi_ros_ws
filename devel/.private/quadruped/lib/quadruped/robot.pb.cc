// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot.proto

#include "robot.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace robot_msg {

inline constexpr GaitRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : zeta_{0},
        stanceheight_{0},
        liftheight_{0},
        steplength_{0},
        type_{static_cast< ::robot_msg::GAIT >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GaitRequest::GaitRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GaitRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GaitRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GaitRequestDefaultTypeInternal() {}
  union {
    GaitRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GaitRequestDefaultTypeInternal _GaitRequest_default_instance_;

inline constexpr GaitReply::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : zeta_{0},
        stanceheight_{0},
        liftheight_{0},
        steplength_{0},
        type_{static_cast< ::robot_msg::GAIT >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GaitReply::GaitReply(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GaitReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GaitReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GaitReplyDefaultTypeInternal() {}
  union {
    GaitReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GaitReplyDefaultTypeInternal _GaitReply_default_instance_;

inline constexpr FootPhase::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : phase_{},
        contact_{},
        zeta_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FootPhase::FootPhase(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FootPhaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FootPhaseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FootPhaseDefaultTypeInternal() {}
  union {
    FootPhase _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FootPhaseDefaultTypeInternal _FootPhase_default_instance_;

inline constexpr State::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        pose_{nullptr},
        twist_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR State::State(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StateDefaultTypeInternal() {}
  union {
    State _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StateDefaultTypeInternal _State_default_instance_;

inline constexpr FootPrint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : pose_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FootPrint::FootPrint(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FootPrintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FootPrintDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FootPrintDefaultTypeInternal() {}
  union {
    FootPrint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FootPrintDefaultTypeInternal _FootPrint_default_instance_;

inline constexpr StateWithCovariance::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        pose_{nullptr},
        twist_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR StateWithCovariance::StateWithCovariance(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StateWithCovarianceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StateWithCovarianceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StateWithCovarianceDefaultTypeInternal() {}
  union {
    StateWithCovariance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StateWithCovarianceDefaultTypeInternal _StateWithCovariance_default_instance_;

inline constexpr StateStamped::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        state_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR StateStamped::StateStamped(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StateStampedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StateStampedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StateStampedDefaultTypeInternal() {}
  union {
    StateStamped _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StateStampedDefaultTypeInternal _StateStamped_default_instance_;

inline constexpr GaitInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        phase_{nullptr},
        position_{nullptr},
        centroid_{nullptr},
        type_{static_cast< ::robot_msg::GAIT >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GaitInfo::GaitInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GaitInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GaitInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GaitInfoDefaultTypeInternal() {}
  union {
    GaitInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GaitInfoDefaultTypeInternal _GaitInfo_default_instance_;

inline constexpr StateStampedWithCovariance::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        state_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR StateStampedWithCovariance::StateStampedWithCovariance(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StateStampedWithCovarianceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StateStampedWithCovarianceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StateStampedWithCovarianceDefaultTypeInternal() {}
  union {
    StateStampedWithCovariance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StateStampedWithCovarianceDefaultTypeInternal _StateStampedWithCovariance_default_instance_;
}  // namespace robot_msg
static ::_pb::Metadata file_level_metadata_robot_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_robot_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_robot_2eproto = nullptr;
const ::uint32_t TableStruct_robot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::robot_msg::FootPrint, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::robot_msg::FootPrint, _impl_.pose_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::robot_msg::FootPhase, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::robot_msg::FootPhase, _impl_.phase_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::FootPhase, _impl_.contact_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::FootPhase, _impl_.zeta_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::GaitInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::GaitInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::robot_msg::GaitInfo, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::GaitInfo, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::GaitInfo, _impl_.phase_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::GaitInfo, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::GaitInfo, _impl_.centroid_),
    0,
    ~0u,
    1,
    2,
    3,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::robot_msg::GaitRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::robot_msg::GaitRequest, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::GaitRequest, _impl_.zeta_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::GaitRequest, _impl_.stanceheight_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::GaitRequest, _impl_.liftheight_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::GaitRequest, _impl_.steplength_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::robot_msg::GaitReply, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::robot_msg::GaitReply, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::GaitReply, _impl_.zeta_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::GaitReply, _impl_.stanceheight_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::GaitReply, _impl_.liftheight_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::GaitReply, _impl_.steplength_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::State, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::State, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::robot_msg::State, _impl_.pose_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::State, _impl_.twist_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::robot_msg::StateStamped, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::StateStamped, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::robot_msg::StateStamped, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::StateStamped, _impl_.state_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::robot_msg::StateWithCovariance, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::StateWithCovariance, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::robot_msg::StateWithCovariance, _impl_.pose_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::StateWithCovariance, _impl_.twist_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::robot_msg::StateStampedWithCovariance, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::StateStampedWithCovariance, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::robot_msg::StateStampedWithCovariance, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::robot_msg::StateStampedWithCovariance, _impl_.state_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::robot_msg::FootPrint)},
        {9, -1, -1, sizeof(::robot_msg::FootPhase)},
        {20, 33, -1, sizeof(::robot_msg::GaitInfo)},
        {38, -1, -1, sizeof(::robot_msg::GaitRequest)},
        {51, -1, -1, sizeof(::robot_msg::GaitReply)},
        {64, 74, -1, sizeof(::robot_msg::State)},
        {76, 86, -1, sizeof(::robot_msg::StateStamped)},
        {88, 98, -1, sizeof(::robot_msg::StateWithCovariance)},
        {100, 110, -1, sizeof(::robot_msg::StateStampedWithCovariance)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::robot_msg::_FootPrint_default_instance_._instance,
    &::robot_msg::_FootPhase_default_instance_._instance,
    &::robot_msg::_GaitInfo_default_instance_._instance,
    &::robot_msg::_GaitRequest_default_instance_._instance,
    &::robot_msg::_GaitReply_default_instance_._instance,
    &::robot_msg::_State_default_instance_._instance,
    &::robot_msg::_StateStamped_default_instance_._instance,
    &::robot_msg::_StateWithCovariance_default_instance_._instance,
    &::robot_msg::_StateStampedWithCovariance_default_instance_._instance,
};
const char descriptor_table_protodef_robot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\013robot.proto\022\trobot_msg\032\016geometry.proto"
    "\032\tstd.proto\"-\n\tFootPrint\022 \n\004pose\030\001 \003(\0132\022"
    ".geometry_msg.Pose\"9\n\tFootPhase\022\r\n\005phase"
    "\030\001 \003(\001\022\017\n\007contact\030\002 \003(\010\022\014\n\004zeta\030\003 \001(\001\"\275\001"
    "\n\010GaitInfo\022\037\n\006header\030\001 \001(\0132\017.std_msg.Hea"
    "der\022\035\n\004type\030\002 \001(\0162\017.robot_msg.GAIT\022#\n\005ph"
    "ase\030\003 \001(\0132\024.robot_msg.FootPhase\022&\n\010posit"
    "ion\030\004 \001(\0132\024.robot_msg.FootPrint\022$\n\010centr"
    "oid\030\005 \001(\0132\022.geometry_msg.Pose\"x\n\013GaitReq"
    "uest\022\035\n\004type\030\001 \001(\0162\017.robot_msg.GAIT\022\014\n\004z"
    "eta\030\002 \001(\001\022\024\n\014stanceheight\030\003 \001(\001\022\022\n\nlifth"
    "eight\030\004 \001(\001\022\022\n\nsteplength\030\005 \001(\001\"v\n\tGaitR"
    "eply\022\035\n\004type\030\006 \001(\0162\017.robot_msg.GAIT\022\014\n\004z"
    "eta\030\007 \001(\001\022\024\n\014stanceheight\030\010 \001(\001\022\022\n\nlifth"
    "eight\030\t \001(\001\022\022\n\nsteplength\030\n \001(\001\"M\n\005State"
    "\022 \n\004pose\030\001 \001(\0132\022.geometry_msg.Pose\022\"\n\005tw"
    "ist\030\002 \001(\0132\023.geometry_msg.Twist\"P\n\014StateS"
    "tamped\022\037\n\006header\030\001 \001(\0132\017.std_msg.Header\022"
    "\037\n\005state\030\002 \001(\0132\020.robot_msg.State\"w\n\023Stat"
    "eWithCovariance\022.\n\004pose\030\001 \001(\0132 .geometry"
    "_msg.PoseWithCovariance\0220\n\005twist\030\002 \001(\0132!"
    ".geometry_msg.TwistWithCovariance\"l\n\032Sta"
    "teStampedWithCovariance\022\037\n\006header\030\001 \001(\0132"
    "\017.std_msg.Header\022-\n\005state\030\002 \001(\0132\036.robot_"
    "msg.StateWithCovariance*@\n\004GAIT\022\010\n\004STOP\020"
    "\000\022\n\n\006STANCE\020\001\022\010\n\004WALK\020\002\022\010\n\004TROT\020\003\022\016\n\nCON"
    "GNITIVE\020\004b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_robot_2eproto_deps[2] =
    {
        &::descriptor_table_geometry_2eproto,
        &::descriptor_table_std_2eproto,
};
static ::absl::once_flag descriptor_table_robot_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_robot_2eproto = {
    false,
    false,
    1057,
    descriptor_table_protodef_robot_2eproto,
    "robot.proto",
    &descriptor_table_robot_2eproto_once,
    descriptor_table_robot_2eproto_deps,
    2,
    9,
    schemas,
    file_default_instances,
    TableStruct_robot_2eproto::offsets,
    file_level_metadata_robot_2eproto,
    file_level_enum_descriptors_robot_2eproto,
    file_level_service_descriptors_robot_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_robot_2eproto_getter() {
  return &descriptor_table_robot_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_robot_2eproto(&descriptor_table_robot_2eproto);
namespace robot_msg {
const ::google::protobuf::EnumDescriptor* GAIT_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_robot_2eproto);
  return file_level_enum_descriptors_robot_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t GAIT_internal_data_[] = {
    327680u, 0u, };
bool GAIT_IsValid(int value) {
  return 0 <= value && value <= 4;
}
// ===================================================================

class FootPrint::_Internal {
 public:
};

void FootPrint::clear_pose() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pose_.Clear();
}
FootPrint::FootPrint(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:robot_msg.FootPrint)
}
inline PROTOBUF_NDEBUG_INLINE FootPrint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : pose_{visibility, arena, from.pose_},
        _cached_size_{0} {}

FootPrint::FootPrint(
    ::google::protobuf::Arena* arena,
    const FootPrint& from)
    : ::google::protobuf::Message(arena) {
  FootPrint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:robot_msg.FootPrint)
}
inline PROTOBUF_NDEBUG_INLINE FootPrint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : pose_{visibility, arena},
        _cached_size_{0} {}

inline void FootPrint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
FootPrint::~FootPrint() {
  // @@protoc_insertion_point(destructor:robot_msg.FootPrint)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FootPrint::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FootPrint::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_msg.FootPrint)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pose_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FootPrint::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> FootPrint::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FootPrint_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .geometry_msg.Pose pose = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FootPrint, _impl_.pose_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .geometry_msg.Pose pose = 1;
    {PROTOBUF_FIELD_OFFSET(FootPrint, _impl_.pose_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::geometry_msg::Pose>()},
  }}, {{
  }},
};

::uint8_t* FootPrint::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_msg.FootPrint)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .geometry_msg.Pose pose = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pose_size()); i < n; i++) {
    const auto& repfield = this->_internal_pose().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_msg.FootPrint)
  return target;
}

::size_t FootPrint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_msg.FootPrint)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .geometry_msg.Pose pose = 1;
  total_size += 1UL * this->_internal_pose_size();
  for (const auto& msg : this->_internal_pose()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FootPrint::_class_data_ = {
    FootPrint::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FootPrint::GetClassData() const {
  return &_class_data_;
}

void FootPrint::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FootPrint*>(&to_msg);
  auto& from = static_cast<const FootPrint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot_msg.FootPrint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_pose()->MergeFrom(
      from._internal_pose());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FootPrint::CopyFrom(const FootPrint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_msg.FootPrint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FootPrint::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FootPrint::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FootPrint::InternalSwap(FootPrint* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pose_.InternalSwap(&other->_impl_.pose_);
}

::google::protobuf::Metadata FootPrint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_2eproto_getter, &descriptor_table_robot_2eproto_once,
      file_level_metadata_robot_2eproto[0]);
}
// ===================================================================

class FootPhase::_Internal {
 public:
};

FootPhase::FootPhase(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:robot_msg.FootPhase)
}
inline PROTOBUF_NDEBUG_INLINE FootPhase::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : phase_{visibility, arena, from.phase_},
        contact_{visibility, arena, from.contact_},
        _cached_size_{0} {}

FootPhase::FootPhase(
    ::google::protobuf::Arena* arena,
    const FootPhase& from)
    : ::google::protobuf::Message(arena) {
  FootPhase* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.zeta_ = from._impl_.zeta_;

  // @@protoc_insertion_point(copy_constructor:robot_msg.FootPhase)
}
inline PROTOBUF_NDEBUG_INLINE FootPhase::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : phase_{visibility, arena},
        contact_{visibility, arena},
        _cached_size_{0} {}

inline void FootPhase::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.zeta_ = {};
}
FootPhase::~FootPhase() {
  // @@protoc_insertion_point(destructor:robot_msg.FootPhase)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FootPhase::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FootPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_msg.FootPhase)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.phase_.Clear();
  _impl_.contact_.Clear();
  _impl_.zeta_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FootPhase::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> FootPhase::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FootPhase_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated double phase = 1;
    {::_pbi::TcParser::FastF64P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FootPhase, _impl_.phase_)}},
    // repeated bool contact = 2;
    {::_pbi::TcParser::FastV8P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FootPhase, _impl_.contact_)}},
    // double zeta = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(FootPhase, _impl_.zeta_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated double phase = 1;
    {PROTOBUF_FIELD_OFFSET(FootPhase, _impl_.phase_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated bool contact = 2;
    {PROTOBUF_FIELD_OFFSET(FootPhase, _impl_.contact_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedBool)},
    // double zeta = 3;
    {PROTOBUF_FIELD_OFFSET(FootPhase, _impl_.zeta_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* FootPhase::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_msg.FootPhase)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated double phase = 1;
  if (this->_internal_phase_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_phase(), target);
  }

  // repeated bool contact = 2;
  if (this->_internal_contact_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_contact(), target);
  }

  // double zeta = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_zeta = this->_internal_zeta();
  ::uint64_t raw_zeta;
  memcpy(&raw_zeta, &tmp_zeta, sizeof(tmp_zeta));
  if (raw_zeta != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_zeta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_msg.FootPhase)
  return target;
}

::size_t FootPhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_msg.FootPhase)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double phase = 1;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_phase_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated bool contact = 2;
  {
    std::size_t data_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_contact_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // double zeta = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_zeta = this->_internal_zeta();
  ::uint64_t raw_zeta;
  memcpy(&raw_zeta, &tmp_zeta, sizeof(tmp_zeta));
  if (raw_zeta != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FootPhase::_class_data_ = {
    FootPhase::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FootPhase::GetClassData() const {
  return &_class_data_;
}

void FootPhase::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FootPhase*>(&to_msg);
  auto& from = static_cast<const FootPhase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot_msg.FootPhase)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_phase()->MergeFrom(from._internal_phase());
  _this->_internal_mutable_contact()->MergeFrom(from._internal_contact());
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_zeta = from._internal_zeta();
  ::uint64_t raw_zeta;
  memcpy(&raw_zeta, &tmp_zeta, sizeof(tmp_zeta));
  if (raw_zeta != 0) {
    _this->_internal_set_zeta(from._internal_zeta());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FootPhase::CopyFrom(const FootPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_msg.FootPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FootPhase::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FootPhase::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FootPhase::InternalSwap(FootPhase* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.phase_.InternalSwap(&other->_impl_.phase_);
  _impl_.contact_.InternalSwap(&other->_impl_.contact_);
        swap(_impl_.zeta_, other->_impl_.zeta_);
}

::google::protobuf::Metadata FootPhase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_2eproto_getter, &descriptor_table_robot_2eproto_once,
      file_level_metadata_robot_2eproto[1]);
}
// ===================================================================

class GaitInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GaitInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GaitInfo, _impl_._has_bits_);
  static const ::std_msg::Header& header(const GaitInfo* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::robot_msg::FootPhase& phase(const GaitInfo* msg);
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::robot_msg::FootPrint& position(const GaitInfo* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::geometry_msg::Pose& centroid(const GaitInfo* msg);
  static void set_has_centroid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::std_msg::Header& GaitInfo::_Internal::header(const GaitInfo* msg) {
  return *msg->_impl_.header_;
}
const ::robot_msg::FootPhase& GaitInfo::_Internal::phase(const GaitInfo* msg) {
  return *msg->_impl_.phase_;
}
const ::robot_msg::FootPrint& GaitInfo::_Internal::position(const GaitInfo* msg) {
  return *msg->_impl_.position_;
}
const ::geometry_msg::Pose& GaitInfo::_Internal::centroid(const GaitInfo* msg) {
  return *msg->_impl_.centroid_;
}
void GaitInfo::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GaitInfo::clear_centroid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.centroid_ != nullptr) _impl_.centroid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
GaitInfo::GaitInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:robot_msg.GaitInfo)
}
inline PROTOBUF_NDEBUG_INLINE GaitInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GaitInfo::GaitInfo(
    ::google::protobuf::Arena* arena,
    const GaitInfo& from)
    : ::google::protobuf::Message(arena) {
  GaitInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::std_msg::Header>(arena, *from._impl_.header_)
                : nullptr;
  _impl_.phase_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::robot_msg::FootPhase>(arena, *from._impl_.phase_)
                : nullptr;
  _impl_.position_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::robot_msg::FootPrint>(arena, *from._impl_.position_)
                : nullptr;
  _impl_.centroid_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::geometry_msg::Pose>(arena, *from._impl_.centroid_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:robot_msg.GaitInfo)
}
inline PROTOBUF_NDEBUG_INLINE GaitInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GaitInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::type_));
}
GaitInfo::~GaitInfo() {
  // @@protoc_insertion_point(destructor:robot_msg.GaitInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GaitInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  delete _impl_.phase_;
  delete _impl_.position_;
  delete _impl_.centroid_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GaitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_msg.GaitInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.phase_ != nullptr);
      _impl_.phase_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.centroid_ != nullptr);
      _impl_.centroid_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GaitInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 4, 0, 2> GaitInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GaitInfo, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GaitInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .std_msg.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GaitInfo, _impl_.header_)}},
    // .robot_msg.GAIT type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GaitInfo, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GaitInfo, _impl_.type_)}},
    // .robot_msg.FootPhase phase = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(GaitInfo, _impl_.phase_)}},
    // .robot_msg.FootPrint position = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(GaitInfo, _impl_.position_)}},
    // .geometry_msg.Pose centroid = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 3, 3, PROTOBUF_FIELD_OFFSET(GaitInfo, _impl_.centroid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .std_msg.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(GaitInfo, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .robot_msg.GAIT type = 2;
    {PROTOBUF_FIELD_OFFSET(GaitInfo, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .robot_msg.FootPhase phase = 3;
    {PROTOBUF_FIELD_OFFSET(GaitInfo, _impl_.phase_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .robot_msg.FootPrint position = 4;
    {PROTOBUF_FIELD_OFFSET(GaitInfo, _impl_.position_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .geometry_msg.Pose centroid = 5;
    {PROTOBUF_FIELD_OFFSET(GaitInfo, _impl_.centroid_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::std_msg::Header>()},
    {::_pbi::TcParser::GetTable<::robot_msg::FootPhase>()},
    {::_pbi::TcParser::GetTable<::robot_msg::FootPrint>()},
    {::_pbi::TcParser::GetTable<::geometry_msg::Pose>()},
  }}, {{
  }},
};

::uint8_t* GaitInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_msg.GaitInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .std_msg.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .robot_msg.GAIT type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  // .robot_msg.FootPhase phase = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::phase(this),
        _Internal::phase(this).GetCachedSize(), target, stream);
  }

  // .robot_msg.FootPrint position = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .geometry_msg.Pose centroid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::centroid(this),
        _Internal::centroid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_msg.GaitInfo)
  return target;
}

::size_t GaitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_msg.GaitInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .std_msg.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }

    // .robot_msg.FootPhase phase = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.phase_);
    }

    // .robot_msg.FootPrint position = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
    }

    // .geometry_msg.Pose centroid = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.centroid_);
    }

  }
  // .robot_msg.GAIT type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GaitInfo::_class_data_ = {
    GaitInfo::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GaitInfo::GetClassData() const {
  return &_class_data_;
}

void GaitInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GaitInfo*>(&to_msg);
  auto& from = static_cast<const GaitInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot_msg.GaitInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::std_msg::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_phase()->::robot_msg::FootPhase::MergeFrom(
          from._internal_phase());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_position()->::robot_msg::FootPrint::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_centroid()->::geometry_msg::Pose::MergeFrom(
          from._internal_centroid());
    }
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GaitInfo::CopyFrom(const GaitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_msg.GaitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GaitInfo::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GaitInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GaitInfo::InternalSwap(GaitInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GaitInfo, _impl_.type_)
      + sizeof(GaitInfo::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(GaitInfo, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata GaitInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_2eproto_getter, &descriptor_table_robot_2eproto_once,
      file_level_metadata_robot_2eproto[2]);
}
// ===================================================================

class GaitRequest::_Internal {
 public:
};

GaitRequest::GaitRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:robot_msg.GaitRequest)
}
GaitRequest::GaitRequest(
    ::google::protobuf::Arena* arena, const GaitRequest& from)
    : GaitRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GaitRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GaitRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, zeta_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, zeta_) +
               sizeof(Impl_::type_));
}
GaitRequest::~GaitRequest() {
  // @@protoc_insertion_point(destructor:robot_msg.GaitRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GaitRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GaitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_msg.GaitRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.zeta_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.zeta_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GaitRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> GaitRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GaitRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .robot_msg.GAIT type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GaitRequest, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GaitRequest, _impl_.type_)}},
    // double zeta = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(GaitRequest, _impl_.zeta_)}},
    // double stanceheight = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(GaitRequest, _impl_.stanceheight_)}},
    // double liftheight = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(GaitRequest, _impl_.liftheight_)}},
    // double steplength = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(GaitRequest, _impl_.steplength_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .robot_msg.GAIT type = 1;
    {PROTOBUF_FIELD_OFFSET(GaitRequest, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // double zeta = 2;
    {PROTOBUF_FIELD_OFFSET(GaitRequest, _impl_.zeta_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double stanceheight = 3;
    {PROTOBUF_FIELD_OFFSET(GaitRequest, _impl_.stanceheight_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double liftheight = 4;
    {PROTOBUF_FIELD_OFFSET(GaitRequest, _impl_.liftheight_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double steplength = 5;
    {PROTOBUF_FIELD_OFFSET(GaitRequest, _impl_.steplength_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* GaitRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_msg.GaitRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .robot_msg.GAIT type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // double zeta = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_zeta = this->_internal_zeta();
  ::uint64_t raw_zeta;
  memcpy(&raw_zeta, &tmp_zeta, sizeof(tmp_zeta));
  if (raw_zeta != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_zeta(), target);
  }

  // double stanceheight = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_stanceheight = this->_internal_stanceheight();
  ::uint64_t raw_stanceheight;
  memcpy(&raw_stanceheight, &tmp_stanceheight, sizeof(tmp_stanceheight));
  if (raw_stanceheight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_stanceheight(), target);
  }

  // double liftheight = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_liftheight = this->_internal_liftheight();
  ::uint64_t raw_liftheight;
  memcpy(&raw_liftheight, &tmp_liftheight, sizeof(tmp_liftheight));
  if (raw_liftheight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_liftheight(), target);
  }

  // double steplength = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_steplength = this->_internal_steplength();
  ::uint64_t raw_steplength;
  memcpy(&raw_steplength, &tmp_steplength, sizeof(tmp_steplength));
  if (raw_steplength != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_steplength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_msg.GaitRequest)
  return target;
}

::size_t GaitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_msg.GaitRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double zeta = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_zeta = this->_internal_zeta();
  ::uint64_t raw_zeta;
  memcpy(&raw_zeta, &tmp_zeta, sizeof(tmp_zeta));
  if (raw_zeta != 0) {
    total_size += 9;
  }

  // double stanceheight = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_stanceheight = this->_internal_stanceheight();
  ::uint64_t raw_stanceheight;
  memcpy(&raw_stanceheight, &tmp_stanceheight, sizeof(tmp_stanceheight));
  if (raw_stanceheight != 0) {
    total_size += 9;
  }

  // double liftheight = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_liftheight = this->_internal_liftheight();
  ::uint64_t raw_liftheight;
  memcpy(&raw_liftheight, &tmp_liftheight, sizeof(tmp_liftheight));
  if (raw_liftheight != 0) {
    total_size += 9;
  }

  // double steplength = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_steplength = this->_internal_steplength();
  ::uint64_t raw_steplength;
  memcpy(&raw_steplength, &tmp_steplength, sizeof(tmp_steplength));
  if (raw_steplength != 0) {
    total_size += 9;
  }

  // .robot_msg.GAIT type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GaitRequest::_class_data_ = {
    GaitRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GaitRequest::GetClassData() const {
  return &_class_data_;
}

void GaitRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GaitRequest*>(&to_msg);
  auto& from = static_cast<const GaitRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot_msg.GaitRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_zeta = from._internal_zeta();
  ::uint64_t raw_zeta;
  memcpy(&raw_zeta, &tmp_zeta, sizeof(tmp_zeta));
  if (raw_zeta != 0) {
    _this->_internal_set_zeta(from._internal_zeta());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_stanceheight = from._internal_stanceheight();
  ::uint64_t raw_stanceheight;
  memcpy(&raw_stanceheight, &tmp_stanceheight, sizeof(tmp_stanceheight));
  if (raw_stanceheight != 0) {
    _this->_internal_set_stanceheight(from._internal_stanceheight());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_liftheight = from._internal_liftheight();
  ::uint64_t raw_liftheight;
  memcpy(&raw_liftheight, &tmp_liftheight, sizeof(tmp_liftheight));
  if (raw_liftheight != 0) {
    _this->_internal_set_liftheight(from._internal_liftheight());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_steplength = from._internal_steplength();
  ::uint64_t raw_steplength;
  memcpy(&raw_steplength, &tmp_steplength, sizeof(tmp_steplength));
  if (raw_steplength != 0) {
    _this->_internal_set_steplength(from._internal_steplength());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GaitRequest::CopyFrom(const GaitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_msg.GaitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GaitRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GaitRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GaitRequest::InternalSwap(GaitRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GaitRequest, _impl_.type_)
      + sizeof(GaitRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(GaitRequest, _impl_.zeta_)>(
          reinterpret_cast<char*>(&_impl_.zeta_),
          reinterpret_cast<char*>(&other->_impl_.zeta_));
}

::google::protobuf::Metadata GaitRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_2eproto_getter, &descriptor_table_robot_2eproto_once,
      file_level_metadata_robot_2eproto[3]);
}
// ===================================================================

class GaitReply::_Internal {
 public:
};

GaitReply::GaitReply(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:robot_msg.GaitReply)
}
GaitReply::GaitReply(
    ::google::protobuf::Arena* arena, const GaitReply& from)
    : GaitReply(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GaitReply::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GaitReply::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, zeta_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, zeta_) +
               sizeof(Impl_::type_));
}
GaitReply::~GaitReply() {
  // @@protoc_insertion_point(destructor:robot_msg.GaitReply)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GaitReply::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GaitReply::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_msg.GaitReply)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.zeta_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.zeta_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GaitReply::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> GaitReply::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966303,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GaitReply_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double stanceheight = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(GaitReply, _impl_.stanceheight_)}},
    // double liftheight = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 63, 0, PROTOBUF_FIELD_OFFSET(GaitReply, _impl_.liftheight_)}},
    // double steplength = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 63, 0, PROTOBUF_FIELD_OFFSET(GaitReply, _impl_.steplength_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .robot_msg.GAIT type = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GaitReply, _impl_.type_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(GaitReply, _impl_.type_)}},
    // double zeta = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(GaitReply, _impl_.zeta_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .robot_msg.GAIT type = 6;
    {PROTOBUF_FIELD_OFFSET(GaitReply, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // double zeta = 7;
    {PROTOBUF_FIELD_OFFSET(GaitReply, _impl_.zeta_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double stanceheight = 8;
    {PROTOBUF_FIELD_OFFSET(GaitReply, _impl_.stanceheight_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double liftheight = 9;
    {PROTOBUF_FIELD_OFFSET(GaitReply, _impl_.liftheight_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double steplength = 10;
    {PROTOBUF_FIELD_OFFSET(GaitReply, _impl_.steplength_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* GaitReply::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_msg.GaitReply)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .robot_msg.GAIT type = 6;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_type(), target);
  }

  // double zeta = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_zeta = this->_internal_zeta();
  ::uint64_t raw_zeta;
  memcpy(&raw_zeta, &tmp_zeta, sizeof(tmp_zeta));
  if (raw_zeta != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_zeta(), target);
  }

  // double stanceheight = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_stanceheight = this->_internal_stanceheight();
  ::uint64_t raw_stanceheight;
  memcpy(&raw_stanceheight, &tmp_stanceheight, sizeof(tmp_stanceheight));
  if (raw_stanceheight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_stanceheight(), target);
  }

  // double liftheight = 9;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_liftheight = this->_internal_liftheight();
  ::uint64_t raw_liftheight;
  memcpy(&raw_liftheight, &tmp_liftheight, sizeof(tmp_liftheight));
  if (raw_liftheight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_liftheight(), target);
  }

  // double steplength = 10;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_steplength = this->_internal_steplength();
  ::uint64_t raw_steplength;
  memcpy(&raw_steplength, &tmp_steplength, sizeof(tmp_steplength));
  if (raw_steplength != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        10, this->_internal_steplength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_msg.GaitReply)
  return target;
}

::size_t GaitReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_msg.GaitReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double zeta = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_zeta = this->_internal_zeta();
  ::uint64_t raw_zeta;
  memcpy(&raw_zeta, &tmp_zeta, sizeof(tmp_zeta));
  if (raw_zeta != 0) {
    total_size += 9;
  }

  // double stanceheight = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_stanceheight = this->_internal_stanceheight();
  ::uint64_t raw_stanceheight;
  memcpy(&raw_stanceheight, &tmp_stanceheight, sizeof(tmp_stanceheight));
  if (raw_stanceheight != 0) {
    total_size += 9;
  }

  // double liftheight = 9;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_liftheight = this->_internal_liftheight();
  ::uint64_t raw_liftheight;
  memcpy(&raw_liftheight, &tmp_liftheight, sizeof(tmp_liftheight));
  if (raw_liftheight != 0) {
    total_size += 9;
  }

  // double steplength = 10;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_steplength = this->_internal_steplength();
  ::uint64_t raw_steplength;
  memcpy(&raw_steplength, &tmp_steplength, sizeof(tmp_steplength));
  if (raw_steplength != 0) {
    total_size += 9;
  }

  // .robot_msg.GAIT type = 6;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GaitReply::_class_data_ = {
    GaitReply::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GaitReply::GetClassData() const {
  return &_class_data_;
}

void GaitReply::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GaitReply*>(&to_msg);
  auto& from = static_cast<const GaitReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot_msg.GaitReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_zeta = from._internal_zeta();
  ::uint64_t raw_zeta;
  memcpy(&raw_zeta, &tmp_zeta, sizeof(tmp_zeta));
  if (raw_zeta != 0) {
    _this->_internal_set_zeta(from._internal_zeta());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_stanceheight = from._internal_stanceheight();
  ::uint64_t raw_stanceheight;
  memcpy(&raw_stanceheight, &tmp_stanceheight, sizeof(tmp_stanceheight));
  if (raw_stanceheight != 0) {
    _this->_internal_set_stanceheight(from._internal_stanceheight());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_liftheight = from._internal_liftheight();
  ::uint64_t raw_liftheight;
  memcpy(&raw_liftheight, &tmp_liftheight, sizeof(tmp_liftheight));
  if (raw_liftheight != 0) {
    _this->_internal_set_liftheight(from._internal_liftheight());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_steplength = from._internal_steplength();
  ::uint64_t raw_steplength;
  memcpy(&raw_steplength, &tmp_steplength, sizeof(tmp_steplength));
  if (raw_steplength != 0) {
    _this->_internal_set_steplength(from._internal_steplength());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GaitReply::CopyFrom(const GaitReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_msg.GaitReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GaitReply::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GaitReply::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GaitReply::InternalSwap(GaitReply* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GaitReply, _impl_.type_)
      + sizeof(GaitReply::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(GaitReply, _impl_.zeta_)>(
          reinterpret_cast<char*>(&_impl_.zeta_),
          reinterpret_cast<char*>(&other->_impl_.zeta_));
}

::google::protobuf::Metadata GaitReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_2eproto_getter, &descriptor_table_robot_2eproto_once,
      file_level_metadata_robot_2eproto[4]);
}
// ===================================================================

class State::_Internal {
 public:
  using HasBits = decltype(std::declval<State>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(State, _impl_._has_bits_);
  static const ::geometry_msg::Pose& pose(const State* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::geometry_msg::Twist& twist(const State* msg);
  static void set_has_twist(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::geometry_msg::Pose& State::_Internal::pose(const State* msg) {
  return *msg->_impl_.pose_;
}
const ::geometry_msg::Twist& State::_Internal::twist(const State* msg) {
  return *msg->_impl_.twist_;
}
void State::clear_pose() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.pose_ != nullptr) _impl_.pose_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void State::clear_twist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.twist_ != nullptr) _impl_.twist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
State::State(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:robot_msg.State)
}
inline PROTOBUF_NDEBUG_INLINE State::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

State::State(
    ::google::protobuf::Arena* arena,
    const State& from)
    : ::google::protobuf::Message(arena) {
  State* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pose_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::geometry_msg::Pose>(arena, *from._impl_.pose_)
                : nullptr;
  _impl_.twist_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::geometry_msg::Twist>(arena, *from._impl_.twist_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:robot_msg.State)
}
inline PROTOBUF_NDEBUG_INLINE State::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void State::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pose_),
           0,
           offsetof(Impl_, twist_) -
               offsetof(Impl_, pose_) +
               sizeof(Impl_::twist_));
}
State::~State() {
  // @@protoc_insertion_point(destructor:robot_msg.State)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void State::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.pose_;
  delete _impl_.twist_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void State::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_msg.State)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.pose_ != nullptr);
      _impl_.pose_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.twist_ != nullptr);
      _impl_.twist_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* State::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> State::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(State, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_State_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .geometry_msg.Twist twist = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(State, _impl_.twist_)}},
    // .geometry_msg.Pose pose = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(State, _impl_.pose_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .geometry_msg.Pose pose = 1;
    {PROTOBUF_FIELD_OFFSET(State, _impl_.pose_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .geometry_msg.Twist twist = 2;
    {PROTOBUF_FIELD_OFFSET(State, _impl_.twist_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::geometry_msg::Pose>()},
    {::_pbi::TcParser::GetTable<::geometry_msg::Twist>()},
  }}, {{
  }},
};

::uint8_t* State::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_msg.State)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .geometry_msg.Pose pose = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // .geometry_msg.Twist twist = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::twist(this),
        _Internal::twist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_msg.State)
  return target;
}

::size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_msg.State)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .geometry_msg.Pose pose = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pose_);
    }

    // .geometry_msg.Twist twist = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.twist_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData State::_class_data_ = {
    State::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* State::GetClassData() const {
  return &_class_data_;
}

void State::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<State*>(&to_msg);
  auto& from = static_cast<const State&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot_msg.State)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pose()->::geometry_msg::Pose::MergeFrom(
          from._internal_pose());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_twist()->::geometry_msg::Twist::MergeFrom(
          from._internal_twist());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_msg.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool State::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* State::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void State::InternalSwap(State* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(State, _impl_.twist_)
      + sizeof(State::_impl_.twist_)
      - PROTOBUF_FIELD_OFFSET(State, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::google::protobuf::Metadata State::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_2eproto_getter, &descriptor_table_robot_2eproto_once,
      file_level_metadata_robot_2eproto[5]);
}
// ===================================================================

class StateStamped::_Internal {
 public:
  using HasBits = decltype(std::declval<StateStamped>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StateStamped, _impl_._has_bits_);
  static const ::std_msg::Header& header(const StateStamped* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::robot_msg::State& state(const StateStamped* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::std_msg::Header& StateStamped::_Internal::header(const StateStamped* msg) {
  return *msg->_impl_.header_;
}
const ::robot_msg::State& StateStamped::_Internal::state(const StateStamped* msg) {
  return *msg->_impl_.state_;
}
void StateStamped::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
StateStamped::StateStamped(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:robot_msg.StateStamped)
}
inline PROTOBUF_NDEBUG_INLINE StateStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

StateStamped::StateStamped(
    ::google::protobuf::Arena* arena,
    const StateStamped& from)
    : ::google::protobuf::Message(arena) {
  StateStamped* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::std_msg::Header>(arena, *from._impl_.header_)
                : nullptr;
  _impl_.state_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::robot_msg::State>(arena, *from._impl_.state_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:robot_msg.StateStamped)
}
inline PROTOBUF_NDEBUG_INLINE StateStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void StateStamped::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, state_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::state_));
}
StateStamped::~StateStamped() {
  // @@protoc_insertion_point(destructor:robot_msg.StateStamped)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StateStamped::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  delete _impl_.state_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StateStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_msg.StateStamped)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.state_ != nullptr);
      _impl_.state_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StateStamped::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> StateStamped::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StateStamped, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StateStamped_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .robot_msg.State state = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(StateStamped, _impl_.state_)}},
    // .std_msg.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StateStamped, _impl_.header_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .std_msg.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(StateStamped, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .robot_msg.State state = 2;
    {PROTOBUF_FIELD_OFFSET(StateStamped, _impl_.state_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::std_msg::Header>()},
    {::_pbi::TcParser::GetTable<::robot_msg::State>()},
  }}, {{
  }},
};

::uint8_t* StateStamped::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_msg.StateStamped)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .std_msg.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .robot_msg.State state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_msg.StateStamped)
  return target;
}

::size_t StateStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_msg.StateStamped)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .std_msg.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }

    // .robot_msg.State state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.state_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StateStamped::_class_data_ = {
    StateStamped::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StateStamped::GetClassData() const {
  return &_class_data_;
}

void StateStamped::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StateStamped*>(&to_msg);
  auto& from = static_cast<const StateStamped&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot_msg.StateStamped)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::std_msg::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_state()->::robot_msg::State::MergeFrom(
          from._internal_state());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StateStamped::CopyFrom(const StateStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_msg.StateStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StateStamped::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StateStamped::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StateStamped::InternalSwap(StateStamped* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StateStamped, _impl_.state_)
      + sizeof(StateStamped::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(StateStamped, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata StateStamped::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_2eproto_getter, &descriptor_table_robot_2eproto_once,
      file_level_metadata_robot_2eproto[6]);
}
// ===================================================================

class StateWithCovariance::_Internal {
 public:
  using HasBits = decltype(std::declval<StateWithCovariance>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StateWithCovariance, _impl_._has_bits_);
  static const ::geometry_msg::PoseWithCovariance& pose(const StateWithCovariance* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::geometry_msg::TwistWithCovariance& twist(const StateWithCovariance* msg);
  static void set_has_twist(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::geometry_msg::PoseWithCovariance& StateWithCovariance::_Internal::pose(const StateWithCovariance* msg) {
  return *msg->_impl_.pose_;
}
const ::geometry_msg::TwistWithCovariance& StateWithCovariance::_Internal::twist(const StateWithCovariance* msg) {
  return *msg->_impl_.twist_;
}
void StateWithCovariance::clear_pose() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.pose_ != nullptr) _impl_.pose_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void StateWithCovariance::clear_twist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.twist_ != nullptr) _impl_.twist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
StateWithCovariance::StateWithCovariance(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:robot_msg.StateWithCovariance)
}
inline PROTOBUF_NDEBUG_INLINE StateWithCovariance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

StateWithCovariance::StateWithCovariance(
    ::google::protobuf::Arena* arena,
    const StateWithCovariance& from)
    : ::google::protobuf::Message(arena) {
  StateWithCovariance* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pose_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::geometry_msg::PoseWithCovariance>(arena, *from._impl_.pose_)
                : nullptr;
  _impl_.twist_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::geometry_msg::TwistWithCovariance>(arena, *from._impl_.twist_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:robot_msg.StateWithCovariance)
}
inline PROTOBUF_NDEBUG_INLINE StateWithCovariance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void StateWithCovariance::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pose_),
           0,
           offsetof(Impl_, twist_) -
               offsetof(Impl_, pose_) +
               sizeof(Impl_::twist_));
}
StateWithCovariance::~StateWithCovariance() {
  // @@protoc_insertion_point(destructor:robot_msg.StateWithCovariance)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StateWithCovariance::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.pose_;
  delete _impl_.twist_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StateWithCovariance::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_msg.StateWithCovariance)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.pose_ != nullptr);
      _impl_.pose_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.twist_ != nullptr);
      _impl_.twist_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StateWithCovariance::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> StateWithCovariance::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StateWithCovariance, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StateWithCovariance_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .geometry_msg.TwistWithCovariance twist = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(StateWithCovariance, _impl_.twist_)}},
    // .geometry_msg.PoseWithCovariance pose = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StateWithCovariance, _impl_.pose_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .geometry_msg.PoseWithCovariance pose = 1;
    {PROTOBUF_FIELD_OFFSET(StateWithCovariance, _impl_.pose_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .geometry_msg.TwistWithCovariance twist = 2;
    {PROTOBUF_FIELD_OFFSET(StateWithCovariance, _impl_.twist_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::geometry_msg::PoseWithCovariance>()},
    {::_pbi::TcParser::GetTable<::geometry_msg::TwistWithCovariance>()},
  }}, {{
  }},
};

::uint8_t* StateWithCovariance::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_msg.StateWithCovariance)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .geometry_msg.PoseWithCovariance pose = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // .geometry_msg.TwistWithCovariance twist = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::twist(this),
        _Internal::twist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_msg.StateWithCovariance)
  return target;
}

::size_t StateWithCovariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_msg.StateWithCovariance)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .geometry_msg.PoseWithCovariance pose = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pose_);
    }

    // .geometry_msg.TwistWithCovariance twist = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.twist_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StateWithCovariance::_class_data_ = {
    StateWithCovariance::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StateWithCovariance::GetClassData() const {
  return &_class_data_;
}

void StateWithCovariance::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StateWithCovariance*>(&to_msg);
  auto& from = static_cast<const StateWithCovariance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot_msg.StateWithCovariance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pose()->::geometry_msg::PoseWithCovariance::MergeFrom(
          from._internal_pose());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_twist()->::geometry_msg::TwistWithCovariance::MergeFrom(
          from._internal_twist());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StateWithCovariance::CopyFrom(const StateWithCovariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_msg.StateWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StateWithCovariance::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StateWithCovariance::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StateWithCovariance::InternalSwap(StateWithCovariance* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StateWithCovariance, _impl_.twist_)
      + sizeof(StateWithCovariance::_impl_.twist_)
      - PROTOBUF_FIELD_OFFSET(StateWithCovariance, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::google::protobuf::Metadata StateWithCovariance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_2eproto_getter, &descriptor_table_robot_2eproto_once,
      file_level_metadata_robot_2eproto[7]);
}
// ===================================================================

class StateStampedWithCovariance::_Internal {
 public:
  using HasBits = decltype(std::declval<StateStampedWithCovariance>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StateStampedWithCovariance, _impl_._has_bits_);
  static const ::std_msg::Header& header(const StateStampedWithCovariance* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::robot_msg::StateWithCovariance& state(const StateStampedWithCovariance* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::std_msg::Header& StateStampedWithCovariance::_Internal::header(const StateStampedWithCovariance* msg) {
  return *msg->_impl_.header_;
}
const ::robot_msg::StateWithCovariance& StateStampedWithCovariance::_Internal::state(const StateStampedWithCovariance* msg) {
  return *msg->_impl_.state_;
}
void StateStampedWithCovariance::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
StateStampedWithCovariance::StateStampedWithCovariance(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:robot_msg.StateStampedWithCovariance)
}
inline PROTOBUF_NDEBUG_INLINE StateStampedWithCovariance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

StateStampedWithCovariance::StateStampedWithCovariance(
    ::google::protobuf::Arena* arena,
    const StateStampedWithCovariance& from)
    : ::google::protobuf::Message(arena) {
  StateStampedWithCovariance* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::std_msg::Header>(arena, *from._impl_.header_)
                : nullptr;
  _impl_.state_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::robot_msg::StateWithCovariance>(arena, *from._impl_.state_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:robot_msg.StateStampedWithCovariance)
}
inline PROTOBUF_NDEBUG_INLINE StateStampedWithCovariance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void StateStampedWithCovariance::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, state_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::state_));
}
StateStampedWithCovariance::~StateStampedWithCovariance() {
  // @@protoc_insertion_point(destructor:robot_msg.StateStampedWithCovariance)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StateStampedWithCovariance::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  delete _impl_.state_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StateStampedWithCovariance::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_msg.StateStampedWithCovariance)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.state_ != nullptr);
      _impl_.state_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StateStampedWithCovariance::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> StateStampedWithCovariance::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StateStampedWithCovariance, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StateStampedWithCovariance_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .robot_msg.StateWithCovariance state = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(StateStampedWithCovariance, _impl_.state_)}},
    // .std_msg.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StateStampedWithCovariance, _impl_.header_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .std_msg.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(StateStampedWithCovariance, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .robot_msg.StateWithCovariance state = 2;
    {PROTOBUF_FIELD_OFFSET(StateStampedWithCovariance, _impl_.state_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::std_msg::Header>()},
    {::_pbi::TcParser::GetTable<::robot_msg::StateWithCovariance>()},
  }}, {{
  }},
};

::uint8_t* StateStampedWithCovariance::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_msg.StateStampedWithCovariance)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .std_msg.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .robot_msg.StateWithCovariance state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_msg.StateStampedWithCovariance)
  return target;
}

::size_t StateStampedWithCovariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_msg.StateStampedWithCovariance)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .std_msg.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }

    // .robot_msg.StateWithCovariance state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.state_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StateStampedWithCovariance::_class_data_ = {
    StateStampedWithCovariance::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StateStampedWithCovariance::GetClassData() const {
  return &_class_data_;
}

void StateStampedWithCovariance::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StateStampedWithCovariance*>(&to_msg);
  auto& from = static_cast<const StateStampedWithCovariance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot_msg.StateStampedWithCovariance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::std_msg::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_state()->::robot_msg::StateWithCovariance::MergeFrom(
          from._internal_state());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StateStampedWithCovariance::CopyFrom(const StateStampedWithCovariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_msg.StateStampedWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StateStampedWithCovariance::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StateStampedWithCovariance::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StateStampedWithCovariance::InternalSwap(StateStampedWithCovariance* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StateStampedWithCovariance, _impl_.state_)
      + sizeof(StateStampedWithCovariance::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(StateStampedWithCovariance, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata StateStampedWithCovariance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_2eproto_getter, &descriptor_table_robot_2eproto_once,
      file_level_metadata_robot_2eproto[8]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace robot_msg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
