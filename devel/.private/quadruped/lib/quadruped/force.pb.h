// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: force.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_force_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_force_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "std.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_force_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_force_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_force_2eproto;
namespace force_msg {
class Impedance;
struct ImpedanceDefaultTypeInternal;
extern ImpedanceDefaultTypeInternal _Impedance_default_instance_;
class LegForce;
struct LegForceDefaultTypeInternal;
extern LegForceDefaultTypeInternal _LegForce_default_instance_;
class LegForceStamped;
struct LegForceStampedDefaultTypeInternal;
extern LegForceStampedDefaultTypeInternal _LegForceStamped_default_instance_;
}  // namespace force_msg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace force_msg {

// ===================================================================


// -------------------------------------------------------------------

class LegForce final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:force_msg.LegForce) */ {
 public:
  inline LegForce() : LegForce(nullptr) {}
  ~LegForce() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LegForce(::google::protobuf::internal::ConstantInitialized);

  inline LegForce(const LegForce& from)
      : LegForce(nullptr, from) {}
  LegForce(LegForce&& from) noexcept
    : LegForce() {
    *this = ::std::move(from);
  }

  inline LegForce& operator=(const LegForce& from) {
    CopyFrom(from);
    return *this;
  }
  inline LegForce& operator=(LegForce&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LegForce& default_instance() {
    return *internal_default_instance();
  }
  static inline const LegForce* internal_default_instance() {
    return reinterpret_cast<const LegForce*>(
               &_LegForce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LegForce& a, LegForce& b) {
    a.Swap(&b);
  }
  inline void Swap(LegForce* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LegForce* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LegForce* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LegForce>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LegForce& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LegForce& from) {
    LegForce::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LegForce* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "force_msg.LegForce";
  }
  protected:
  explicit LegForce(::google::protobuf::Arena* arena);
  LegForce(::google::protobuf::Arena* arena, const LegForce& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseXFieldNumber = 1,
    kPoseYFieldNumber = 2,
    kForceXFieldNumber = 3,
    kForceYFieldNumber = 4,
  };
  // float pose_x = 1;
  void clear_pose_x() ;
  float pose_x() const;
  void set_pose_x(float value);

  private:
  float _internal_pose_x() const;
  void _internal_set_pose_x(float value);

  public:
  // float pose_y = 2;
  void clear_pose_y() ;
  float pose_y() const;
  void set_pose_y(float value);

  private:
  float _internal_pose_y() const;
  void _internal_set_pose_y(float value);

  public:
  // float force_x = 3;
  void clear_force_x() ;
  float force_x() const;
  void set_force_x(float value);

  private:
  float _internal_force_x() const;
  void _internal_set_force_x(float value);

  public:
  // float force_y = 4;
  void clear_force_y() ;
  float force_y() const;
  void set_force_y(float value);

  private:
  float _internal_force_y() const;
  void _internal_set_force_y(float value);

  public:
  // @@protoc_insertion_point(class_scope:force_msg.LegForce)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    float pose_x_;
    float pose_y_;
    float force_x_;
    float force_y_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_force_2eproto;
};// -------------------------------------------------------------------

class Impedance final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:force_msg.Impedance) */ {
 public:
  inline Impedance() : Impedance(nullptr) {}
  ~Impedance() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Impedance(::google::protobuf::internal::ConstantInitialized);

  inline Impedance(const Impedance& from)
      : Impedance(nullptr, from) {}
  Impedance(Impedance&& from) noexcept
    : Impedance() {
    *this = ::std::move(from);
  }

  inline Impedance& operator=(const Impedance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Impedance& operator=(Impedance&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Impedance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Impedance* internal_default_instance() {
    return reinterpret_cast<const Impedance*>(
               &_Impedance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Impedance& a, Impedance& b) {
    a.Swap(&b);
  }
  inline void Swap(Impedance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Impedance* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Impedance* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Impedance>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Impedance& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Impedance& from) {
    Impedance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Impedance* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "force_msg.Impedance";
  }
  protected:
  explicit Impedance(::google::protobuf::Arena* arena);
  Impedance(::google::protobuf::Arena* arena, const Impedance& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMXFieldNumber = 1,
    kMYFieldNumber = 2,
    kK0XFieldNumber = 3,
    kK0YFieldNumber = 4,
    kDXFieldNumber = 5,
    kDYFieldNumber = 6,
    kAdaptiveKpXFieldNumber = 7,
    kAdaptiveKiXFieldNumber = 8,
    kAdaptiveKdXFieldNumber = 9,
    kAdaptiveKpYFieldNumber = 10,
    kAdaptiveKiYFieldNumber = 11,
    kAdaptiveKdYFieldNumber = 12,
  };
  // float M_x = 1;
  void clear_m_x() ;
  float m_x() const;
  void set_m_x(float value);

  private:
  float _internal_m_x() const;
  void _internal_set_m_x(float value);

  public:
  // float M_y = 2;
  void clear_m_y() ;
  float m_y() const;
  void set_m_y(float value);

  private:
  float _internal_m_y() const;
  void _internal_set_m_y(float value);

  public:
  // float K0_x = 3;
  void clear_k0_x() ;
  float k0_x() const;
  void set_k0_x(float value);

  private:
  float _internal_k0_x() const;
  void _internal_set_k0_x(float value);

  public:
  // float K0_y = 4;
  void clear_k0_y() ;
  float k0_y() const;
  void set_k0_y(float value);

  private:
  float _internal_k0_y() const;
  void _internal_set_k0_y(float value);

  public:
  // float D_x = 5;
  void clear_d_x() ;
  float d_x() const;
  void set_d_x(float value);

  private:
  float _internal_d_x() const;
  void _internal_set_d_x(float value);

  public:
  // float D_y = 6;
  void clear_d_y() ;
  float d_y() const;
  void set_d_y(float value);

  private:
  float _internal_d_y() const;
  void _internal_set_d_y(float value);

  public:
  // float adaptive_kp_x = 7;
  void clear_adaptive_kp_x() ;
  float adaptive_kp_x() const;
  void set_adaptive_kp_x(float value);

  private:
  float _internal_adaptive_kp_x() const;
  void _internal_set_adaptive_kp_x(float value);

  public:
  // float adaptive_ki_x = 8;
  void clear_adaptive_ki_x() ;
  float adaptive_ki_x() const;
  void set_adaptive_ki_x(float value);

  private:
  float _internal_adaptive_ki_x() const;
  void _internal_set_adaptive_ki_x(float value);

  public:
  // float adaptive_kd_x = 9;
  void clear_adaptive_kd_x() ;
  float adaptive_kd_x() const;
  void set_adaptive_kd_x(float value);

  private:
  float _internal_adaptive_kd_x() const;
  void _internal_set_adaptive_kd_x(float value);

  public:
  // float adaptive_kp_y = 10;
  void clear_adaptive_kp_y() ;
  float adaptive_kp_y() const;
  void set_adaptive_kp_y(float value);

  private:
  float _internal_adaptive_kp_y() const;
  void _internal_set_adaptive_kp_y(float value);

  public:
  // float adaptive_ki_y = 11;
  void clear_adaptive_ki_y() ;
  float adaptive_ki_y() const;
  void set_adaptive_ki_y(float value);

  private:
  float _internal_adaptive_ki_y() const;
  void _internal_set_adaptive_ki_y(float value);

  public:
  // float adaptive_kd_y = 12;
  void clear_adaptive_kd_y() ;
  float adaptive_kd_y() const;
  void set_adaptive_kd_y(float value);

  private:
  float _internal_adaptive_kd_y() const;
  void _internal_set_adaptive_kd_y(float value);

  public:
  // @@protoc_insertion_point(class_scope:force_msg.Impedance)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    float m_x_;
    float m_y_;
    float k0_x_;
    float k0_y_;
    float d_x_;
    float d_y_;
    float adaptive_kp_x_;
    float adaptive_ki_x_;
    float adaptive_kd_x_;
    float adaptive_kp_y_;
    float adaptive_ki_y_;
    float adaptive_kd_y_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_force_2eproto;
};// -------------------------------------------------------------------

class LegForceStamped final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:force_msg.LegForceStamped) */ {
 public:
  inline LegForceStamped() : LegForceStamped(nullptr) {}
  ~LegForceStamped() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LegForceStamped(::google::protobuf::internal::ConstantInitialized);

  inline LegForceStamped(const LegForceStamped& from)
      : LegForceStamped(nullptr, from) {}
  LegForceStamped(LegForceStamped&& from) noexcept
    : LegForceStamped() {
    *this = ::std::move(from);
  }

  inline LegForceStamped& operator=(const LegForceStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline LegForceStamped& operator=(LegForceStamped&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LegForceStamped& default_instance() {
    return *internal_default_instance();
  }
  static inline const LegForceStamped* internal_default_instance() {
    return reinterpret_cast<const LegForceStamped*>(
               &_LegForceStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LegForceStamped& a, LegForceStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(LegForceStamped* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LegForceStamped* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LegForceStamped* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LegForceStamped>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LegForceStamped& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LegForceStamped& from) {
    LegForceStamped::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LegForceStamped* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "force_msg.LegForceStamped";
  }
  protected:
  explicit LegForceStamped(::google::protobuf::Arena* arena);
  LegForceStamped(::google::protobuf::Arena* arena, const LegForceStamped& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForceFieldNumber = 2,
    kImpedanceFieldNumber = 3,
    kHeaderFieldNumber = 1,
  };
  // repeated .force_msg.LegForce force = 2;
  int force_size() const;
  private:
  int _internal_force_size() const;

  public:
  void clear_force() ;
  ::force_msg::LegForce* mutable_force(int index);
  ::google::protobuf::RepeatedPtrField< ::force_msg::LegForce >*
      mutable_force();
  private:
  const ::google::protobuf::RepeatedPtrField<::force_msg::LegForce>& _internal_force() const;
  ::google::protobuf::RepeatedPtrField<::force_msg::LegForce>* _internal_mutable_force();
  public:
  const ::force_msg::LegForce& force(int index) const;
  ::force_msg::LegForce* add_force();
  const ::google::protobuf::RepeatedPtrField< ::force_msg::LegForce >&
      force() const;
  // repeated .force_msg.Impedance impedance = 3;
  int impedance_size() const;
  private:
  int _internal_impedance_size() const;

  public:
  void clear_impedance() ;
  ::force_msg::Impedance* mutable_impedance(int index);
  ::google::protobuf::RepeatedPtrField< ::force_msg::Impedance >*
      mutable_impedance();
  private:
  const ::google::protobuf::RepeatedPtrField<::force_msg::Impedance>& _internal_impedance() const;
  ::google::protobuf::RepeatedPtrField<::force_msg::Impedance>* _internal_mutable_impedance();
  public:
  const ::force_msg::Impedance& impedance(int index) const;
  ::force_msg::Impedance* add_impedance();
  const ::google::protobuf::RepeatedPtrField< ::force_msg::Impedance >&
      impedance() const;
  // .std_msg.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::std_msg::Header& header() const;
  PROTOBUF_NODISCARD ::std_msg::Header* release_header();
  ::std_msg::Header* mutable_header();
  void set_allocated_header(::std_msg::Header* value);
  void unsafe_arena_set_allocated_header(::std_msg::Header* value);
  ::std_msg::Header* unsafe_arena_release_header();

  private:
  const ::std_msg::Header& _internal_header() const;
  ::std_msg::Header* _internal_mutable_header();

  public:
  // @@protoc_insertion_point(class_scope:force_msg.LegForceStamped)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::force_msg::LegForce > force_;
    ::google::protobuf::RepeatedPtrField< ::force_msg::Impedance > impedance_;
    ::std_msg::Header* header_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_force_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Impedance

// float M_x = 1;
inline void Impedance::clear_m_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.m_x_ = 0;
}
inline float Impedance::m_x() const {
  // @@protoc_insertion_point(field_get:force_msg.Impedance.M_x)
  return _internal_m_x();
}
inline void Impedance::set_m_x(float value) {
  _internal_set_m_x(value);
  // @@protoc_insertion_point(field_set:force_msg.Impedance.M_x)
}
inline float Impedance::_internal_m_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m_x_;
}
inline void Impedance::_internal_set_m_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.m_x_ = value;
}

// float M_y = 2;
inline void Impedance::clear_m_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.m_y_ = 0;
}
inline float Impedance::m_y() const {
  // @@protoc_insertion_point(field_get:force_msg.Impedance.M_y)
  return _internal_m_y();
}
inline void Impedance::set_m_y(float value) {
  _internal_set_m_y(value);
  // @@protoc_insertion_point(field_set:force_msg.Impedance.M_y)
}
inline float Impedance::_internal_m_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m_y_;
}
inline void Impedance::_internal_set_m_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.m_y_ = value;
}

// float K0_x = 3;
inline void Impedance::clear_k0_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.k0_x_ = 0;
}
inline float Impedance::k0_x() const {
  // @@protoc_insertion_point(field_get:force_msg.Impedance.K0_x)
  return _internal_k0_x();
}
inline void Impedance::set_k0_x(float value) {
  _internal_set_k0_x(value);
  // @@protoc_insertion_point(field_set:force_msg.Impedance.K0_x)
}
inline float Impedance::_internal_k0_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.k0_x_;
}
inline void Impedance::_internal_set_k0_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.k0_x_ = value;
}

// float K0_y = 4;
inline void Impedance::clear_k0_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.k0_y_ = 0;
}
inline float Impedance::k0_y() const {
  // @@protoc_insertion_point(field_get:force_msg.Impedance.K0_y)
  return _internal_k0_y();
}
inline void Impedance::set_k0_y(float value) {
  _internal_set_k0_y(value);
  // @@protoc_insertion_point(field_set:force_msg.Impedance.K0_y)
}
inline float Impedance::_internal_k0_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.k0_y_;
}
inline void Impedance::_internal_set_k0_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.k0_y_ = value;
}

// float D_x = 5;
inline void Impedance::clear_d_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.d_x_ = 0;
}
inline float Impedance::d_x() const {
  // @@protoc_insertion_point(field_get:force_msg.Impedance.D_x)
  return _internal_d_x();
}
inline void Impedance::set_d_x(float value) {
  _internal_set_d_x(value);
  // @@protoc_insertion_point(field_set:force_msg.Impedance.D_x)
}
inline float Impedance::_internal_d_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.d_x_;
}
inline void Impedance::_internal_set_d_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.d_x_ = value;
}

// float D_y = 6;
inline void Impedance::clear_d_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.d_y_ = 0;
}
inline float Impedance::d_y() const {
  // @@protoc_insertion_point(field_get:force_msg.Impedance.D_y)
  return _internal_d_y();
}
inline void Impedance::set_d_y(float value) {
  _internal_set_d_y(value);
  // @@protoc_insertion_point(field_set:force_msg.Impedance.D_y)
}
inline float Impedance::_internal_d_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.d_y_;
}
inline void Impedance::_internal_set_d_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.d_y_ = value;
}

// float adaptive_kp_x = 7;
inline void Impedance::clear_adaptive_kp_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.adaptive_kp_x_ = 0;
}
inline float Impedance::adaptive_kp_x() const {
  // @@protoc_insertion_point(field_get:force_msg.Impedance.adaptive_kp_x)
  return _internal_adaptive_kp_x();
}
inline void Impedance::set_adaptive_kp_x(float value) {
  _internal_set_adaptive_kp_x(value);
  // @@protoc_insertion_point(field_set:force_msg.Impedance.adaptive_kp_x)
}
inline float Impedance::_internal_adaptive_kp_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.adaptive_kp_x_;
}
inline void Impedance::_internal_set_adaptive_kp_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.adaptive_kp_x_ = value;
}

// float adaptive_ki_x = 8;
inline void Impedance::clear_adaptive_ki_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.adaptive_ki_x_ = 0;
}
inline float Impedance::adaptive_ki_x() const {
  // @@protoc_insertion_point(field_get:force_msg.Impedance.adaptive_ki_x)
  return _internal_adaptive_ki_x();
}
inline void Impedance::set_adaptive_ki_x(float value) {
  _internal_set_adaptive_ki_x(value);
  // @@protoc_insertion_point(field_set:force_msg.Impedance.adaptive_ki_x)
}
inline float Impedance::_internal_adaptive_ki_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.adaptive_ki_x_;
}
inline void Impedance::_internal_set_adaptive_ki_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.adaptive_ki_x_ = value;
}

// float adaptive_kd_x = 9;
inline void Impedance::clear_adaptive_kd_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.adaptive_kd_x_ = 0;
}
inline float Impedance::adaptive_kd_x() const {
  // @@protoc_insertion_point(field_get:force_msg.Impedance.adaptive_kd_x)
  return _internal_adaptive_kd_x();
}
inline void Impedance::set_adaptive_kd_x(float value) {
  _internal_set_adaptive_kd_x(value);
  // @@protoc_insertion_point(field_set:force_msg.Impedance.adaptive_kd_x)
}
inline float Impedance::_internal_adaptive_kd_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.adaptive_kd_x_;
}
inline void Impedance::_internal_set_adaptive_kd_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.adaptive_kd_x_ = value;
}

// float adaptive_kp_y = 10;
inline void Impedance::clear_adaptive_kp_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.adaptive_kp_y_ = 0;
}
inline float Impedance::adaptive_kp_y() const {
  // @@protoc_insertion_point(field_get:force_msg.Impedance.adaptive_kp_y)
  return _internal_adaptive_kp_y();
}
inline void Impedance::set_adaptive_kp_y(float value) {
  _internal_set_adaptive_kp_y(value);
  // @@protoc_insertion_point(field_set:force_msg.Impedance.adaptive_kp_y)
}
inline float Impedance::_internal_adaptive_kp_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.adaptive_kp_y_;
}
inline void Impedance::_internal_set_adaptive_kp_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.adaptive_kp_y_ = value;
}

// float adaptive_ki_y = 11;
inline void Impedance::clear_adaptive_ki_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.adaptive_ki_y_ = 0;
}
inline float Impedance::adaptive_ki_y() const {
  // @@protoc_insertion_point(field_get:force_msg.Impedance.adaptive_ki_y)
  return _internal_adaptive_ki_y();
}
inline void Impedance::set_adaptive_ki_y(float value) {
  _internal_set_adaptive_ki_y(value);
  // @@protoc_insertion_point(field_set:force_msg.Impedance.adaptive_ki_y)
}
inline float Impedance::_internal_adaptive_ki_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.adaptive_ki_y_;
}
inline void Impedance::_internal_set_adaptive_ki_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.adaptive_ki_y_ = value;
}

// float adaptive_kd_y = 12;
inline void Impedance::clear_adaptive_kd_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.adaptive_kd_y_ = 0;
}
inline float Impedance::adaptive_kd_y() const {
  // @@protoc_insertion_point(field_get:force_msg.Impedance.adaptive_kd_y)
  return _internal_adaptive_kd_y();
}
inline void Impedance::set_adaptive_kd_y(float value) {
  _internal_set_adaptive_kd_y(value);
  // @@protoc_insertion_point(field_set:force_msg.Impedance.adaptive_kd_y)
}
inline float Impedance::_internal_adaptive_kd_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.adaptive_kd_y_;
}
inline void Impedance::_internal_set_adaptive_kd_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.adaptive_kd_y_ = value;
}

// -------------------------------------------------------------------

// LegForce

// float pose_x = 1;
inline void LegForce::clear_pose_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pose_x_ = 0;
}
inline float LegForce::pose_x() const {
  // @@protoc_insertion_point(field_get:force_msg.LegForce.pose_x)
  return _internal_pose_x();
}
inline void LegForce::set_pose_x(float value) {
  _internal_set_pose_x(value);
  // @@protoc_insertion_point(field_set:force_msg.LegForce.pose_x)
}
inline float LegForce::_internal_pose_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pose_x_;
}
inline void LegForce::_internal_set_pose_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pose_x_ = value;
}

// float pose_y = 2;
inline void LegForce::clear_pose_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pose_y_ = 0;
}
inline float LegForce::pose_y() const {
  // @@protoc_insertion_point(field_get:force_msg.LegForce.pose_y)
  return _internal_pose_y();
}
inline void LegForce::set_pose_y(float value) {
  _internal_set_pose_y(value);
  // @@protoc_insertion_point(field_set:force_msg.LegForce.pose_y)
}
inline float LegForce::_internal_pose_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pose_y_;
}
inline void LegForce::_internal_set_pose_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pose_y_ = value;
}

// float force_x = 3;
inline void LegForce::clear_force_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.force_x_ = 0;
}
inline float LegForce::force_x() const {
  // @@protoc_insertion_point(field_get:force_msg.LegForce.force_x)
  return _internal_force_x();
}
inline void LegForce::set_force_x(float value) {
  _internal_set_force_x(value);
  // @@protoc_insertion_point(field_set:force_msg.LegForce.force_x)
}
inline float LegForce::_internal_force_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.force_x_;
}
inline void LegForce::_internal_set_force_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.force_x_ = value;
}

// float force_y = 4;
inline void LegForce::clear_force_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.force_y_ = 0;
}
inline float LegForce::force_y() const {
  // @@protoc_insertion_point(field_get:force_msg.LegForce.force_y)
  return _internal_force_y();
}
inline void LegForce::set_force_y(float value) {
  _internal_set_force_y(value);
  // @@protoc_insertion_point(field_set:force_msg.LegForce.force_y)
}
inline float LegForce::_internal_force_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.force_y_;
}
inline void LegForce::_internal_set_force_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.force_y_ = value;
}

// -------------------------------------------------------------------

// LegForceStamped

// .std_msg.Header header = 1;
inline bool LegForceStamped::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::std_msg::Header& LegForceStamped::_internal_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::std_msg::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::std_msg::Header&>(::std_msg::_Header_default_instance_);
}
inline const ::std_msg::Header& LegForceStamped::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:force_msg.LegForceStamped.header)
  return _internal_header();
}
inline void LegForceStamped::unsafe_arena_set_allocated_header(::std_msg::Header* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::std_msg::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:force_msg.LegForceStamped.header)
}
inline ::std_msg::Header* LegForceStamped::release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::std_msg::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::std_msg::Header* LegForceStamped::unsafe_arena_release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:force_msg.LegForceStamped.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::std_msg::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::std_msg::Header* LegForceStamped::_internal_mutable_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::std_msg::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::std_msg::Header*>(p);
  }
  return _impl_.header_;
}
inline ::std_msg::Header* LegForceStamped::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std_msg::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:force_msg.LegForceStamped.header)
  return _msg;
}
inline void LegForceStamped::set_allocated_header(::std_msg::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::std_msg::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:force_msg.LegForceStamped.header)
}

// repeated .force_msg.LegForce force = 2;
inline int LegForceStamped::_internal_force_size() const {
  return _internal_force().size();
}
inline int LegForceStamped::force_size() const {
  return _internal_force_size();
}
inline void LegForceStamped::clear_force() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.force_.Clear();
}
inline ::force_msg::LegForce* LegForceStamped::mutable_force(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:force_msg.LegForceStamped.force)
  return _internal_mutable_force()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::force_msg::LegForce>* LegForceStamped::mutable_force()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:force_msg.LegForceStamped.force)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_force();
}
inline const ::force_msg::LegForce& LegForceStamped::force(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:force_msg.LegForceStamped.force)
  return _internal_force().Get(index);
}
inline ::force_msg::LegForce* LegForceStamped::add_force() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::force_msg::LegForce* _add = _internal_mutable_force()->Add();
  // @@protoc_insertion_point(field_add:force_msg.LegForceStamped.force)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::force_msg::LegForce>& LegForceStamped::force() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:force_msg.LegForceStamped.force)
  return _internal_force();
}
inline const ::google::protobuf::RepeatedPtrField<::force_msg::LegForce>&
LegForceStamped::_internal_force() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.force_;
}
inline ::google::protobuf::RepeatedPtrField<::force_msg::LegForce>*
LegForceStamped::_internal_mutable_force() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.force_;
}

// repeated .force_msg.Impedance impedance = 3;
inline int LegForceStamped::_internal_impedance_size() const {
  return _internal_impedance().size();
}
inline int LegForceStamped::impedance_size() const {
  return _internal_impedance_size();
}
inline void LegForceStamped::clear_impedance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.impedance_.Clear();
}
inline ::force_msg::Impedance* LegForceStamped::mutable_impedance(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:force_msg.LegForceStamped.impedance)
  return _internal_mutable_impedance()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::force_msg::Impedance>* LegForceStamped::mutable_impedance()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:force_msg.LegForceStamped.impedance)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_impedance();
}
inline const ::force_msg::Impedance& LegForceStamped::impedance(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:force_msg.LegForceStamped.impedance)
  return _internal_impedance().Get(index);
}
inline ::force_msg::Impedance* LegForceStamped::add_impedance() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::force_msg::Impedance* _add = _internal_mutable_impedance()->Add();
  // @@protoc_insertion_point(field_add:force_msg.LegForceStamped.impedance)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::force_msg::Impedance>& LegForceStamped::impedance() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:force_msg.LegForceStamped.impedance)
  return _internal_impedance();
}
inline const ::google::protobuf::RepeatedPtrField<::force_msg::Impedance>&
LegForceStamped::_internal_impedance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.impedance_;
}
inline ::google::protobuf::RepeatedPtrField<::force_msg::Impedance>*
LegForceStamped::_internal_mutable_impedance() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.impedance_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace force_msg


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_force_2eproto_2epb_2eh
