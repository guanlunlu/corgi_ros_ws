// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry.proto

#include "geometry.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace geometry_msg {

inline constexpr Vector3::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Vector3::Vector3(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Vector3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3DefaultTypeInternal() {}
  union {
    Vector3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3DefaultTypeInternal _Vector3_default_instance_;

inline constexpr Quaternion::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        w_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Quaternion::Quaternion(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct QuaternionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuaternionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuaternionDefaultTypeInternal() {}
  union {
    Quaternion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuaternionDefaultTypeInternal _Quaternion_default_instance_;

inline constexpr Twist::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        linear_{nullptr},
        angular_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Twist::Twist(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TwistDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TwistDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TwistDefaultTypeInternal() {}
  union {
    Twist _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TwistDefaultTypeInternal _Twist_default_instance_;

inline constexpr Transform::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        translation_{nullptr},
        rotation_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Transform::Transform(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TransformDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransformDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransformDefaultTypeInternal() {}
  union {
    Transform _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransformDefaultTypeInternal _Transform_default_instance_;

inline constexpr Pose::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        orientation_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Pose::Pose(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseDefaultTypeInternal() {}
  union {
    Pose _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseDefaultTypeInternal _Pose_default_instance_;

inline constexpr Accel::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        linear_{nullptr},
        angular_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Accel::Accel(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AccelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccelDefaultTypeInternal() {}
  union {
    Accel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccelDefaultTypeInternal _Accel_default_instance_;

inline constexpr TwistWithCovariance::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        covariance_{},
        twist_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TwistWithCovariance::TwistWithCovariance(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TwistWithCovarianceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TwistWithCovarianceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TwistWithCovarianceDefaultTypeInternal() {}
  union {
    TwistWithCovariance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TwistWithCovarianceDefaultTypeInternal _TwistWithCovariance_default_instance_;

inline constexpr TwistStamped::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        twist_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TwistStamped::TwistStamped(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TwistStampedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TwistStampedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TwistStampedDefaultTypeInternal() {}
  union {
    TwistStamped _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TwistStampedDefaultTypeInternal _TwistStamped_default_instance_;

inline constexpr TransformStamped::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        childframeid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        header_{nullptr},
        transform_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TransformStamped::TransformStamped(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TransformStampedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransformStampedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransformStampedDefaultTypeInternal() {}
  union {
    TransformStamped _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransformStampedDefaultTypeInternal _TransformStamped_default_instance_;

inline constexpr PoseWithCovariance::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        covariance_{},
        pose_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PoseWithCovariance::PoseWithCovariance(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PoseWithCovarianceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseWithCovarianceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseWithCovarianceDefaultTypeInternal() {}
  union {
    PoseWithCovariance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseWithCovarianceDefaultTypeInternal _PoseWithCovariance_default_instance_;

inline constexpr PoseStamped::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        pose_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PoseStamped::PoseStamped(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PoseStampedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseStampedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseStampedDefaultTypeInternal() {}
  union {
    PoseStamped _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseStampedDefaultTypeInternal _PoseStamped_default_instance_;

inline constexpr AccelWithCovariance::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        covariance_{},
        accel_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AccelWithCovariance::AccelWithCovariance(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AccelWithCovarianceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccelWithCovarianceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccelWithCovarianceDefaultTypeInternal() {}
  union {
    AccelWithCovariance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccelWithCovarianceDefaultTypeInternal _AccelWithCovariance_default_instance_;

inline constexpr AccelStamped::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        accel_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AccelStamped::AccelStamped(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AccelStampedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccelStampedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccelStampedDefaultTypeInternal() {}
  union {
    AccelStamped _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccelStampedDefaultTypeInternal _AccelStamped_default_instance_;

inline constexpr TwistWithCovarianceStamped::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        twist_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TwistWithCovarianceStamped::TwistWithCovarianceStamped(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TwistWithCovarianceStampedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TwistWithCovarianceStampedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TwistWithCovarianceStampedDefaultTypeInternal() {}
  union {
    TwistWithCovarianceStamped _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TwistWithCovarianceStampedDefaultTypeInternal _TwistWithCovarianceStamped_default_instance_;

inline constexpr PoseWithCovarianceStamped::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        pose_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PoseWithCovarianceStamped::PoseWithCovarianceStamped(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PoseWithCovarianceStampedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseWithCovarianceStampedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseWithCovarianceStampedDefaultTypeInternal() {}
  union {
    PoseWithCovarianceStamped _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseWithCovarianceStampedDefaultTypeInternal _PoseWithCovarianceStamped_default_instance_;

inline constexpr AccelWithCovarianceStamped::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        accel_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AccelWithCovarianceStamped::AccelWithCovarianceStamped(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AccelWithCovarianceStampedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccelWithCovarianceStampedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccelWithCovarianceStampedDefaultTypeInternal() {}
  union {
    AccelWithCovarianceStamped _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccelWithCovarianceStampedDefaultTypeInternal _AccelWithCovarianceStamped_default_instance_;
}  // namespace geometry_msg
static ::_pb::Metadata file_level_metadata_geometry_2eproto[16];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_geometry_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_geometry_2eproto = nullptr;
const ::uint32_t TableStruct_geometry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Vector3, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Vector3, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Vector3, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Vector3, _impl_.z_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Accel, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Accel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Accel, _impl_.linear_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Accel, _impl_.angular_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::geometry_msg::AccelStamped, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::AccelStamped, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::geometry_msg::AccelStamped, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::AccelStamped, _impl_.accel_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::geometry_msg::AccelWithCovariance, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::AccelWithCovariance, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::geometry_msg::AccelWithCovariance, _impl_.accel_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::AccelWithCovariance, _impl_.covariance_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::geometry_msg::AccelWithCovarianceStamped, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::AccelWithCovarianceStamped, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::geometry_msg::AccelWithCovarianceStamped, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::AccelWithCovarianceStamped, _impl_.accel_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Quaternion, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Quaternion, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Quaternion, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Quaternion, _impl_.z_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Quaternion, _impl_.w_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Pose, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Pose, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Pose, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Pose, _impl_.orientation_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::geometry_msg::PoseStamped, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::PoseStamped, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::geometry_msg::PoseStamped, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::PoseStamped, _impl_.pose_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::geometry_msg::PoseWithCovariance, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::PoseWithCovariance, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::geometry_msg::PoseWithCovariance, _impl_.pose_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::PoseWithCovariance, _impl_.covariance_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::geometry_msg::PoseWithCovarianceStamped, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::PoseWithCovarianceStamped, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::geometry_msg::PoseWithCovarianceStamped, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::PoseWithCovarianceStamped, _impl_.pose_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Transform, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Transform, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Transform, _impl_.translation_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Transform, _impl_.rotation_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::geometry_msg::TransformStamped, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::TransformStamped, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::geometry_msg::TransformStamped, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::TransformStamped, _impl_.childframeid_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::TransformStamped, _impl_.transform_),
    0,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Twist, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Twist, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Twist, _impl_.linear_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::Twist, _impl_.angular_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::geometry_msg::TwistStamped, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::TwistStamped, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::geometry_msg::TwistStamped, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::TwistStamped, _impl_.twist_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::geometry_msg::TwistWithCovariance, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::TwistWithCovariance, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::geometry_msg::TwistWithCovariance, _impl_.twist_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::TwistWithCovariance, _impl_.covariance_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::geometry_msg::TwistWithCovarianceStamped, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::TwistWithCovarianceStamped, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::geometry_msg::TwistWithCovarianceStamped, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::geometry_msg::TwistWithCovarianceStamped, _impl_.twist_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::geometry_msg::Vector3)},
        {11, 21, -1, sizeof(::geometry_msg::Accel)},
        {23, 33, -1, sizeof(::geometry_msg::AccelStamped)},
        {35, 45, -1, sizeof(::geometry_msg::AccelWithCovariance)},
        {47, 57, -1, sizeof(::geometry_msg::AccelWithCovarianceStamped)},
        {59, -1, -1, sizeof(::geometry_msg::Quaternion)},
        {71, 81, -1, sizeof(::geometry_msg::Pose)},
        {83, 93, -1, sizeof(::geometry_msg::PoseStamped)},
        {95, 105, -1, sizeof(::geometry_msg::PoseWithCovariance)},
        {107, 117, -1, sizeof(::geometry_msg::PoseWithCovarianceStamped)},
        {119, 129, -1, sizeof(::geometry_msg::Transform)},
        {131, 142, -1, sizeof(::geometry_msg::TransformStamped)},
        {145, 155, -1, sizeof(::geometry_msg::Twist)},
        {157, 167, -1, sizeof(::geometry_msg::TwistStamped)},
        {169, 179, -1, sizeof(::geometry_msg::TwistWithCovariance)},
        {181, 191, -1, sizeof(::geometry_msg::TwistWithCovarianceStamped)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::geometry_msg::_Vector3_default_instance_._instance,
    &::geometry_msg::_Accel_default_instance_._instance,
    &::geometry_msg::_AccelStamped_default_instance_._instance,
    &::geometry_msg::_AccelWithCovariance_default_instance_._instance,
    &::geometry_msg::_AccelWithCovarianceStamped_default_instance_._instance,
    &::geometry_msg::_Quaternion_default_instance_._instance,
    &::geometry_msg::_Pose_default_instance_._instance,
    &::geometry_msg::_PoseStamped_default_instance_._instance,
    &::geometry_msg::_PoseWithCovariance_default_instance_._instance,
    &::geometry_msg::_PoseWithCovarianceStamped_default_instance_._instance,
    &::geometry_msg::_Transform_default_instance_._instance,
    &::geometry_msg::_TransformStamped_default_instance_._instance,
    &::geometry_msg::_Twist_default_instance_._instance,
    &::geometry_msg::_TwistStamped_default_instance_._instance,
    &::geometry_msg::_TwistWithCovariance_default_instance_._instance,
    &::geometry_msg::_TwistWithCovarianceStamped_default_instance_._instance,
};
const char descriptor_table_protodef_geometry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\016geometry.proto\022\014geometry_msg\032\tstd.prot"
    "o\"*\n\007Vector3\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030"
    "\003 \001(\001\"V\n\005Accel\022%\n\006linear\030\001 \001(\0132\025.geometr"
    "y_msg.Vector3\022&\n\007angular\030\002 \001(\0132\025.geometr"
    "y_msg.Vector3\"S\n\014AccelStamped\022\037\n\006header\030"
    "\001 \001(\0132\017.std_msg.Header\022\"\n\005accel\030\002 \001(\0132\023."
    "geometry_msg.Accel\"M\n\023AccelWithCovarianc"
    "e\022\"\n\005accel\030\001 \001(\0132\023.geometry_msg.Accel\022\022\n"
    "\ncovariance\030\002 \003(\001\"o\n\032AccelWithCovariance"
    "Stamped\022\037\n\006header\030\001 \001(\0132\017.std_msg.Header"
    "\0220\n\005accel\030\002 \001(\0132!.geometry_msg.AccelWith"
    "Covariance\"8\n\nQuaternion\022\t\n\001x\030\001 \001(\001\022\t\n\001y"
    "\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001w\030\004 \001(\001\"^\n\004Pose\022\'\n\010"
    "position\030\001 \001(\0132\025.geometry_msg.Vector3\022-\n"
    "\013orientation\030\002 \001(\0132\030.geometry_msg.Quater"
    "nion\"P\n\013PoseStamped\022\037\n\006header\030\001 \001(\0132\017.st"
    "d_msg.Header\022 \n\004pose\030\002 \001(\0132\022.geometry_ms"
    "g.Pose\"J\n\022PoseWithCovariance\022 \n\004pose\030\001 \001"
    "(\0132\022.geometry_msg.Pose\022\022\n\ncovariance\030\002 \003"
    "(\001\"l\n\031PoseWithCovarianceStamped\022\037\n\006heade"
    "r\030\001 \001(\0132\017.std_msg.Header\022.\n\004pose\030\002 \001(\0132 "
    ".geometry_msg.PoseWithCovariance\"c\n\tTran"
    "sform\022*\n\013translation\030\001 \001(\0132\025.geometry_ms"
    "g.Vector3\022*\n\010rotation\030\002 \001(\0132\030.geometry_m"
    "sg.Quaternion\"u\n\020TransformStamped\022\037\n\006hea"
    "der\030\001 \001(\0132\017.std_msg.Header\022\024\n\014childframe"
    "id\030\002 \001(\t\022*\n\ttransform\030\003 \001(\0132\027.geometry_m"
    "sg.Transform\"V\n\005Twist\022%\n\006linear\030\001 \001(\0132\025."
    "geometry_msg.Vector3\022&\n\007angular\030\002 \001(\0132\025."
    "geometry_msg.Vector3\"S\n\014TwistStamped\022\037\n\006"
    "header\030\001 \001(\0132\017.std_msg.Header\022\"\n\005twist\030\002"
    " \001(\0132\023.geometry_msg.Twist\"M\n\023TwistWithCo"
    "variance\022\"\n\005twist\030\001 \001(\0132\023.geometry_msg.T"
    "wist\022\022\n\ncovariance\030\002 \003(\001\"o\n\032TwistWithCov"
    "arianceStamped\022\037\n\006header\030\001 \001(\0132\017.std_msg"
    ".Header\0220\n\005twist\030\002 \001(\0132!.geometry_msg.Tw"
    "istWithCovarianceb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_geometry_2eproto_deps[1] =
    {
        &::descriptor_table_std_2eproto,
};
static ::absl::once_flag descriptor_table_geometry_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_geometry_2eproto = {
    false,
    false,
    1465,
    descriptor_table_protodef_geometry_2eproto,
    "geometry.proto",
    &descriptor_table_geometry_2eproto_once,
    descriptor_table_geometry_2eproto_deps,
    1,
    16,
    schemas,
    file_default_instances,
    TableStruct_geometry_2eproto::offsets,
    file_level_metadata_geometry_2eproto,
    file_level_enum_descriptors_geometry_2eproto,
    file_level_service_descriptors_geometry_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_geometry_2eproto_getter() {
  return &descriptor_table_geometry_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_geometry_2eproto(&descriptor_table_geometry_2eproto);
namespace geometry_msg {
// ===================================================================

class Vector3::_Internal {
 public:
};

Vector3::Vector3(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:geometry_msg.Vector3)
}
Vector3::Vector3(
    ::google::protobuf::Arena* arena, const Vector3& from)
    : Vector3(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Vector3::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Vector3::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:geometry_msg.Vector3)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Vector3::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:geometry_msg.Vector3)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Vector3::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Vector3_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double x = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_)}},
    // double y = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Vector3, _impl_.y_)}},
    // double z = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double x = 1;
    {PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double y = 2;
    {PROTOBUF_FIELD_OFFSET(Vector3, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double z = 3;
    {PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Vector3::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:geometry_msg.Vector3)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double x = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geometry_msg.Vector3)
  return target;
}

::size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geometry_msg.Vector3)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 9;
  }

  // double y = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 9;
  }

  // double z = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Vector3::_class_data_ = {
    Vector3::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Vector3::GetClassData() const {
  return &_class_data_;
}

void Vector3::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Vector3*>(&to_msg);
  auto& from = static_cast<const Vector3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:geometry_msg.Vector3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geometry_msg.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Vector3::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Vector3::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Vector3::InternalSwap(Vector3* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_)
      + sizeof(Vector3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[0]);
}
// ===================================================================

class Accel::_Internal {
 public:
  using HasBits = decltype(std::declval<Accel>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Accel, _impl_._has_bits_);
  static const ::geometry_msg::Vector3& linear(const Accel* msg);
  static void set_has_linear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::geometry_msg::Vector3& angular(const Accel* msg);
  static void set_has_angular(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::geometry_msg::Vector3& Accel::_Internal::linear(const Accel* msg) {
  return *msg->_impl_.linear_;
}
const ::geometry_msg::Vector3& Accel::_Internal::angular(const Accel* msg) {
  return *msg->_impl_.angular_;
}
Accel::Accel(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:geometry_msg.Accel)
}
inline PROTOBUF_NDEBUG_INLINE Accel::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Accel::Accel(
    ::google::protobuf::Arena* arena,
    const Accel& from)
    : ::google::protobuf::Message(arena) {
  Accel* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.linear_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::geometry_msg::Vector3>(arena, *from._impl_.linear_)
                : nullptr;
  _impl_.angular_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::geometry_msg::Vector3>(arena, *from._impl_.angular_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:geometry_msg.Accel)
}
inline PROTOBUF_NDEBUG_INLINE Accel::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Accel::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, linear_),
           0,
           offsetof(Impl_, angular_) -
               offsetof(Impl_, linear_) +
               sizeof(Impl_::angular_));
}
Accel::~Accel() {
  // @@protoc_insertion_point(destructor:geometry_msg.Accel)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Accel::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.linear_;
  delete _impl_.angular_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Accel::Clear() {
// @@protoc_insertion_point(message_clear_start:geometry_msg.Accel)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.linear_ != nullptr);
      _impl_.linear_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.angular_ != nullptr);
      _impl_.angular_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Accel::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Accel::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Accel, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Accel_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .geometry_msg.Vector3 angular = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Accel, _impl_.angular_)}},
    // .geometry_msg.Vector3 linear = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Accel, _impl_.linear_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .geometry_msg.Vector3 linear = 1;
    {PROTOBUF_FIELD_OFFSET(Accel, _impl_.linear_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .geometry_msg.Vector3 angular = 2;
    {PROTOBUF_FIELD_OFFSET(Accel, _impl_.angular_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::geometry_msg::Vector3>()},
    {::_pbi::TcParser::GetTable<::geometry_msg::Vector3>()},
  }}, {{
  }},
};

::uint8_t* Accel::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:geometry_msg.Accel)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .geometry_msg.Vector3 linear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::linear(this),
        _Internal::linear(this).GetCachedSize(), target, stream);
  }

  // .geometry_msg.Vector3 angular = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::angular(this),
        _Internal::angular(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geometry_msg.Accel)
  return target;
}

::size_t Accel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geometry_msg.Accel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .geometry_msg.Vector3 linear = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.linear_);
    }

    // .geometry_msg.Vector3 angular = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.angular_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Accel::_class_data_ = {
    Accel::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Accel::GetClassData() const {
  return &_class_data_;
}

void Accel::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Accel*>(&to_msg);
  auto& from = static_cast<const Accel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:geometry_msg.Accel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_linear()->::geometry_msg::Vector3::MergeFrom(
          from._internal_linear());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_angular()->::geometry_msg::Vector3::MergeFrom(
          from._internal_angular());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Accel::CopyFrom(const Accel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geometry_msg.Accel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Accel::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Accel::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Accel::InternalSwap(Accel* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Accel, _impl_.angular_)
      + sizeof(Accel::_impl_.angular_)
      - PROTOBUF_FIELD_OFFSET(Accel, _impl_.linear_)>(
          reinterpret_cast<char*>(&_impl_.linear_),
          reinterpret_cast<char*>(&other->_impl_.linear_));
}

::google::protobuf::Metadata Accel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[1]);
}
// ===================================================================

class AccelStamped::_Internal {
 public:
  using HasBits = decltype(std::declval<AccelStamped>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AccelStamped, _impl_._has_bits_);
  static const ::std_msg::Header& header(const AccelStamped* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::geometry_msg::Accel& accel(const AccelStamped* msg);
  static void set_has_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::std_msg::Header& AccelStamped::_Internal::header(const AccelStamped* msg) {
  return *msg->_impl_.header_;
}
const ::geometry_msg::Accel& AccelStamped::_Internal::accel(const AccelStamped* msg) {
  return *msg->_impl_.accel_;
}
void AccelStamped::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AccelStamped::AccelStamped(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:geometry_msg.AccelStamped)
}
inline PROTOBUF_NDEBUG_INLINE AccelStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AccelStamped::AccelStamped(
    ::google::protobuf::Arena* arena,
    const AccelStamped& from)
    : ::google::protobuf::Message(arena) {
  AccelStamped* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::std_msg::Header>(arena, *from._impl_.header_)
                : nullptr;
  _impl_.accel_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::geometry_msg::Accel>(arena, *from._impl_.accel_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:geometry_msg.AccelStamped)
}
inline PROTOBUF_NDEBUG_INLINE AccelStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AccelStamped::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, accel_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::accel_));
}
AccelStamped::~AccelStamped() {
  // @@protoc_insertion_point(destructor:geometry_msg.AccelStamped)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AccelStamped::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  delete _impl_.accel_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AccelStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:geometry_msg.AccelStamped)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.accel_ != nullptr);
      _impl_.accel_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AccelStamped::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> AccelStamped::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AccelStamped, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AccelStamped_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .geometry_msg.Accel accel = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AccelStamped, _impl_.accel_)}},
    // .std_msg.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AccelStamped, _impl_.header_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .std_msg.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(AccelStamped, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .geometry_msg.Accel accel = 2;
    {PROTOBUF_FIELD_OFFSET(AccelStamped, _impl_.accel_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::std_msg::Header>()},
    {::_pbi::TcParser::GetTable<::geometry_msg::Accel>()},
  }}, {{
  }},
};

::uint8_t* AccelStamped::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:geometry_msg.AccelStamped)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .std_msg.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .geometry_msg.Accel accel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::accel(this),
        _Internal::accel(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geometry_msg.AccelStamped)
  return target;
}

::size_t AccelStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geometry_msg.AccelStamped)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .std_msg.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }

    // .geometry_msg.Accel accel = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.accel_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AccelStamped::_class_data_ = {
    AccelStamped::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AccelStamped::GetClassData() const {
  return &_class_data_;
}

void AccelStamped::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AccelStamped*>(&to_msg);
  auto& from = static_cast<const AccelStamped&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:geometry_msg.AccelStamped)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::std_msg::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_accel()->::geometry_msg::Accel::MergeFrom(
          from._internal_accel());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AccelStamped::CopyFrom(const AccelStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geometry_msg.AccelStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AccelStamped::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AccelStamped::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AccelStamped::InternalSwap(AccelStamped* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccelStamped, _impl_.accel_)
      + sizeof(AccelStamped::_impl_.accel_)
      - PROTOBUF_FIELD_OFFSET(AccelStamped, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata AccelStamped::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[2]);
}
// ===================================================================

class AccelWithCovariance::_Internal {
 public:
  using HasBits = decltype(std::declval<AccelWithCovariance>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AccelWithCovariance, _impl_._has_bits_);
  static const ::geometry_msg::Accel& accel(const AccelWithCovariance* msg);
  static void set_has_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::geometry_msg::Accel& AccelWithCovariance::_Internal::accel(const AccelWithCovariance* msg) {
  return *msg->_impl_.accel_;
}
AccelWithCovariance::AccelWithCovariance(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:geometry_msg.AccelWithCovariance)
}
inline PROTOBUF_NDEBUG_INLINE AccelWithCovariance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        covariance_{visibility, arena, from.covariance_} {}

AccelWithCovariance::AccelWithCovariance(
    ::google::protobuf::Arena* arena,
    const AccelWithCovariance& from)
    : ::google::protobuf::Message(arena) {
  AccelWithCovariance* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.accel_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::geometry_msg::Accel>(arena, *from._impl_.accel_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:geometry_msg.AccelWithCovariance)
}
inline PROTOBUF_NDEBUG_INLINE AccelWithCovariance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        covariance_{visibility, arena} {}

inline void AccelWithCovariance::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.accel_ = {};
}
AccelWithCovariance::~AccelWithCovariance() {
  // @@protoc_insertion_point(destructor:geometry_msg.AccelWithCovariance)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AccelWithCovariance::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.accel_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AccelWithCovariance::Clear() {
// @@protoc_insertion_point(message_clear_start:geometry_msg.AccelWithCovariance)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.covariance_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.accel_ != nullptr);
    _impl_.accel_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AccelWithCovariance::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> AccelWithCovariance::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AccelWithCovariance, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AccelWithCovariance_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated double covariance = 2;
    {::_pbi::TcParser::FastF64P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AccelWithCovariance, _impl_.covariance_)}},
    // .geometry_msg.Accel accel = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AccelWithCovariance, _impl_.accel_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .geometry_msg.Accel accel = 1;
    {PROTOBUF_FIELD_OFFSET(AccelWithCovariance, _impl_.accel_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated double covariance = 2;
    {PROTOBUF_FIELD_OFFSET(AccelWithCovariance, _impl_.covariance_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::geometry_msg::Accel>()},
  }}, {{
  }},
};

::uint8_t* AccelWithCovariance::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:geometry_msg.AccelWithCovariance)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .geometry_msg.Accel accel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::accel(this),
        _Internal::accel(this).GetCachedSize(), target, stream);
  }

  // repeated double covariance = 2;
  if (this->_internal_covariance_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_covariance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geometry_msg.AccelWithCovariance)
  return target;
}

::size_t AccelWithCovariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geometry_msg.AccelWithCovariance)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double covariance = 2;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_covariance_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .geometry_msg.Accel accel = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.accel_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AccelWithCovariance::_class_data_ = {
    AccelWithCovariance::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AccelWithCovariance::GetClassData() const {
  return &_class_data_;
}

void AccelWithCovariance::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AccelWithCovariance*>(&to_msg);
  auto& from = static_cast<const AccelWithCovariance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:geometry_msg.AccelWithCovariance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_covariance()->MergeFrom(from._internal_covariance());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_accel()->::geometry_msg::Accel::MergeFrom(
        from._internal_accel());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AccelWithCovariance::CopyFrom(const AccelWithCovariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geometry_msg.AccelWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AccelWithCovariance::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AccelWithCovariance::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AccelWithCovariance::InternalSwap(AccelWithCovariance* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.covariance_.InternalSwap(&other->_impl_.covariance_);
  swap(_impl_.accel_, other->_impl_.accel_);
}

::google::protobuf::Metadata AccelWithCovariance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[3]);
}
// ===================================================================

class AccelWithCovarianceStamped::_Internal {
 public:
  using HasBits = decltype(std::declval<AccelWithCovarianceStamped>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AccelWithCovarianceStamped, _impl_._has_bits_);
  static const ::std_msg::Header& header(const AccelWithCovarianceStamped* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::geometry_msg::AccelWithCovariance& accel(const AccelWithCovarianceStamped* msg);
  static void set_has_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::std_msg::Header& AccelWithCovarianceStamped::_Internal::header(const AccelWithCovarianceStamped* msg) {
  return *msg->_impl_.header_;
}
const ::geometry_msg::AccelWithCovariance& AccelWithCovarianceStamped::_Internal::accel(const AccelWithCovarianceStamped* msg) {
  return *msg->_impl_.accel_;
}
void AccelWithCovarianceStamped::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AccelWithCovarianceStamped::AccelWithCovarianceStamped(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:geometry_msg.AccelWithCovarianceStamped)
}
inline PROTOBUF_NDEBUG_INLINE AccelWithCovarianceStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AccelWithCovarianceStamped::AccelWithCovarianceStamped(
    ::google::protobuf::Arena* arena,
    const AccelWithCovarianceStamped& from)
    : ::google::protobuf::Message(arena) {
  AccelWithCovarianceStamped* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::std_msg::Header>(arena, *from._impl_.header_)
                : nullptr;
  _impl_.accel_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::geometry_msg::AccelWithCovariance>(arena, *from._impl_.accel_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:geometry_msg.AccelWithCovarianceStamped)
}
inline PROTOBUF_NDEBUG_INLINE AccelWithCovarianceStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AccelWithCovarianceStamped::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, accel_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::accel_));
}
AccelWithCovarianceStamped::~AccelWithCovarianceStamped() {
  // @@protoc_insertion_point(destructor:geometry_msg.AccelWithCovarianceStamped)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AccelWithCovarianceStamped::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  delete _impl_.accel_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AccelWithCovarianceStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:geometry_msg.AccelWithCovarianceStamped)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.accel_ != nullptr);
      _impl_.accel_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AccelWithCovarianceStamped::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> AccelWithCovarianceStamped::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AccelWithCovarianceStamped, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AccelWithCovarianceStamped_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .geometry_msg.AccelWithCovariance accel = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AccelWithCovarianceStamped, _impl_.accel_)}},
    // .std_msg.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AccelWithCovarianceStamped, _impl_.header_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .std_msg.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(AccelWithCovarianceStamped, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .geometry_msg.AccelWithCovariance accel = 2;
    {PROTOBUF_FIELD_OFFSET(AccelWithCovarianceStamped, _impl_.accel_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::std_msg::Header>()},
    {::_pbi::TcParser::GetTable<::geometry_msg::AccelWithCovariance>()},
  }}, {{
  }},
};

::uint8_t* AccelWithCovarianceStamped::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:geometry_msg.AccelWithCovarianceStamped)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .std_msg.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .geometry_msg.AccelWithCovariance accel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::accel(this),
        _Internal::accel(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geometry_msg.AccelWithCovarianceStamped)
  return target;
}

::size_t AccelWithCovarianceStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geometry_msg.AccelWithCovarianceStamped)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .std_msg.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }

    // .geometry_msg.AccelWithCovariance accel = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.accel_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AccelWithCovarianceStamped::_class_data_ = {
    AccelWithCovarianceStamped::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AccelWithCovarianceStamped::GetClassData() const {
  return &_class_data_;
}

void AccelWithCovarianceStamped::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AccelWithCovarianceStamped*>(&to_msg);
  auto& from = static_cast<const AccelWithCovarianceStamped&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:geometry_msg.AccelWithCovarianceStamped)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::std_msg::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_accel()->::geometry_msg::AccelWithCovariance::MergeFrom(
          from._internal_accel());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AccelWithCovarianceStamped::CopyFrom(const AccelWithCovarianceStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geometry_msg.AccelWithCovarianceStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AccelWithCovarianceStamped::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AccelWithCovarianceStamped::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AccelWithCovarianceStamped::InternalSwap(AccelWithCovarianceStamped* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccelWithCovarianceStamped, _impl_.accel_)
      + sizeof(AccelWithCovarianceStamped::_impl_.accel_)
      - PROTOBUF_FIELD_OFFSET(AccelWithCovarianceStamped, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata AccelWithCovarianceStamped::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[4]);
}
// ===================================================================

class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:geometry_msg.Quaternion)
}
Quaternion::Quaternion(
    ::google::protobuf::Arena* arena, const Quaternion& from)
    : Quaternion(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Quaternion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Quaternion::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, w_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::w_));
}
Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:geometry_msg.Quaternion)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Quaternion::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:geometry_msg.Quaternion)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.w_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> Quaternion::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Quaternion_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double w = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_)}},
    // double x = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.x_)}},
    // double y = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.y_)}},
    // double z = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double x = 1;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double y = 2;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double z = 3;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double w = 4;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Quaternion::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:geometry_msg.Quaternion)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double x = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_z(), target);
  }

  // double w = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_w = this->_internal_w();
  ::uint64_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geometry_msg.Quaternion)
  return target;
}

::size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geometry_msg.Quaternion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 9;
  }

  // double y = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 9;
  }

  // double z = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 9;
  }

  // double w = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_w = this->_internal_w();
  ::uint64_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Quaternion::_class_data_ = {
    Quaternion::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Quaternion::GetClassData() const {
  return &_class_data_;
}

void Quaternion::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Quaternion*>(&to_msg);
  auto& from = static_cast<const Quaternion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:geometry_msg.Quaternion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_w = from._internal_w();
  ::uint64_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geometry_msg.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Quaternion::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Quaternion::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Quaternion::InternalSwap(Quaternion* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_)
      + sizeof(Quaternion::_impl_.w_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[5]);
}
// ===================================================================

class Pose::_Internal {
 public:
  using HasBits = decltype(std::declval<Pose>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Pose, _impl_._has_bits_);
  static const ::geometry_msg::Vector3& position(const Pose* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::geometry_msg::Quaternion& orientation(const Pose* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::geometry_msg::Vector3& Pose::_Internal::position(const Pose* msg) {
  return *msg->_impl_.position_;
}
const ::geometry_msg::Quaternion& Pose::_Internal::orientation(const Pose* msg) {
  return *msg->_impl_.orientation_;
}
Pose::Pose(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:geometry_msg.Pose)
}
inline PROTOBUF_NDEBUG_INLINE Pose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Pose::Pose(
    ::google::protobuf::Arena* arena,
    const Pose& from)
    : ::google::protobuf::Message(arena) {
  Pose* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::geometry_msg::Vector3>(arena, *from._impl_.position_)
                : nullptr;
  _impl_.orientation_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::geometry_msg::Quaternion>(arena, *from._impl_.orientation_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:geometry_msg.Pose)
}
inline PROTOBUF_NDEBUG_INLINE Pose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Pose::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, orientation_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::orientation_));
}
Pose::~Pose() {
  // @@protoc_insertion_point(destructor:geometry_msg.Pose)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Pose::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  delete _impl_.orientation_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:geometry_msg.Pose)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.orientation_ != nullptr);
      _impl_.orientation_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Pose::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Pose::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Pose, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Pose_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .geometry_msg.Quaternion orientation = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Pose, _impl_.orientation_)}},
    // .geometry_msg.Vector3 position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Pose, _impl_.position_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .geometry_msg.Vector3 position = 1;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .geometry_msg.Quaternion orientation = 2;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.orientation_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::geometry_msg::Vector3>()},
    {::_pbi::TcParser::GetTable<::geometry_msg::Quaternion>()},
  }}, {{
  }},
};

::uint8_t* Pose::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:geometry_msg.Pose)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .geometry_msg.Vector3 position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .geometry_msg.Quaternion orientation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::orientation(this),
        _Internal::orientation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geometry_msg.Pose)
  return target;
}

::size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geometry_msg.Pose)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .geometry_msg.Vector3 position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
    }

    // .geometry_msg.Quaternion orientation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.orientation_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Pose::_class_data_ = {
    Pose::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Pose::GetClassData() const {
  return &_class_data_;
}

void Pose::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Pose*>(&to_msg);
  auto& from = static_cast<const Pose&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:geometry_msg.Pose)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::geometry_msg::Vector3::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_orientation()->::geometry_msg::Quaternion::MergeFrom(
          from._internal_orientation());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geometry_msg.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Pose::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Pose::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Pose::InternalSwap(Pose* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose, _impl_.orientation_)
      + sizeof(Pose::_impl_.orientation_)
      - PROTOBUF_FIELD_OFFSET(Pose, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[6]);
}
// ===================================================================

class PoseStamped::_Internal {
 public:
  using HasBits = decltype(std::declval<PoseStamped>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PoseStamped, _impl_._has_bits_);
  static const ::std_msg::Header& header(const PoseStamped* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::geometry_msg::Pose& pose(const PoseStamped* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::std_msg::Header& PoseStamped::_Internal::header(const PoseStamped* msg) {
  return *msg->_impl_.header_;
}
const ::geometry_msg::Pose& PoseStamped::_Internal::pose(const PoseStamped* msg) {
  return *msg->_impl_.pose_;
}
void PoseStamped::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PoseStamped::PoseStamped(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:geometry_msg.PoseStamped)
}
inline PROTOBUF_NDEBUG_INLINE PoseStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PoseStamped::PoseStamped(
    ::google::protobuf::Arena* arena,
    const PoseStamped& from)
    : ::google::protobuf::Message(arena) {
  PoseStamped* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::std_msg::Header>(arena, *from._impl_.header_)
                : nullptr;
  _impl_.pose_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::geometry_msg::Pose>(arena, *from._impl_.pose_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:geometry_msg.PoseStamped)
}
inline PROTOBUF_NDEBUG_INLINE PoseStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PoseStamped::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, pose_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::pose_));
}
PoseStamped::~PoseStamped() {
  // @@protoc_insertion_point(destructor:geometry_msg.PoseStamped)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PoseStamped::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  delete _impl_.pose_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PoseStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:geometry_msg.PoseStamped)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.pose_ != nullptr);
      _impl_.pose_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PoseStamped::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> PoseStamped::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PoseStamped, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PoseStamped_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .geometry_msg.Pose pose = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(PoseStamped, _impl_.pose_)}},
    // .std_msg.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PoseStamped, _impl_.header_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .std_msg.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(PoseStamped, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .geometry_msg.Pose pose = 2;
    {PROTOBUF_FIELD_OFFSET(PoseStamped, _impl_.pose_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::std_msg::Header>()},
    {::_pbi::TcParser::GetTable<::geometry_msg::Pose>()},
  }}, {{
  }},
};

::uint8_t* PoseStamped::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:geometry_msg.PoseStamped)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .std_msg.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .geometry_msg.Pose pose = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geometry_msg.PoseStamped)
  return target;
}

::size_t PoseStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geometry_msg.PoseStamped)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .std_msg.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }

    // .geometry_msg.Pose pose = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pose_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PoseStamped::_class_data_ = {
    PoseStamped::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PoseStamped::GetClassData() const {
  return &_class_data_;
}

void PoseStamped::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PoseStamped*>(&to_msg);
  auto& from = static_cast<const PoseStamped&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:geometry_msg.PoseStamped)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::std_msg::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_pose()->::geometry_msg::Pose::MergeFrom(
          from._internal_pose());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PoseStamped::CopyFrom(const PoseStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geometry_msg.PoseStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PoseStamped::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PoseStamped::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PoseStamped::InternalSwap(PoseStamped* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoseStamped, _impl_.pose_)
      + sizeof(PoseStamped::_impl_.pose_)
      - PROTOBUF_FIELD_OFFSET(PoseStamped, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata PoseStamped::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[7]);
}
// ===================================================================

class PoseWithCovariance::_Internal {
 public:
  using HasBits = decltype(std::declval<PoseWithCovariance>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PoseWithCovariance, _impl_._has_bits_);
  static const ::geometry_msg::Pose& pose(const PoseWithCovariance* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::geometry_msg::Pose& PoseWithCovariance::_Internal::pose(const PoseWithCovariance* msg) {
  return *msg->_impl_.pose_;
}
PoseWithCovariance::PoseWithCovariance(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:geometry_msg.PoseWithCovariance)
}
inline PROTOBUF_NDEBUG_INLINE PoseWithCovariance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        covariance_{visibility, arena, from.covariance_} {}

PoseWithCovariance::PoseWithCovariance(
    ::google::protobuf::Arena* arena,
    const PoseWithCovariance& from)
    : ::google::protobuf::Message(arena) {
  PoseWithCovariance* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pose_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::geometry_msg::Pose>(arena, *from._impl_.pose_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:geometry_msg.PoseWithCovariance)
}
inline PROTOBUF_NDEBUG_INLINE PoseWithCovariance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        covariance_{visibility, arena} {}

inline void PoseWithCovariance::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.pose_ = {};
}
PoseWithCovariance::~PoseWithCovariance() {
  // @@protoc_insertion_point(destructor:geometry_msg.PoseWithCovariance)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PoseWithCovariance::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.pose_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PoseWithCovariance::Clear() {
// @@protoc_insertion_point(message_clear_start:geometry_msg.PoseWithCovariance)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.covariance_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pose_ != nullptr);
    _impl_.pose_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PoseWithCovariance::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> PoseWithCovariance::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PoseWithCovariance, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PoseWithCovariance_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated double covariance = 2;
    {::_pbi::TcParser::FastF64P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PoseWithCovariance, _impl_.covariance_)}},
    // .geometry_msg.Pose pose = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PoseWithCovariance, _impl_.pose_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .geometry_msg.Pose pose = 1;
    {PROTOBUF_FIELD_OFFSET(PoseWithCovariance, _impl_.pose_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated double covariance = 2;
    {PROTOBUF_FIELD_OFFSET(PoseWithCovariance, _impl_.covariance_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::geometry_msg::Pose>()},
  }}, {{
  }},
};

::uint8_t* PoseWithCovariance::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:geometry_msg.PoseWithCovariance)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .geometry_msg.Pose pose = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // repeated double covariance = 2;
  if (this->_internal_covariance_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_covariance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geometry_msg.PoseWithCovariance)
  return target;
}

::size_t PoseWithCovariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geometry_msg.PoseWithCovariance)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double covariance = 2;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_covariance_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .geometry_msg.Pose pose = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pose_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PoseWithCovariance::_class_data_ = {
    PoseWithCovariance::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PoseWithCovariance::GetClassData() const {
  return &_class_data_;
}

void PoseWithCovariance::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PoseWithCovariance*>(&to_msg);
  auto& from = static_cast<const PoseWithCovariance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:geometry_msg.PoseWithCovariance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_covariance()->MergeFrom(from._internal_covariance());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pose()->::geometry_msg::Pose::MergeFrom(
        from._internal_pose());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PoseWithCovariance::CopyFrom(const PoseWithCovariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geometry_msg.PoseWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PoseWithCovariance::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PoseWithCovariance::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PoseWithCovariance::InternalSwap(PoseWithCovariance* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.covariance_.InternalSwap(&other->_impl_.covariance_);
  swap(_impl_.pose_, other->_impl_.pose_);
}

::google::protobuf::Metadata PoseWithCovariance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[8]);
}
// ===================================================================

class PoseWithCovarianceStamped::_Internal {
 public:
  using HasBits = decltype(std::declval<PoseWithCovarianceStamped>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PoseWithCovarianceStamped, _impl_._has_bits_);
  static const ::std_msg::Header& header(const PoseWithCovarianceStamped* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::geometry_msg::PoseWithCovariance& pose(const PoseWithCovarianceStamped* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::std_msg::Header& PoseWithCovarianceStamped::_Internal::header(const PoseWithCovarianceStamped* msg) {
  return *msg->_impl_.header_;
}
const ::geometry_msg::PoseWithCovariance& PoseWithCovarianceStamped::_Internal::pose(const PoseWithCovarianceStamped* msg) {
  return *msg->_impl_.pose_;
}
void PoseWithCovarianceStamped::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PoseWithCovarianceStamped::PoseWithCovarianceStamped(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:geometry_msg.PoseWithCovarianceStamped)
}
inline PROTOBUF_NDEBUG_INLINE PoseWithCovarianceStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PoseWithCovarianceStamped::PoseWithCovarianceStamped(
    ::google::protobuf::Arena* arena,
    const PoseWithCovarianceStamped& from)
    : ::google::protobuf::Message(arena) {
  PoseWithCovarianceStamped* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::std_msg::Header>(arena, *from._impl_.header_)
                : nullptr;
  _impl_.pose_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::geometry_msg::PoseWithCovariance>(arena, *from._impl_.pose_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:geometry_msg.PoseWithCovarianceStamped)
}
inline PROTOBUF_NDEBUG_INLINE PoseWithCovarianceStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PoseWithCovarianceStamped::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, pose_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::pose_));
}
PoseWithCovarianceStamped::~PoseWithCovarianceStamped() {
  // @@protoc_insertion_point(destructor:geometry_msg.PoseWithCovarianceStamped)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PoseWithCovarianceStamped::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  delete _impl_.pose_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PoseWithCovarianceStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:geometry_msg.PoseWithCovarianceStamped)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.pose_ != nullptr);
      _impl_.pose_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PoseWithCovarianceStamped::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> PoseWithCovarianceStamped::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PoseWithCovarianceStamped, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PoseWithCovarianceStamped_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .geometry_msg.PoseWithCovariance pose = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(PoseWithCovarianceStamped, _impl_.pose_)}},
    // .std_msg.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PoseWithCovarianceStamped, _impl_.header_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .std_msg.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(PoseWithCovarianceStamped, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .geometry_msg.PoseWithCovariance pose = 2;
    {PROTOBUF_FIELD_OFFSET(PoseWithCovarianceStamped, _impl_.pose_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::std_msg::Header>()},
    {::_pbi::TcParser::GetTable<::geometry_msg::PoseWithCovariance>()},
  }}, {{
  }},
};

::uint8_t* PoseWithCovarianceStamped::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:geometry_msg.PoseWithCovarianceStamped)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .std_msg.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .geometry_msg.PoseWithCovariance pose = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geometry_msg.PoseWithCovarianceStamped)
  return target;
}

::size_t PoseWithCovarianceStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geometry_msg.PoseWithCovarianceStamped)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .std_msg.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }

    // .geometry_msg.PoseWithCovariance pose = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pose_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PoseWithCovarianceStamped::_class_data_ = {
    PoseWithCovarianceStamped::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PoseWithCovarianceStamped::GetClassData() const {
  return &_class_data_;
}

void PoseWithCovarianceStamped::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PoseWithCovarianceStamped*>(&to_msg);
  auto& from = static_cast<const PoseWithCovarianceStamped&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:geometry_msg.PoseWithCovarianceStamped)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::std_msg::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_pose()->::geometry_msg::PoseWithCovariance::MergeFrom(
          from._internal_pose());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PoseWithCovarianceStamped::CopyFrom(const PoseWithCovarianceStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geometry_msg.PoseWithCovarianceStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PoseWithCovarianceStamped::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PoseWithCovarianceStamped::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PoseWithCovarianceStamped::InternalSwap(PoseWithCovarianceStamped* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoseWithCovarianceStamped, _impl_.pose_)
      + sizeof(PoseWithCovarianceStamped::_impl_.pose_)
      - PROTOBUF_FIELD_OFFSET(PoseWithCovarianceStamped, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata PoseWithCovarianceStamped::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[9]);
}
// ===================================================================

class Transform::_Internal {
 public:
  using HasBits = decltype(std::declval<Transform>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Transform, _impl_._has_bits_);
  static const ::geometry_msg::Vector3& translation(const Transform* msg);
  static void set_has_translation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::geometry_msg::Quaternion& rotation(const Transform* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::geometry_msg::Vector3& Transform::_Internal::translation(const Transform* msg) {
  return *msg->_impl_.translation_;
}
const ::geometry_msg::Quaternion& Transform::_Internal::rotation(const Transform* msg) {
  return *msg->_impl_.rotation_;
}
Transform::Transform(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:geometry_msg.Transform)
}
inline PROTOBUF_NDEBUG_INLINE Transform::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Transform::Transform(
    ::google::protobuf::Arena* arena,
    const Transform& from)
    : ::google::protobuf::Message(arena) {
  Transform* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.translation_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::geometry_msg::Vector3>(arena, *from._impl_.translation_)
                : nullptr;
  _impl_.rotation_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::geometry_msg::Quaternion>(arena, *from._impl_.rotation_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:geometry_msg.Transform)
}
inline PROTOBUF_NDEBUG_INLINE Transform::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Transform::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, translation_),
           0,
           offsetof(Impl_, rotation_) -
               offsetof(Impl_, translation_) +
               sizeof(Impl_::rotation_));
}
Transform::~Transform() {
  // @@protoc_insertion_point(destructor:geometry_msg.Transform)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Transform::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.translation_;
  delete _impl_.rotation_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:geometry_msg.Transform)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.translation_ != nullptr);
      _impl_.translation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.rotation_ != nullptr);
      _impl_.rotation_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Transform::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Transform::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Transform, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Transform_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .geometry_msg.Quaternion rotation = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Transform, _impl_.rotation_)}},
    // .geometry_msg.Vector3 translation = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Transform, _impl_.translation_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .geometry_msg.Vector3 translation = 1;
    {PROTOBUF_FIELD_OFFSET(Transform, _impl_.translation_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .geometry_msg.Quaternion rotation = 2;
    {PROTOBUF_FIELD_OFFSET(Transform, _impl_.rotation_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::geometry_msg::Vector3>()},
    {::_pbi::TcParser::GetTable<::geometry_msg::Quaternion>()},
  }}, {{
  }},
};

::uint8_t* Transform::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:geometry_msg.Transform)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .geometry_msg.Vector3 translation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::translation(this),
        _Internal::translation(this).GetCachedSize(), target, stream);
  }

  // .geometry_msg.Quaternion rotation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geometry_msg.Transform)
  return target;
}

::size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geometry_msg.Transform)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .geometry_msg.Vector3 translation = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.translation_);
    }

    // .geometry_msg.Quaternion rotation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rotation_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Transform::_class_data_ = {
    Transform::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Transform::GetClassData() const {
  return &_class_data_;
}

void Transform::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Transform*>(&to_msg);
  auto& from = static_cast<const Transform&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:geometry_msg.Transform)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_translation()->::geometry_msg::Vector3::MergeFrom(
          from._internal_translation());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rotation()->::geometry_msg::Quaternion::MergeFrom(
          from._internal_rotation());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geometry_msg.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Transform::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Transform::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Transform::InternalSwap(Transform* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transform, _impl_.rotation_)
      + sizeof(Transform::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(Transform, _impl_.translation_)>(
          reinterpret_cast<char*>(&_impl_.translation_),
          reinterpret_cast<char*>(&other->_impl_.translation_));
}

::google::protobuf::Metadata Transform::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[10]);
}
// ===================================================================

class TransformStamped::_Internal {
 public:
  using HasBits = decltype(std::declval<TransformStamped>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TransformStamped, _impl_._has_bits_);
  static const ::std_msg::Header& header(const TransformStamped* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::geometry_msg::Transform& transform(const TransformStamped* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::std_msg::Header& TransformStamped::_Internal::header(const TransformStamped* msg) {
  return *msg->_impl_.header_;
}
const ::geometry_msg::Transform& TransformStamped::_Internal::transform(const TransformStamped* msg) {
  return *msg->_impl_.transform_;
}
void TransformStamped::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TransformStamped::TransformStamped(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:geometry_msg.TransformStamped)
}
inline PROTOBUF_NDEBUG_INLINE TransformStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        childframeid_(arena, from.childframeid_) {}

TransformStamped::TransformStamped(
    ::google::protobuf::Arena* arena,
    const TransformStamped& from)
    : ::google::protobuf::Message(arena) {
  TransformStamped* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::std_msg::Header>(arena, *from._impl_.header_)
                : nullptr;
  _impl_.transform_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::geometry_msg::Transform>(arena, *from._impl_.transform_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:geometry_msg.TransformStamped)
}
inline PROTOBUF_NDEBUG_INLINE TransformStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        childframeid_(arena) {}

inline void TransformStamped::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, transform_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::transform_));
}
TransformStamped::~TransformStamped() {
  // @@protoc_insertion_point(destructor:geometry_msg.TransformStamped)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TransformStamped::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.childframeid_.Destroy();
  delete _impl_.header_;
  delete _impl_.transform_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TransformStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:geometry_msg.TransformStamped)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.childframeid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.transform_ != nullptr);
      _impl_.transform_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TransformStamped::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 50, 2> TransformStamped::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TransformStamped, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TransformStamped_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .std_msg.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TransformStamped, _impl_.header_)}},
    // string childframeid = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TransformStamped, _impl_.childframeid_)}},
    // .geometry_msg.Transform transform = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(TransformStamped, _impl_.transform_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .std_msg.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(TransformStamped, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string childframeid = 2;
    {PROTOBUF_FIELD_OFFSET(TransformStamped, _impl_.childframeid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .geometry_msg.Transform transform = 3;
    {PROTOBUF_FIELD_OFFSET(TransformStamped, _impl_.transform_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::std_msg::Header>()},
    {::_pbi::TcParser::GetTable<::geometry_msg::Transform>()},
  }}, {{
    "\35\0\14\0\0\0\0\0"
    "geometry_msg.TransformStamped"
    "childframeid"
  }},
};

::uint8_t* TransformStamped::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:geometry_msg.TransformStamped)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .std_msg.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string childframeid = 2;
  if (!this->_internal_childframeid().empty()) {
    const std::string& _s = this->_internal_childframeid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "geometry_msg.TransformStamped.childframeid");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .geometry_msg.Transform transform = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geometry_msg.TransformStamped)
  return target;
}

::size_t TransformStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geometry_msg.TransformStamped)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string childframeid = 2;
  if (!this->_internal_childframeid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_childframeid());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .std_msg.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }

    // .geometry_msg.Transform transform = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.transform_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TransformStamped::_class_data_ = {
    TransformStamped::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TransformStamped::GetClassData() const {
  return &_class_data_;
}

void TransformStamped::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TransformStamped*>(&to_msg);
  auto& from = static_cast<const TransformStamped&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:geometry_msg.TransformStamped)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_childframeid().empty()) {
    _this->_internal_set_childframeid(from._internal_childframeid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::std_msg::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_transform()->::geometry_msg::Transform::MergeFrom(
          from._internal_transform());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TransformStamped::CopyFrom(const TransformStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geometry_msg.TransformStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TransformStamped::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TransformStamped::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TransformStamped::InternalSwap(TransformStamped* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.childframeid_, &other->_impl_.childframeid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransformStamped, _impl_.transform_)
      + sizeof(TransformStamped::_impl_.transform_)
      - PROTOBUF_FIELD_OFFSET(TransformStamped, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata TransformStamped::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[11]);
}
// ===================================================================

class Twist::_Internal {
 public:
  using HasBits = decltype(std::declval<Twist>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Twist, _impl_._has_bits_);
  static const ::geometry_msg::Vector3& linear(const Twist* msg);
  static void set_has_linear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::geometry_msg::Vector3& angular(const Twist* msg);
  static void set_has_angular(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::geometry_msg::Vector3& Twist::_Internal::linear(const Twist* msg) {
  return *msg->_impl_.linear_;
}
const ::geometry_msg::Vector3& Twist::_Internal::angular(const Twist* msg) {
  return *msg->_impl_.angular_;
}
Twist::Twist(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:geometry_msg.Twist)
}
inline PROTOBUF_NDEBUG_INLINE Twist::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Twist::Twist(
    ::google::protobuf::Arena* arena,
    const Twist& from)
    : ::google::protobuf::Message(arena) {
  Twist* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.linear_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::geometry_msg::Vector3>(arena, *from._impl_.linear_)
                : nullptr;
  _impl_.angular_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::geometry_msg::Vector3>(arena, *from._impl_.angular_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:geometry_msg.Twist)
}
inline PROTOBUF_NDEBUG_INLINE Twist::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Twist::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, linear_),
           0,
           offsetof(Impl_, angular_) -
               offsetof(Impl_, linear_) +
               sizeof(Impl_::angular_));
}
Twist::~Twist() {
  // @@protoc_insertion_point(destructor:geometry_msg.Twist)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Twist::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.linear_;
  delete _impl_.angular_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Twist::Clear() {
// @@protoc_insertion_point(message_clear_start:geometry_msg.Twist)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.linear_ != nullptr);
      _impl_.linear_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.angular_ != nullptr);
      _impl_.angular_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Twist::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Twist::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Twist, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Twist_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .geometry_msg.Vector3 angular = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Twist, _impl_.angular_)}},
    // .geometry_msg.Vector3 linear = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Twist, _impl_.linear_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .geometry_msg.Vector3 linear = 1;
    {PROTOBUF_FIELD_OFFSET(Twist, _impl_.linear_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .geometry_msg.Vector3 angular = 2;
    {PROTOBUF_FIELD_OFFSET(Twist, _impl_.angular_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::geometry_msg::Vector3>()},
    {::_pbi::TcParser::GetTable<::geometry_msg::Vector3>()},
  }}, {{
  }},
};

::uint8_t* Twist::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:geometry_msg.Twist)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .geometry_msg.Vector3 linear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::linear(this),
        _Internal::linear(this).GetCachedSize(), target, stream);
  }

  // .geometry_msg.Vector3 angular = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::angular(this),
        _Internal::angular(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geometry_msg.Twist)
  return target;
}

::size_t Twist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geometry_msg.Twist)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .geometry_msg.Vector3 linear = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.linear_);
    }

    // .geometry_msg.Vector3 angular = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.angular_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Twist::_class_data_ = {
    Twist::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Twist::GetClassData() const {
  return &_class_data_;
}

void Twist::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Twist*>(&to_msg);
  auto& from = static_cast<const Twist&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:geometry_msg.Twist)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_linear()->::geometry_msg::Vector3::MergeFrom(
          from._internal_linear());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_angular()->::geometry_msg::Vector3::MergeFrom(
          from._internal_angular());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Twist::CopyFrom(const Twist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geometry_msg.Twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Twist::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Twist::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Twist::InternalSwap(Twist* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Twist, _impl_.angular_)
      + sizeof(Twist::_impl_.angular_)
      - PROTOBUF_FIELD_OFFSET(Twist, _impl_.linear_)>(
          reinterpret_cast<char*>(&_impl_.linear_),
          reinterpret_cast<char*>(&other->_impl_.linear_));
}

::google::protobuf::Metadata Twist::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[12]);
}
// ===================================================================

class TwistStamped::_Internal {
 public:
  using HasBits = decltype(std::declval<TwistStamped>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TwistStamped, _impl_._has_bits_);
  static const ::std_msg::Header& header(const TwistStamped* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::geometry_msg::Twist& twist(const TwistStamped* msg);
  static void set_has_twist(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::std_msg::Header& TwistStamped::_Internal::header(const TwistStamped* msg) {
  return *msg->_impl_.header_;
}
const ::geometry_msg::Twist& TwistStamped::_Internal::twist(const TwistStamped* msg) {
  return *msg->_impl_.twist_;
}
void TwistStamped::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TwistStamped::TwistStamped(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:geometry_msg.TwistStamped)
}
inline PROTOBUF_NDEBUG_INLINE TwistStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TwistStamped::TwistStamped(
    ::google::protobuf::Arena* arena,
    const TwistStamped& from)
    : ::google::protobuf::Message(arena) {
  TwistStamped* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::std_msg::Header>(arena, *from._impl_.header_)
                : nullptr;
  _impl_.twist_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::geometry_msg::Twist>(arena, *from._impl_.twist_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:geometry_msg.TwistStamped)
}
inline PROTOBUF_NDEBUG_INLINE TwistStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TwistStamped::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, twist_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::twist_));
}
TwistStamped::~TwistStamped() {
  // @@protoc_insertion_point(destructor:geometry_msg.TwistStamped)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TwistStamped::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  delete _impl_.twist_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TwistStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:geometry_msg.TwistStamped)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.twist_ != nullptr);
      _impl_.twist_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TwistStamped::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> TwistStamped::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TwistStamped, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TwistStamped_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .geometry_msg.Twist twist = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(TwistStamped, _impl_.twist_)}},
    // .std_msg.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TwistStamped, _impl_.header_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .std_msg.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(TwistStamped, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .geometry_msg.Twist twist = 2;
    {PROTOBUF_FIELD_OFFSET(TwistStamped, _impl_.twist_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::std_msg::Header>()},
    {::_pbi::TcParser::GetTable<::geometry_msg::Twist>()},
  }}, {{
  }},
};

::uint8_t* TwistStamped::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:geometry_msg.TwistStamped)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .std_msg.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .geometry_msg.Twist twist = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::twist(this),
        _Internal::twist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geometry_msg.TwistStamped)
  return target;
}

::size_t TwistStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geometry_msg.TwistStamped)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .std_msg.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }

    // .geometry_msg.Twist twist = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.twist_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TwistStamped::_class_data_ = {
    TwistStamped::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TwistStamped::GetClassData() const {
  return &_class_data_;
}

void TwistStamped::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TwistStamped*>(&to_msg);
  auto& from = static_cast<const TwistStamped&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:geometry_msg.TwistStamped)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::std_msg::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_twist()->::geometry_msg::Twist::MergeFrom(
          from._internal_twist());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TwistStamped::CopyFrom(const TwistStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geometry_msg.TwistStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TwistStamped::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TwistStamped::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TwistStamped::InternalSwap(TwistStamped* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TwistStamped, _impl_.twist_)
      + sizeof(TwistStamped::_impl_.twist_)
      - PROTOBUF_FIELD_OFFSET(TwistStamped, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata TwistStamped::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[13]);
}
// ===================================================================

class TwistWithCovariance::_Internal {
 public:
  using HasBits = decltype(std::declval<TwistWithCovariance>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TwistWithCovariance, _impl_._has_bits_);
  static const ::geometry_msg::Twist& twist(const TwistWithCovariance* msg);
  static void set_has_twist(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::geometry_msg::Twist& TwistWithCovariance::_Internal::twist(const TwistWithCovariance* msg) {
  return *msg->_impl_.twist_;
}
TwistWithCovariance::TwistWithCovariance(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:geometry_msg.TwistWithCovariance)
}
inline PROTOBUF_NDEBUG_INLINE TwistWithCovariance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        covariance_{visibility, arena, from.covariance_} {}

TwistWithCovariance::TwistWithCovariance(
    ::google::protobuf::Arena* arena,
    const TwistWithCovariance& from)
    : ::google::protobuf::Message(arena) {
  TwistWithCovariance* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.twist_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::geometry_msg::Twist>(arena, *from._impl_.twist_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:geometry_msg.TwistWithCovariance)
}
inline PROTOBUF_NDEBUG_INLINE TwistWithCovariance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        covariance_{visibility, arena} {}

inline void TwistWithCovariance::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.twist_ = {};
}
TwistWithCovariance::~TwistWithCovariance() {
  // @@protoc_insertion_point(destructor:geometry_msg.TwistWithCovariance)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TwistWithCovariance::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.twist_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TwistWithCovariance::Clear() {
// @@protoc_insertion_point(message_clear_start:geometry_msg.TwistWithCovariance)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.covariance_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.twist_ != nullptr);
    _impl_.twist_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TwistWithCovariance::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> TwistWithCovariance::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TwistWithCovariance, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TwistWithCovariance_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated double covariance = 2;
    {::_pbi::TcParser::FastF64P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TwistWithCovariance, _impl_.covariance_)}},
    // .geometry_msg.Twist twist = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TwistWithCovariance, _impl_.twist_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .geometry_msg.Twist twist = 1;
    {PROTOBUF_FIELD_OFFSET(TwistWithCovariance, _impl_.twist_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated double covariance = 2;
    {PROTOBUF_FIELD_OFFSET(TwistWithCovariance, _impl_.covariance_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::geometry_msg::Twist>()},
  }}, {{
  }},
};

::uint8_t* TwistWithCovariance::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:geometry_msg.TwistWithCovariance)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .geometry_msg.Twist twist = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::twist(this),
        _Internal::twist(this).GetCachedSize(), target, stream);
  }

  // repeated double covariance = 2;
  if (this->_internal_covariance_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_covariance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geometry_msg.TwistWithCovariance)
  return target;
}

::size_t TwistWithCovariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geometry_msg.TwistWithCovariance)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double covariance = 2;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_covariance_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .geometry_msg.Twist twist = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.twist_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TwistWithCovariance::_class_data_ = {
    TwistWithCovariance::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TwistWithCovariance::GetClassData() const {
  return &_class_data_;
}

void TwistWithCovariance::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TwistWithCovariance*>(&to_msg);
  auto& from = static_cast<const TwistWithCovariance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:geometry_msg.TwistWithCovariance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_covariance()->MergeFrom(from._internal_covariance());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_twist()->::geometry_msg::Twist::MergeFrom(
        from._internal_twist());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TwistWithCovariance::CopyFrom(const TwistWithCovariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geometry_msg.TwistWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TwistWithCovariance::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TwistWithCovariance::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TwistWithCovariance::InternalSwap(TwistWithCovariance* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.covariance_.InternalSwap(&other->_impl_.covariance_);
  swap(_impl_.twist_, other->_impl_.twist_);
}

::google::protobuf::Metadata TwistWithCovariance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[14]);
}
// ===================================================================

class TwistWithCovarianceStamped::_Internal {
 public:
  using HasBits = decltype(std::declval<TwistWithCovarianceStamped>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TwistWithCovarianceStamped, _impl_._has_bits_);
  static const ::std_msg::Header& header(const TwistWithCovarianceStamped* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::geometry_msg::TwistWithCovariance& twist(const TwistWithCovarianceStamped* msg);
  static void set_has_twist(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::std_msg::Header& TwistWithCovarianceStamped::_Internal::header(const TwistWithCovarianceStamped* msg) {
  return *msg->_impl_.header_;
}
const ::geometry_msg::TwistWithCovariance& TwistWithCovarianceStamped::_Internal::twist(const TwistWithCovarianceStamped* msg) {
  return *msg->_impl_.twist_;
}
void TwistWithCovarianceStamped::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TwistWithCovarianceStamped::TwistWithCovarianceStamped(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:geometry_msg.TwistWithCovarianceStamped)
}
inline PROTOBUF_NDEBUG_INLINE TwistWithCovarianceStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TwistWithCovarianceStamped::TwistWithCovarianceStamped(
    ::google::protobuf::Arena* arena,
    const TwistWithCovarianceStamped& from)
    : ::google::protobuf::Message(arena) {
  TwistWithCovarianceStamped* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::std_msg::Header>(arena, *from._impl_.header_)
                : nullptr;
  _impl_.twist_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::geometry_msg::TwistWithCovariance>(arena, *from._impl_.twist_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:geometry_msg.TwistWithCovarianceStamped)
}
inline PROTOBUF_NDEBUG_INLINE TwistWithCovarianceStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TwistWithCovarianceStamped::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, twist_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::twist_));
}
TwistWithCovarianceStamped::~TwistWithCovarianceStamped() {
  // @@protoc_insertion_point(destructor:geometry_msg.TwistWithCovarianceStamped)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TwistWithCovarianceStamped::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  delete _impl_.twist_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TwistWithCovarianceStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:geometry_msg.TwistWithCovarianceStamped)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.twist_ != nullptr);
      _impl_.twist_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TwistWithCovarianceStamped::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> TwistWithCovarianceStamped::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TwistWithCovarianceStamped, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TwistWithCovarianceStamped_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .geometry_msg.TwistWithCovariance twist = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(TwistWithCovarianceStamped, _impl_.twist_)}},
    // .std_msg.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TwistWithCovarianceStamped, _impl_.header_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .std_msg.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(TwistWithCovarianceStamped, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .geometry_msg.TwistWithCovariance twist = 2;
    {PROTOBUF_FIELD_OFFSET(TwistWithCovarianceStamped, _impl_.twist_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::std_msg::Header>()},
    {::_pbi::TcParser::GetTable<::geometry_msg::TwistWithCovariance>()},
  }}, {{
  }},
};

::uint8_t* TwistWithCovarianceStamped::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:geometry_msg.TwistWithCovarianceStamped)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .std_msg.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .geometry_msg.TwistWithCovariance twist = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::twist(this),
        _Internal::twist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geometry_msg.TwistWithCovarianceStamped)
  return target;
}

::size_t TwistWithCovarianceStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geometry_msg.TwistWithCovarianceStamped)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .std_msg.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }

    // .geometry_msg.TwistWithCovariance twist = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.twist_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TwistWithCovarianceStamped::_class_data_ = {
    TwistWithCovarianceStamped::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TwistWithCovarianceStamped::GetClassData() const {
  return &_class_data_;
}

void TwistWithCovarianceStamped::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TwistWithCovarianceStamped*>(&to_msg);
  auto& from = static_cast<const TwistWithCovarianceStamped&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:geometry_msg.TwistWithCovarianceStamped)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::std_msg::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_twist()->::geometry_msg::TwistWithCovariance::MergeFrom(
          from._internal_twist());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TwistWithCovarianceStamped::CopyFrom(const TwistWithCovarianceStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geometry_msg.TwistWithCovarianceStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TwistWithCovarianceStamped::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TwistWithCovarianceStamped::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TwistWithCovarianceStamped::InternalSwap(TwistWithCovarianceStamped* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TwistWithCovarianceStamped, _impl_.twist_)
      + sizeof(TwistWithCovarianceStamped::_impl_.twist_)
      - PROTOBUF_FIELD_OFFSET(TwistWithCovarianceStamped, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata TwistWithCovarianceStamped::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[15]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace geometry_msg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
