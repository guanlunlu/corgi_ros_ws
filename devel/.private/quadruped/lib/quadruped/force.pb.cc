// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: force.proto

#include "force.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace force_msg {

inline constexpr LegForce::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : pose_x_{0},
        pose_y_{0},
        force_x_{0},
        force_y_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LegForce::LegForce(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LegForceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LegForceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LegForceDefaultTypeInternal() {}
  union {
    LegForce _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LegForceDefaultTypeInternal _LegForce_default_instance_;

inline constexpr Impedance::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : m_x_{0},
        m_y_{0},
        k0_x_{0},
        k0_y_{0},
        d_x_{0},
        d_y_{0},
        adaptive_kp_x_{0},
        adaptive_ki_x_{0},
        adaptive_kd_x_{0},
        adaptive_kp_y_{0},
        adaptive_ki_y_{0},
        adaptive_kd_y_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Impedance::Impedance(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ImpedanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImpedanceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImpedanceDefaultTypeInternal() {}
  union {
    Impedance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImpedanceDefaultTypeInternal _Impedance_default_instance_;

inline constexpr LegForceStamped::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        force_{},
        impedance_{},
        header_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR LegForceStamped::LegForceStamped(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LegForceStampedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LegForceStampedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LegForceStampedDefaultTypeInternal() {}
  union {
    LegForceStamped _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LegForceStampedDefaultTypeInternal _LegForceStamped_default_instance_;
}  // namespace force_msg
static ::_pb::Metadata file_level_metadata_force_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_force_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_force_2eproto = nullptr;
const ::uint32_t TableStruct_force_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::force_msg::Impedance, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::force_msg::Impedance, _impl_.m_x_),
    PROTOBUF_FIELD_OFFSET(::force_msg::Impedance, _impl_.m_y_),
    PROTOBUF_FIELD_OFFSET(::force_msg::Impedance, _impl_.k0_x_),
    PROTOBUF_FIELD_OFFSET(::force_msg::Impedance, _impl_.k0_y_),
    PROTOBUF_FIELD_OFFSET(::force_msg::Impedance, _impl_.d_x_),
    PROTOBUF_FIELD_OFFSET(::force_msg::Impedance, _impl_.d_y_),
    PROTOBUF_FIELD_OFFSET(::force_msg::Impedance, _impl_.adaptive_kp_x_),
    PROTOBUF_FIELD_OFFSET(::force_msg::Impedance, _impl_.adaptive_ki_x_),
    PROTOBUF_FIELD_OFFSET(::force_msg::Impedance, _impl_.adaptive_kd_x_),
    PROTOBUF_FIELD_OFFSET(::force_msg::Impedance, _impl_.adaptive_kp_y_),
    PROTOBUF_FIELD_OFFSET(::force_msg::Impedance, _impl_.adaptive_ki_y_),
    PROTOBUF_FIELD_OFFSET(::force_msg::Impedance, _impl_.adaptive_kd_y_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::force_msg::LegForce, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::force_msg::LegForce, _impl_.pose_x_),
    PROTOBUF_FIELD_OFFSET(::force_msg::LegForce, _impl_.pose_y_),
    PROTOBUF_FIELD_OFFSET(::force_msg::LegForce, _impl_.force_x_),
    PROTOBUF_FIELD_OFFSET(::force_msg::LegForce, _impl_.force_y_),
    PROTOBUF_FIELD_OFFSET(::force_msg::LegForceStamped, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::force_msg::LegForceStamped, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::force_msg::LegForceStamped, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::force_msg::LegForceStamped, _impl_.force_),
    PROTOBUF_FIELD_OFFSET(::force_msg::LegForceStamped, _impl_.impedance_),
    0,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::force_msg::Impedance)},
        {20, -1, -1, sizeof(::force_msg::LegForce)},
        {32, 43, -1, sizeof(::force_msg::LegForceStamped)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::force_msg::_Impedance_default_instance_._instance,
    &::force_msg::_LegForce_default_instance_._instance,
    &::force_msg::_LegForceStamped_default_instance_._instance,
};
const char descriptor_table_protodef_force_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\013force.proto\022\tforce_msg\032\tstd.proto\"\345\001\n\t"
    "Impedance\022\013\n\003M_x\030\001 \001(\002\022\013\n\003M_y\030\002 \001(\002\022\014\n\004K"
    "0_x\030\003 \001(\002\022\014\n\004K0_y\030\004 \001(\002\022\013\n\003D_x\030\005 \001(\002\022\013\n\003"
    "D_y\030\006 \001(\002\022\025\n\radaptive_kp_x\030\007 \001(\002\022\025\n\radap"
    "tive_ki_x\030\010 \001(\002\022\025\n\radaptive_kd_x\030\t \001(\002\022\025"
    "\n\radaptive_kp_y\030\n \001(\002\022\025\n\radaptive_ki_y\030\013"
    " \001(\002\022\025\n\radaptive_kd_y\030\014 \001(\002\"L\n\010LegForce\022"
    "\016\n\006pose_x\030\001 \001(\002\022\016\n\006pose_y\030\002 \001(\002\022\017\n\007force"
    "_x\030\003 \001(\002\022\017\n\007force_y\030\004 \001(\002\"\177\n\017LegForceSta"
    "mped\022\037\n\006header\030\001 \001(\0132\017.std_msg.Header\022\"\n"
    "\005force\030\002 \003(\0132\023.force_msg.LegForce\022\'\n\timp"
    "edance\030\003 \003(\0132\024.force_msg.Impedanceb\006prot"
    "o3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_force_2eproto_deps[1] =
    {
        &::descriptor_table_std_2eproto,
};
static ::absl::once_flag descriptor_table_force_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_force_2eproto = {
    false,
    false,
    482,
    descriptor_table_protodef_force_2eproto,
    "force.proto",
    &descriptor_table_force_2eproto_once,
    descriptor_table_force_2eproto_deps,
    1,
    3,
    schemas,
    file_default_instances,
    TableStruct_force_2eproto::offsets,
    file_level_metadata_force_2eproto,
    file_level_enum_descriptors_force_2eproto,
    file_level_service_descriptors_force_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_force_2eproto_getter() {
  return &descriptor_table_force_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_force_2eproto(&descriptor_table_force_2eproto);
namespace force_msg {
// ===================================================================

class Impedance::_Internal {
 public:
};

Impedance::Impedance(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:force_msg.Impedance)
}
Impedance::Impedance(
    ::google::protobuf::Arena* arena, const Impedance& from)
    : Impedance(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Impedance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Impedance::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, m_x_),
           0,
           offsetof(Impl_, adaptive_kd_y_) -
               offsetof(Impl_, m_x_) +
               sizeof(Impl_::adaptive_kd_y_));
}
Impedance::~Impedance() {
  // @@protoc_insertion_point(destructor:force_msg.Impedance)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Impedance::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Impedance::Clear() {
// @@protoc_insertion_point(message_clear_start:force_msg.Impedance)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.m_x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.adaptive_kd_y_) -
      reinterpret_cast<char*>(&_impl_.m_x_)) + sizeof(_impl_.adaptive_kd_y_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Impedance::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 0, 0, 2> Impedance::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Impedance_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float M_x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Impedance, _impl_.m_x_)}},
    // float M_y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Impedance, _impl_.m_y_)}},
    // float K0_x = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Impedance, _impl_.k0_x_)}},
    // float K0_y = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Impedance, _impl_.k0_y_)}},
    // float D_x = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(Impedance, _impl_.d_x_)}},
    // float D_y = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(Impedance, _impl_.d_y_)}},
    // float adaptive_kp_x = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(Impedance, _impl_.adaptive_kp_x_)}},
    // float adaptive_ki_x = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(Impedance, _impl_.adaptive_ki_x_)}},
    // float adaptive_kd_x = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(Impedance, _impl_.adaptive_kd_x_)}},
    // float adaptive_kp_y = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 63, 0, PROTOBUF_FIELD_OFFSET(Impedance, _impl_.adaptive_kp_y_)}},
    // float adaptive_ki_y = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(Impedance, _impl_.adaptive_ki_y_)}},
    // float adaptive_kd_y = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 63, 0, PROTOBUF_FIELD_OFFSET(Impedance, _impl_.adaptive_kd_y_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float M_x = 1;
    {PROTOBUF_FIELD_OFFSET(Impedance, _impl_.m_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float M_y = 2;
    {PROTOBUF_FIELD_OFFSET(Impedance, _impl_.m_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float K0_x = 3;
    {PROTOBUF_FIELD_OFFSET(Impedance, _impl_.k0_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float K0_y = 4;
    {PROTOBUF_FIELD_OFFSET(Impedance, _impl_.k0_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float D_x = 5;
    {PROTOBUF_FIELD_OFFSET(Impedance, _impl_.d_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float D_y = 6;
    {PROTOBUF_FIELD_OFFSET(Impedance, _impl_.d_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float adaptive_kp_x = 7;
    {PROTOBUF_FIELD_OFFSET(Impedance, _impl_.adaptive_kp_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float adaptive_ki_x = 8;
    {PROTOBUF_FIELD_OFFSET(Impedance, _impl_.adaptive_ki_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float adaptive_kd_x = 9;
    {PROTOBUF_FIELD_OFFSET(Impedance, _impl_.adaptive_kd_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float adaptive_kp_y = 10;
    {PROTOBUF_FIELD_OFFSET(Impedance, _impl_.adaptive_kp_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float adaptive_ki_y = 11;
    {PROTOBUF_FIELD_OFFSET(Impedance, _impl_.adaptive_ki_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float adaptive_kd_y = 12;
    {PROTOBUF_FIELD_OFFSET(Impedance, _impl_.adaptive_kd_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Impedance::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:force_msg.Impedance)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float M_x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_m_x = this->_internal_m_x();
  ::uint32_t raw_m_x;
  memcpy(&raw_m_x, &tmp_m_x, sizeof(tmp_m_x));
  if (raw_m_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_m_x(), target);
  }

  // float M_y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_m_y = this->_internal_m_y();
  ::uint32_t raw_m_y;
  memcpy(&raw_m_y, &tmp_m_y, sizeof(tmp_m_y));
  if (raw_m_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_m_y(), target);
  }

  // float K0_x = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_k0_x = this->_internal_k0_x();
  ::uint32_t raw_k0_x;
  memcpy(&raw_k0_x, &tmp_k0_x, sizeof(tmp_k0_x));
  if (raw_k0_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_k0_x(), target);
  }

  // float K0_y = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_k0_y = this->_internal_k0_y();
  ::uint32_t raw_k0_y;
  memcpy(&raw_k0_y, &tmp_k0_y, sizeof(tmp_k0_y));
  if (raw_k0_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_k0_y(), target);
  }

  // float D_x = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_d_x = this->_internal_d_x();
  ::uint32_t raw_d_x;
  memcpy(&raw_d_x, &tmp_d_x, sizeof(tmp_d_x));
  if (raw_d_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_d_x(), target);
  }

  // float D_y = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_d_y = this->_internal_d_y();
  ::uint32_t raw_d_y;
  memcpy(&raw_d_y, &tmp_d_y, sizeof(tmp_d_y));
  if (raw_d_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_d_y(), target);
  }

  // float adaptive_kp_x = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_adaptive_kp_x = this->_internal_adaptive_kp_x();
  ::uint32_t raw_adaptive_kp_x;
  memcpy(&raw_adaptive_kp_x, &tmp_adaptive_kp_x, sizeof(tmp_adaptive_kp_x));
  if (raw_adaptive_kp_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_adaptive_kp_x(), target);
  }

  // float adaptive_ki_x = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_adaptive_ki_x = this->_internal_adaptive_ki_x();
  ::uint32_t raw_adaptive_ki_x;
  memcpy(&raw_adaptive_ki_x, &tmp_adaptive_ki_x, sizeof(tmp_adaptive_ki_x));
  if (raw_adaptive_ki_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_adaptive_ki_x(), target);
  }

  // float adaptive_kd_x = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_adaptive_kd_x = this->_internal_adaptive_kd_x();
  ::uint32_t raw_adaptive_kd_x;
  memcpy(&raw_adaptive_kd_x, &tmp_adaptive_kd_x, sizeof(tmp_adaptive_kd_x));
  if (raw_adaptive_kd_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_adaptive_kd_x(), target);
  }

  // float adaptive_kp_y = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_adaptive_kp_y = this->_internal_adaptive_kp_y();
  ::uint32_t raw_adaptive_kp_y;
  memcpy(&raw_adaptive_kp_y, &tmp_adaptive_kp_y, sizeof(tmp_adaptive_kp_y));
  if (raw_adaptive_kp_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        10, this->_internal_adaptive_kp_y(), target);
  }

  // float adaptive_ki_y = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_adaptive_ki_y = this->_internal_adaptive_ki_y();
  ::uint32_t raw_adaptive_ki_y;
  memcpy(&raw_adaptive_ki_y, &tmp_adaptive_ki_y, sizeof(tmp_adaptive_ki_y));
  if (raw_adaptive_ki_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        11, this->_internal_adaptive_ki_y(), target);
  }

  // float adaptive_kd_y = 12;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_adaptive_kd_y = this->_internal_adaptive_kd_y();
  ::uint32_t raw_adaptive_kd_y;
  memcpy(&raw_adaptive_kd_y, &tmp_adaptive_kd_y, sizeof(tmp_adaptive_kd_y));
  if (raw_adaptive_kd_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        12, this->_internal_adaptive_kd_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:force_msg.Impedance)
  return target;
}

::size_t Impedance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:force_msg.Impedance)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float M_x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_m_x = this->_internal_m_x();
  ::uint32_t raw_m_x;
  memcpy(&raw_m_x, &tmp_m_x, sizeof(tmp_m_x));
  if (raw_m_x != 0) {
    total_size += 5;
  }

  // float M_y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_m_y = this->_internal_m_y();
  ::uint32_t raw_m_y;
  memcpy(&raw_m_y, &tmp_m_y, sizeof(tmp_m_y));
  if (raw_m_y != 0) {
    total_size += 5;
  }

  // float K0_x = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_k0_x = this->_internal_k0_x();
  ::uint32_t raw_k0_x;
  memcpy(&raw_k0_x, &tmp_k0_x, sizeof(tmp_k0_x));
  if (raw_k0_x != 0) {
    total_size += 5;
  }

  // float K0_y = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_k0_y = this->_internal_k0_y();
  ::uint32_t raw_k0_y;
  memcpy(&raw_k0_y, &tmp_k0_y, sizeof(tmp_k0_y));
  if (raw_k0_y != 0) {
    total_size += 5;
  }

  // float D_x = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_d_x = this->_internal_d_x();
  ::uint32_t raw_d_x;
  memcpy(&raw_d_x, &tmp_d_x, sizeof(tmp_d_x));
  if (raw_d_x != 0) {
    total_size += 5;
  }

  // float D_y = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_d_y = this->_internal_d_y();
  ::uint32_t raw_d_y;
  memcpy(&raw_d_y, &tmp_d_y, sizeof(tmp_d_y));
  if (raw_d_y != 0) {
    total_size += 5;
  }

  // float adaptive_kp_x = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_adaptive_kp_x = this->_internal_adaptive_kp_x();
  ::uint32_t raw_adaptive_kp_x;
  memcpy(&raw_adaptive_kp_x, &tmp_adaptive_kp_x, sizeof(tmp_adaptive_kp_x));
  if (raw_adaptive_kp_x != 0) {
    total_size += 5;
  }

  // float adaptive_ki_x = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_adaptive_ki_x = this->_internal_adaptive_ki_x();
  ::uint32_t raw_adaptive_ki_x;
  memcpy(&raw_adaptive_ki_x, &tmp_adaptive_ki_x, sizeof(tmp_adaptive_ki_x));
  if (raw_adaptive_ki_x != 0) {
    total_size += 5;
  }

  // float adaptive_kd_x = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_adaptive_kd_x = this->_internal_adaptive_kd_x();
  ::uint32_t raw_adaptive_kd_x;
  memcpy(&raw_adaptive_kd_x, &tmp_adaptive_kd_x, sizeof(tmp_adaptive_kd_x));
  if (raw_adaptive_kd_x != 0) {
    total_size += 5;
  }

  // float adaptive_kp_y = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_adaptive_kp_y = this->_internal_adaptive_kp_y();
  ::uint32_t raw_adaptive_kp_y;
  memcpy(&raw_adaptive_kp_y, &tmp_adaptive_kp_y, sizeof(tmp_adaptive_kp_y));
  if (raw_adaptive_kp_y != 0) {
    total_size += 5;
  }

  // float adaptive_ki_y = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_adaptive_ki_y = this->_internal_adaptive_ki_y();
  ::uint32_t raw_adaptive_ki_y;
  memcpy(&raw_adaptive_ki_y, &tmp_adaptive_ki_y, sizeof(tmp_adaptive_ki_y));
  if (raw_adaptive_ki_y != 0) {
    total_size += 5;
  }

  // float adaptive_kd_y = 12;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_adaptive_kd_y = this->_internal_adaptive_kd_y();
  ::uint32_t raw_adaptive_kd_y;
  memcpy(&raw_adaptive_kd_y, &tmp_adaptive_kd_y, sizeof(tmp_adaptive_kd_y));
  if (raw_adaptive_kd_y != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Impedance::_class_data_ = {
    Impedance::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Impedance::GetClassData() const {
  return &_class_data_;
}

void Impedance::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Impedance*>(&to_msg);
  auto& from = static_cast<const Impedance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:force_msg.Impedance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_m_x = from._internal_m_x();
  ::uint32_t raw_m_x;
  memcpy(&raw_m_x, &tmp_m_x, sizeof(tmp_m_x));
  if (raw_m_x != 0) {
    _this->_internal_set_m_x(from._internal_m_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_m_y = from._internal_m_y();
  ::uint32_t raw_m_y;
  memcpy(&raw_m_y, &tmp_m_y, sizeof(tmp_m_y));
  if (raw_m_y != 0) {
    _this->_internal_set_m_y(from._internal_m_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_k0_x = from._internal_k0_x();
  ::uint32_t raw_k0_x;
  memcpy(&raw_k0_x, &tmp_k0_x, sizeof(tmp_k0_x));
  if (raw_k0_x != 0) {
    _this->_internal_set_k0_x(from._internal_k0_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_k0_y = from._internal_k0_y();
  ::uint32_t raw_k0_y;
  memcpy(&raw_k0_y, &tmp_k0_y, sizeof(tmp_k0_y));
  if (raw_k0_y != 0) {
    _this->_internal_set_k0_y(from._internal_k0_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_d_x = from._internal_d_x();
  ::uint32_t raw_d_x;
  memcpy(&raw_d_x, &tmp_d_x, sizeof(tmp_d_x));
  if (raw_d_x != 0) {
    _this->_internal_set_d_x(from._internal_d_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_d_y = from._internal_d_y();
  ::uint32_t raw_d_y;
  memcpy(&raw_d_y, &tmp_d_y, sizeof(tmp_d_y));
  if (raw_d_y != 0) {
    _this->_internal_set_d_y(from._internal_d_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_adaptive_kp_x = from._internal_adaptive_kp_x();
  ::uint32_t raw_adaptive_kp_x;
  memcpy(&raw_adaptive_kp_x, &tmp_adaptive_kp_x, sizeof(tmp_adaptive_kp_x));
  if (raw_adaptive_kp_x != 0) {
    _this->_internal_set_adaptive_kp_x(from._internal_adaptive_kp_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_adaptive_ki_x = from._internal_adaptive_ki_x();
  ::uint32_t raw_adaptive_ki_x;
  memcpy(&raw_adaptive_ki_x, &tmp_adaptive_ki_x, sizeof(tmp_adaptive_ki_x));
  if (raw_adaptive_ki_x != 0) {
    _this->_internal_set_adaptive_ki_x(from._internal_adaptive_ki_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_adaptive_kd_x = from._internal_adaptive_kd_x();
  ::uint32_t raw_adaptive_kd_x;
  memcpy(&raw_adaptive_kd_x, &tmp_adaptive_kd_x, sizeof(tmp_adaptive_kd_x));
  if (raw_adaptive_kd_x != 0) {
    _this->_internal_set_adaptive_kd_x(from._internal_adaptive_kd_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_adaptive_kp_y = from._internal_adaptive_kp_y();
  ::uint32_t raw_adaptive_kp_y;
  memcpy(&raw_adaptive_kp_y, &tmp_adaptive_kp_y, sizeof(tmp_adaptive_kp_y));
  if (raw_adaptive_kp_y != 0) {
    _this->_internal_set_adaptive_kp_y(from._internal_adaptive_kp_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_adaptive_ki_y = from._internal_adaptive_ki_y();
  ::uint32_t raw_adaptive_ki_y;
  memcpy(&raw_adaptive_ki_y, &tmp_adaptive_ki_y, sizeof(tmp_adaptive_ki_y));
  if (raw_adaptive_ki_y != 0) {
    _this->_internal_set_adaptive_ki_y(from._internal_adaptive_ki_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_adaptive_kd_y = from._internal_adaptive_kd_y();
  ::uint32_t raw_adaptive_kd_y;
  memcpy(&raw_adaptive_kd_y, &tmp_adaptive_kd_y, sizeof(tmp_adaptive_kd_y));
  if (raw_adaptive_kd_y != 0) {
    _this->_internal_set_adaptive_kd_y(from._internal_adaptive_kd_y());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Impedance::CopyFrom(const Impedance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:force_msg.Impedance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Impedance::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Impedance::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Impedance::InternalSwap(Impedance* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Impedance, _impl_.adaptive_kd_y_)
      + sizeof(Impedance::_impl_.adaptive_kd_y_)
      - PROTOBUF_FIELD_OFFSET(Impedance, _impl_.m_x_)>(
          reinterpret_cast<char*>(&_impl_.m_x_),
          reinterpret_cast<char*>(&other->_impl_.m_x_));
}

::google::protobuf::Metadata Impedance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_force_2eproto_getter, &descriptor_table_force_2eproto_once,
      file_level_metadata_force_2eproto[0]);
}
// ===================================================================

class LegForce::_Internal {
 public:
};

LegForce::LegForce(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:force_msg.LegForce)
}
LegForce::LegForce(
    ::google::protobuf::Arena* arena, const LegForce& from)
    : LegForce(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE LegForce::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LegForce::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pose_x_),
           0,
           offsetof(Impl_, force_y_) -
               offsetof(Impl_, pose_x_) +
               sizeof(Impl_::force_y_));
}
LegForce::~LegForce() {
  // @@protoc_insertion_point(destructor:force_msg.LegForce)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LegForce::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LegForce::Clear() {
// @@protoc_insertion_point(message_clear_start:force_msg.LegForce)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pose_x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.force_y_) -
      reinterpret_cast<char*>(&_impl_.pose_x_)) + sizeof(_impl_.force_y_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LegForce::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> LegForce::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LegForce_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float force_y = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(LegForce, _impl_.force_y_)}},
    // float pose_x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(LegForce, _impl_.pose_x_)}},
    // float pose_y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(LegForce, _impl_.pose_y_)}},
    // float force_x = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(LegForce, _impl_.force_x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float pose_x = 1;
    {PROTOBUF_FIELD_OFFSET(LegForce, _impl_.pose_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float pose_y = 2;
    {PROTOBUF_FIELD_OFFSET(LegForce, _impl_.pose_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float force_x = 3;
    {PROTOBUF_FIELD_OFFSET(LegForce, _impl_.force_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float force_y = 4;
    {PROTOBUF_FIELD_OFFSET(LegForce, _impl_.force_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* LegForce::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:force_msg.LegForce)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float pose_x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pose_x = this->_internal_pose_x();
  ::uint32_t raw_pose_x;
  memcpy(&raw_pose_x, &tmp_pose_x, sizeof(tmp_pose_x));
  if (raw_pose_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_pose_x(), target);
  }

  // float pose_y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pose_y = this->_internal_pose_y();
  ::uint32_t raw_pose_y;
  memcpy(&raw_pose_y, &tmp_pose_y, sizeof(tmp_pose_y));
  if (raw_pose_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_pose_y(), target);
  }

  // float force_x = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_force_x = this->_internal_force_x();
  ::uint32_t raw_force_x;
  memcpy(&raw_force_x, &tmp_force_x, sizeof(tmp_force_x));
  if (raw_force_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_force_x(), target);
  }

  // float force_y = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_force_y = this->_internal_force_y();
  ::uint32_t raw_force_y;
  memcpy(&raw_force_y, &tmp_force_y, sizeof(tmp_force_y));
  if (raw_force_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_force_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:force_msg.LegForce)
  return target;
}

::size_t LegForce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:force_msg.LegForce)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float pose_x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pose_x = this->_internal_pose_x();
  ::uint32_t raw_pose_x;
  memcpy(&raw_pose_x, &tmp_pose_x, sizeof(tmp_pose_x));
  if (raw_pose_x != 0) {
    total_size += 5;
  }

  // float pose_y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pose_y = this->_internal_pose_y();
  ::uint32_t raw_pose_y;
  memcpy(&raw_pose_y, &tmp_pose_y, sizeof(tmp_pose_y));
  if (raw_pose_y != 0) {
    total_size += 5;
  }

  // float force_x = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_force_x = this->_internal_force_x();
  ::uint32_t raw_force_x;
  memcpy(&raw_force_x, &tmp_force_x, sizeof(tmp_force_x));
  if (raw_force_x != 0) {
    total_size += 5;
  }

  // float force_y = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_force_y = this->_internal_force_y();
  ::uint32_t raw_force_y;
  memcpy(&raw_force_y, &tmp_force_y, sizeof(tmp_force_y));
  if (raw_force_y != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LegForce::_class_data_ = {
    LegForce::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LegForce::GetClassData() const {
  return &_class_data_;
}

void LegForce::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LegForce*>(&to_msg);
  auto& from = static_cast<const LegForce&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:force_msg.LegForce)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pose_x = from._internal_pose_x();
  ::uint32_t raw_pose_x;
  memcpy(&raw_pose_x, &tmp_pose_x, sizeof(tmp_pose_x));
  if (raw_pose_x != 0) {
    _this->_internal_set_pose_x(from._internal_pose_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pose_y = from._internal_pose_y();
  ::uint32_t raw_pose_y;
  memcpy(&raw_pose_y, &tmp_pose_y, sizeof(tmp_pose_y));
  if (raw_pose_y != 0) {
    _this->_internal_set_pose_y(from._internal_pose_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_force_x = from._internal_force_x();
  ::uint32_t raw_force_x;
  memcpy(&raw_force_x, &tmp_force_x, sizeof(tmp_force_x));
  if (raw_force_x != 0) {
    _this->_internal_set_force_x(from._internal_force_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_force_y = from._internal_force_y();
  ::uint32_t raw_force_y;
  memcpy(&raw_force_y, &tmp_force_y, sizeof(tmp_force_y));
  if (raw_force_y != 0) {
    _this->_internal_set_force_y(from._internal_force_y());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LegForce::CopyFrom(const LegForce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:force_msg.LegForce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LegForce::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LegForce::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LegForce::InternalSwap(LegForce* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LegForce, _impl_.force_y_)
      + sizeof(LegForce::_impl_.force_y_)
      - PROTOBUF_FIELD_OFFSET(LegForce, _impl_.pose_x_)>(
          reinterpret_cast<char*>(&_impl_.pose_x_),
          reinterpret_cast<char*>(&other->_impl_.pose_x_));
}

::google::protobuf::Metadata LegForce::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_force_2eproto_getter, &descriptor_table_force_2eproto_once,
      file_level_metadata_force_2eproto[1]);
}
// ===================================================================

class LegForceStamped::_Internal {
 public:
  using HasBits = decltype(std::declval<LegForceStamped>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LegForceStamped, _impl_._has_bits_);
  static const ::std_msg::Header& header(const LegForceStamped* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::std_msg::Header& LegForceStamped::_Internal::header(const LegForceStamped* msg) {
  return *msg->_impl_.header_;
}
void LegForceStamped::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LegForceStamped::LegForceStamped(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:force_msg.LegForceStamped)
}
inline PROTOBUF_NDEBUG_INLINE LegForceStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        force_{visibility, arena, from.force_},
        impedance_{visibility, arena, from.impedance_} {}

LegForceStamped::LegForceStamped(
    ::google::protobuf::Arena* arena,
    const LegForceStamped& from)
    : ::google::protobuf::Message(arena) {
  LegForceStamped* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::std_msg::Header>(arena, *from._impl_.header_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:force_msg.LegForceStamped)
}
inline PROTOBUF_NDEBUG_INLINE LegForceStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        force_{visibility, arena},
        impedance_{visibility, arena} {}

inline void LegForceStamped::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.header_ = {};
}
LegForceStamped::~LegForceStamped() {
  // @@protoc_insertion_point(destructor:force_msg.LegForceStamped)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LegForceStamped::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LegForceStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:force_msg.LegForceStamped)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.force_.Clear();
  _impl_.impedance_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LegForceStamped::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> LegForceStamped::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LegForceStamped, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LegForceStamped_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .std_msg.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LegForceStamped, _impl_.header_)}},
    // repeated .force_msg.LegForce force = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(LegForceStamped, _impl_.force_)}},
    // repeated .force_msg.Impedance impedance = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(LegForceStamped, _impl_.impedance_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .std_msg.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(LegForceStamped, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .force_msg.LegForce force = 2;
    {PROTOBUF_FIELD_OFFSET(LegForceStamped, _impl_.force_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .force_msg.Impedance impedance = 3;
    {PROTOBUF_FIELD_OFFSET(LegForceStamped, _impl_.impedance_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::std_msg::Header>()},
    {::_pbi::TcParser::GetTable<::force_msg::LegForce>()},
    {::_pbi::TcParser::GetTable<::force_msg::Impedance>()},
  }}, {{
  }},
};

::uint8_t* LegForceStamped::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:force_msg.LegForceStamped)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .std_msg.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .force_msg.LegForce force = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_force_size()); i < n; i++) {
    const auto& repfield = this->_internal_force().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .force_msg.Impedance impedance = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_impedance_size()); i < n; i++) {
    const auto& repfield = this->_internal_impedance().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:force_msg.LegForceStamped)
  return target;
}

::size_t LegForceStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:force_msg.LegForceStamped)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .force_msg.LegForce force = 2;
  total_size += 1UL * this->_internal_force_size();
  for (const auto& msg : this->_internal_force()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .force_msg.Impedance impedance = 3;
  total_size += 1UL * this->_internal_impedance_size();
  for (const auto& msg : this->_internal_impedance()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .std_msg.Header header = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LegForceStamped::_class_data_ = {
    LegForceStamped::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LegForceStamped::GetClassData() const {
  return &_class_data_;
}

void LegForceStamped::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LegForceStamped*>(&to_msg);
  auto& from = static_cast<const LegForceStamped&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:force_msg.LegForceStamped)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_force()->MergeFrom(
      from._internal_force());
  _this->_internal_mutable_impedance()->MergeFrom(
      from._internal_impedance());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_header()->::std_msg::Header::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LegForceStamped::CopyFrom(const LegForceStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:force_msg.LegForceStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LegForceStamped::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LegForceStamped::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LegForceStamped::InternalSwap(LegForceStamped* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.force_.InternalSwap(&other->_impl_.force_);
  _impl_.impedance_.InternalSwap(&other->_impl_.impedance_);
  swap(_impl_.header_, other->_impl_.header_);
}

::google::protobuf::Metadata LegForceStamped::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_force_2eproto_getter, &descriptor_table_force_2eproto_once,
      file_level_metadata_force_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace force_msg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
