// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

#include "sensor.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace sensor_msg {

inline constexpr SensorRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : mode_{static_cast< ::sensor_msg::SensorMode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SensorRequest::SensorRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SensorRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorRequestDefaultTypeInternal() {}
  union {
    SensorRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorRequestDefaultTypeInternal _SensorRequest_default_instance_;

inline constexpr SensorReply::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : mode_{static_cast< ::sensor_msg::SensorMode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SensorReply::SensorReply(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SensorReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorReplyDefaultTypeInternal() {}
  union {
    SensorReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorReplyDefaultTypeInternal _SensorReply_default_instance_;

inline constexpr Lidar::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        dist_{},
        header_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Lidar::Lidar(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LidarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LidarDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LidarDefaultTypeInternal() {}
  union {
    Lidar _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LidarDefaultTypeInternal _Lidar_default_instance_;

inline constexpr IMU::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        covariance_{},
        header_{nullptr},
        acceleration_{nullptr},
        twist_{nullptr},
        orientation_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR IMU::IMU(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct IMUDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMUDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMUDefaultTypeInternal() {}
  union {
    IMU _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMUDefaultTypeInternal _IMU_default_instance_;

inline constexpr Odometry::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        position_{nullptr},
        twist_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Odometry::Odometry(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OdometryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OdometryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OdometryDefaultTypeInternal() {}
  union {
    Odometry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OdometryDefaultTypeInternal _Odometry_default_instance_;
}  // namespace sensor_msg
static ::_pb::Metadata file_level_metadata_sensor_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_sensor_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sensor_2eproto = nullptr;
const ::uint32_t TableStruct_sensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::sensor_msg::IMU, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensor_msg::IMU, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensor_msg::IMU, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::sensor_msg::IMU, _impl_.acceleration_),
    PROTOBUF_FIELD_OFFSET(::sensor_msg::IMU, _impl_.twist_),
    PROTOBUF_FIELD_OFFSET(::sensor_msg::IMU, _impl_.orientation_),
    PROTOBUF_FIELD_OFFSET(::sensor_msg::IMU, _impl_.covariance_),
    0,
    1,
    2,
    3,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::sensor_msg::Odometry, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensor_msg::Odometry, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensor_msg::Odometry, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::sensor_msg::Odometry, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::sensor_msg::Odometry, _impl_.twist_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::sensor_msg::Lidar, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensor_msg::Lidar, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensor_msg::Lidar, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::sensor_msg::Lidar, _impl_.dist_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sensor_msg::SensorRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensor_msg::SensorRequest, _impl_.mode_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sensor_msg::SensorReply, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensor_msg::SensorReply, _impl_.mode_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 13, -1, sizeof(::sensor_msg::IMU)},
        {18, 29, -1, sizeof(::sensor_msg::Odometry)},
        {32, 42, -1, sizeof(::sensor_msg::Lidar)},
        {44, -1, -1, sizeof(::sensor_msg::SensorRequest)},
        {53, -1, -1, sizeof(::sensor_msg::SensorReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::sensor_msg::_IMU_default_instance_._instance,
    &::sensor_msg::_Odometry_default_instance_._instance,
    &::sensor_msg::_Lidar_default_instance_._instance,
    &::sensor_msg::_SensorRequest_default_instance_._instance,
    &::sensor_msg::_SensorReply_default_instance_._instance,
};
const char descriptor_table_protodef_sensor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\014sensor.proto\022\nsensor_msg\032\016geometry.pro"
    "to\032\tstd.proto\"\274\001\n\003IMU\022\037\n\006header\030\001 \001(\0132\017."
    "std_msg.Header\022+\n\014acceleration\030\002 \001(\0132\025.g"
    "eometry_msg.Vector3\022$\n\005twist\030\003 \001(\0132\025.geo"
    "metry_msg.Vector3\022-\n\013orientation\030\004 \001(\0132\030"
    ".geometry_msg.Quaternion\022\022\n\ncovariance\030\005"
    " \003(\001\"\221\001\n\010Odometry\022\037\n\006header\030\001 \001(\0132\017.std_"
    "msg.Header\0222\n\010position\030\002 \001(\0132 .geometry_"
    "msg.PoseWithCovariance\0220\n\005twist\030\003 \001(\0132!."
    "geometry_msg.TwistWithCovariance\"6\n\005Lida"
    "r\022\037\n\006header\030\001 \001(\0132\017.std_msg.Header\022\014\n\004di"
    "st\030\002 \003(\001\"5\n\rSensorRequest\022$\n\004mode\030\001 \001(\0162"
    "\026.sensor_msg.SensorMode\"3\n\013SensorReply\022$"
    "\n\004mode\030\002 \001(\0162\026.sensor_msg.SensorMode*>\n\n"
    "SensorMode\022\010\n\004REST\020\000\022\017\n\013CALIBRATION\020\001\022\n\n"
    "\006SENSOR\020\002\022\t\n\005RESET\020\003b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_sensor_2eproto_deps[2] =
    {
        &::descriptor_table_geometry_2eproto,
        &::descriptor_table_std_2eproto,
};
static ::absl::once_flag descriptor_table_sensor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sensor_2eproto = {
    false,
    false,
    628,
    descriptor_table_protodef_sensor_2eproto,
    "sensor.proto",
    &descriptor_table_sensor_2eproto_once,
    descriptor_table_sensor_2eproto_deps,
    2,
    5,
    schemas,
    file_default_instances,
    TableStruct_sensor_2eproto::offsets,
    file_level_metadata_sensor_2eproto,
    file_level_enum_descriptors_sensor_2eproto,
    file_level_service_descriptors_sensor_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sensor_2eproto_getter() {
  return &descriptor_table_sensor_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sensor_2eproto(&descriptor_table_sensor_2eproto);
namespace sensor_msg {
const ::google::protobuf::EnumDescriptor* SensorMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensor_2eproto);
  return file_level_enum_descriptors_sensor_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t SensorMode_internal_data_[] = {
    262144u, 0u, };
bool SensorMode_IsValid(int value) {
  return 0 <= value && value <= 3;
}
// ===================================================================

class IMU::_Internal {
 public:
  using HasBits = decltype(std::declval<IMU>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IMU, _impl_._has_bits_);
  static const ::std_msg::Header& header(const IMU* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::geometry_msg::Vector3& acceleration(const IMU* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::geometry_msg::Vector3& twist(const IMU* msg);
  static void set_has_twist(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::geometry_msg::Quaternion& orientation(const IMU* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::std_msg::Header& IMU::_Internal::header(const IMU* msg) {
  return *msg->_impl_.header_;
}
const ::geometry_msg::Vector3& IMU::_Internal::acceleration(const IMU* msg) {
  return *msg->_impl_.acceleration_;
}
const ::geometry_msg::Vector3& IMU::_Internal::twist(const IMU* msg) {
  return *msg->_impl_.twist_;
}
const ::geometry_msg::Quaternion& IMU::_Internal::orientation(const IMU* msg) {
  return *msg->_impl_.orientation_;
}
void IMU::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void IMU::clear_acceleration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.acceleration_ != nullptr) _impl_.acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void IMU::clear_twist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.twist_ != nullptr) _impl_.twist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void IMU::clear_orientation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.orientation_ != nullptr) _impl_.orientation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
IMU::IMU(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensor_msg.IMU)
}
inline PROTOBUF_NDEBUG_INLINE IMU::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        covariance_{visibility, arena, from.covariance_} {}

IMU::IMU(
    ::google::protobuf::Arena* arena,
    const IMU& from)
    : ::google::protobuf::Message(arena) {
  IMU* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::std_msg::Header>(arena, *from._impl_.header_)
                : nullptr;
  _impl_.acceleration_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::geometry_msg::Vector3>(arena, *from._impl_.acceleration_)
                : nullptr;
  _impl_.twist_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::geometry_msg::Vector3>(arena, *from._impl_.twist_)
                : nullptr;
  _impl_.orientation_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::geometry_msg::Quaternion>(arena, *from._impl_.orientation_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensor_msg.IMU)
}
inline PROTOBUF_NDEBUG_INLINE IMU::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        covariance_{visibility, arena} {}

inline void IMU::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, orientation_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::orientation_));
}
IMU::~IMU() {
  // @@protoc_insertion_point(destructor:sensor_msg.IMU)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void IMU::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  delete _impl_.acceleration_;
  delete _impl_.twist_;
  delete _impl_.orientation_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void IMU::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msg.IMU)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.covariance_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.acceleration_ != nullptr);
      _impl_.acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.twist_ != nullptr);
      _impl_.twist_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.orientation_ != nullptr);
      _impl_.orientation_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* IMU::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 4, 0, 2> IMU::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(IMU, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_IMU_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .std_msg.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(IMU, _impl_.header_)}},
    // .geometry_msg.Vector3 acceleration = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(IMU, _impl_.acceleration_)}},
    // .geometry_msg.Vector3 twist = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(IMU, _impl_.twist_)}},
    // .geometry_msg.Quaternion orientation = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(IMU, _impl_.orientation_)}},
    // repeated double covariance = 5;
    {::_pbi::TcParser::FastF64P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(IMU, _impl_.covariance_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .std_msg.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(IMU, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .geometry_msg.Vector3 acceleration = 2;
    {PROTOBUF_FIELD_OFFSET(IMU, _impl_.acceleration_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .geometry_msg.Vector3 twist = 3;
    {PROTOBUF_FIELD_OFFSET(IMU, _impl_.twist_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .geometry_msg.Quaternion orientation = 4;
    {PROTOBUF_FIELD_OFFSET(IMU, _impl_.orientation_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated double covariance = 5;
    {PROTOBUF_FIELD_OFFSET(IMU, _impl_.covariance_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::std_msg::Header>()},
    {::_pbi::TcParser::GetTable<::geometry_msg::Vector3>()},
    {::_pbi::TcParser::GetTable<::geometry_msg::Vector3>()},
    {::_pbi::TcParser::GetTable<::geometry_msg::Quaternion>()},
  }}, {{
  }},
};

::uint8_t* IMU::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msg.IMU)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .std_msg.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .geometry_msg.Vector3 acceleration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::acceleration(this),
        _Internal::acceleration(this).GetCachedSize(), target, stream);
  }

  // .geometry_msg.Vector3 twist = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::twist(this),
        _Internal::twist(this).GetCachedSize(), target, stream);
  }

  // .geometry_msg.Quaternion orientation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::orientation(this),
        _Internal::orientation(this).GetCachedSize(), target, stream);
  }

  // repeated double covariance = 5;
  if (this->_internal_covariance_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_covariance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msg.IMU)
  return target;
}

::size_t IMU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msg.IMU)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double covariance = 5;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_covariance_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .std_msg.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }

    // .geometry_msg.Vector3 acceleration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.acceleration_);
    }

    // .geometry_msg.Vector3 twist = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.twist_);
    }

    // .geometry_msg.Quaternion orientation = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.orientation_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData IMU::_class_data_ = {
    IMU::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* IMU::GetClassData() const {
  return &_class_data_;
}

void IMU::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<IMU*>(&to_msg);
  auto& from = static_cast<const IMU&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensor_msg.IMU)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_covariance()->MergeFrom(from._internal_covariance());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::std_msg::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_acceleration()->::geometry_msg::Vector3::MergeFrom(
          from._internal_acceleration());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_twist()->::geometry_msg::Vector3::MergeFrom(
          from._internal_twist());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_orientation()->::geometry_msg::Quaternion::MergeFrom(
          from._internal_orientation());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IMU::CopyFrom(const IMU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msg.IMU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool IMU::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* IMU::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void IMU::InternalSwap(IMU* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.covariance_.InternalSwap(&other->_impl_.covariance_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMU, _impl_.orientation_)
      + sizeof(IMU::_impl_.orientation_)
      - PROTOBUF_FIELD_OFFSET(IMU, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata IMU::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_2eproto_getter, &descriptor_table_sensor_2eproto_once,
      file_level_metadata_sensor_2eproto[0]);
}
// ===================================================================

class Odometry::_Internal {
 public:
  using HasBits = decltype(std::declval<Odometry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Odometry, _impl_._has_bits_);
  static const ::std_msg::Header& header(const Odometry* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::geometry_msg::PoseWithCovariance& position(const Odometry* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::geometry_msg::TwistWithCovariance& twist(const Odometry* msg);
  static void set_has_twist(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::std_msg::Header& Odometry::_Internal::header(const Odometry* msg) {
  return *msg->_impl_.header_;
}
const ::geometry_msg::PoseWithCovariance& Odometry::_Internal::position(const Odometry* msg) {
  return *msg->_impl_.position_;
}
const ::geometry_msg::TwistWithCovariance& Odometry::_Internal::twist(const Odometry* msg) {
  return *msg->_impl_.twist_;
}
void Odometry::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Odometry::clear_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Odometry::clear_twist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.twist_ != nullptr) _impl_.twist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Odometry::Odometry(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensor_msg.Odometry)
}
inline PROTOBUF_NDEBUG_INLINE Odometry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Odometry::Odometry(
    ::google::protobuf::Arena* arena,
    const Odometry& from)
    : ::google::protobuf::Message(arena) {
  Odometry* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::std_msg::Header>(arena, *from._impl_.header_)
                : nullptr;
  _impl_.position_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::geometry_msg::PoseWithCovariance>(arena, *from._impl_.position_)
                : nullptr;
  _impl_.twist_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::geometry_msg::TwistWithCovariance>(arena, *from._impl_.twist_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensor_msg.Odometry)
}
inline PROTOBUF_NDEBUG_INLINE Odometry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Odometry::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, twist_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::twist_));
}
Odometry::~Odometry() {
  // @@protoc_insertion_point(destructor:sensor_msg.Odometry)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Odometry::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  delete _impl_.position_;
  delete _impl_.twist_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Odometry::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msg.Odometry)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.twist_ != nullptr);
      _impl_.twist_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Odometry::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> Odometry::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Odometry, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Odometry_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .std_msg.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.header_)}},
    // .geometry_msg.PoseWithCovariance position = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.position_)}},
    // .geometry_msg.TwistWithCovariance twist = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.twist_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .std_msg.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .geometry_msg.PoseWithCovariance position = 2;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.position_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .geometry_msg.TwistWithCovariance twist = 3;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.twist_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::std_msg::Header>()},
    {::_pbi::TcParser::GetTable<::geometry_msg::PoseWithCovariance>()},
    {::_pbi::TcParser::GetTable<::geometry_msg::TwistWithCovariance>()},
  }}, {{
  }},
};

::uint8_t* Odometry::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msg.Odometry)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .std_msg.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .geometry_msg.PoseWithCovariance position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .geometry_msg.TwistWithCovariance twist = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::twist(this),
        _Internal::twist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msg.Odometry)
  return target;
}

::size_t Odometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msg.Odometry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .std_msg.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }

    // .geometry_msg.PoseWithCovariance position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
    }

    // .geometry_msg.TwistWithCovariance twist = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.twist_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Odometry::_class_data_ = {
    Odometry::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Odometry::GetClassData() const {
  return &_class_data_;
}

void Odometry::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Odometry*>(&to_msg);
  auto& from = static_cast<const Odometry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensor_msg.Odometry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::std_msg::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_position()->::geometry_msg::PoseWithCovariance::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_twist()->::geometry_msg::TwistWithCovariance::MergeFrom(
          from._internal_twist());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Odometry::CopyFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msg.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Odometry::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Odometry::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Odometry::InternalSwap(Odometry* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Odometry, _impl_.twist_)
      + sizeof(Odometry::_impl_.twist_)
      - PROTOBUF_FIELD_OFFSET(Odometry, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata Odometry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_2eproto_getter, &descriptor_table_sensor_2eproto_once,
      file_level_metadata_sensor_2eproto[1]);
}
// ===================================================================

class Lidar::_Internal {
 public:
  using HasBits = decltype(std::declval<Lidar>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Lidar, _impl_._has_bits_);
  static const ::std_msg::Header& header(const Lidar* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::std_msg::Header& Lidar::_Internal::header(const Lidar* msg) {
  return *msg->_impl_.header_;
}
void Lidar::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Lidar::Lidar(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensor_msg.Lidar)
}
inline PROTOBUF_NDEBUG_INLINE Lidar::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        dist_{visibility, arena, from.dist_} {}

Lidar::Lidar(
    ::google::protobuf::Arena* arena,
    const Lidar& from)
    : ::google::protobuf::Message(arena) {
  Lidar* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::std_msg::Header>(arena, *from._impl_.header_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensor_msg.Lidar)
}
inline PROTOBUF_NDEBUG_INLINE Lidar::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        dist_{visibility, arena} {}

inline void Lidar::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.header_ = {};
}
Lidar::~Lidar() {
  // @@protoc_insertion_point(destructor:sensor_msg.Lidar)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Lidar::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Lidar::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msg.Lidar)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dist_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Lidar::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Lidar::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Lidar, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Lidar_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated double dist = 2;
    {::_pbi::TcParser::FastF64P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Lidar, _impl_.dist_)}},
    // .std_msg.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Lidar, _impl_.header_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .std_msg.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(Lidar, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated double dist = 2;
    {PROTOBUF_FIELD_OFFSET(Lidar, _impl_.dist_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::std_msg::Header>()},
  }}, {{
  }},
};

::uint8_t* Lidar::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msg.Lidar)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .std_msg.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated double dist = 2;
  if (this->_internal_dist_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_dist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msg.Lidar)
  return target;
}

::size_t Lidar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msg.Lidar)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double dist = 2;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_dist_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .std_msg.Header header = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Lidar::_class_data_ = {
    Lidar::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Lidar::GetClassData() const {
  return &_class_data_;
}

void Lidar::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Lidar*>(&to_msg);
  auto& from = static_cast<const Lidar&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensor_msg.Lidar)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_dist()->MergeFrom(from._internal_dist());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_header()->::std_msg::Header::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Lidar::CopyFrom(const Lidar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msg.Lidar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Lidar::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Lidar::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Lidar::InternalSwap(Lidar* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.dist_.InternalSwap(&other->_impl_.dist_);
  swap(_impl_.header_, other->_impl_.header_);
}

::google::protobuf::Metadata Lidar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_2eproto_getter, &descriptor_table_sensor_2eproto_once,
      file_level_metadata_sensor_2eproto[2]);
}
// ===================================================================

class SensorRequest::_Internal {
 public:
};

SensorRequest::SensorRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensor_msg.SensorRequest)
}
SensorRequest::SensorRequest(
    ::google::protobuf::Arena* arena, const SensorRequest& from)
    : SensorRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SensorRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SensorRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.mode_ = {};
}
SensorRequest::~SensorRequest() {
  // @@protoc_insertion_point(destructor:sensor_msg.SensorRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SensorRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SensorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msg.SensorRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mode_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SensorRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SensorRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SensorRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensor_msg.SensorMode mode = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SensorRequest, _impl_.mode_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SensorRequest, _impl_.mode_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensor_msg.SensorMode mode = 1;
    {PROTOBUF_FIELD_OFFSET(SensorRequest, _impl_.mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SensorRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msg.SensorRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensor_msg.SensorMode mode = 1;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msg.SensorRequest)
  return target;
}

::size_t SensorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msg.SensorRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensor_msg.SensorMode mode = 1;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SensorRequest::_class_data_ = {
    SensorRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SensorRequest::GetClassData() const {
  return &_class_data_;
}

void SensorRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SensorRequest*>(&to_msg);
  auto& from = static_cast<const SensorRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensor_msg.SensorRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SensorRequest::CopyFrom(const SensorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msg.SensorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SensorRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SensorRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SensorRequest::InternalSwap(SensorRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.mode_, other->_impl_.mode_);
}

::google::protobuf::Metadata SensorRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_2eproto_getter, &descriptor_table_sensor_2eproto_once,
      file_level_metadata_sensor_2eproto[3]);
}
// ===================================================================

class SensorReply::_Internal {
 public:
};

SensorReply::SensorReply(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensor_msg.SensorReply)
}
SensorReply::SensorReply(
    ::google::protobuf::Arena* arena, const SensorReply& from)
    : SensorReply(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SensorReply::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SensorReply::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.mode_ = {};
}
SensorReply::~SensorReply() {
  // @@protoc_insertion_point(destructor:sensor_msg.SensorReply)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SensorReply::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SensorReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msg.SensorReply)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mode_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SensorReply::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SensorReply::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967293,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SensorReply_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensor_msg.SensorMode mode = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SensorReply, _impl_.mode_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SensorReply, _impl_.mode_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensor_msg.SensorMode mode = 2;
    {PROTOBUF_FIELD_OFFSET(SensorReply, _impl_.mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SensorReply::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msg.SensorReply)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensor_msg.SensorMode mode = 2;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msg.SensorReply)
  return target;
}

::size_t SensorReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msg.SensorReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensor_msg.SensorMode mode = 2;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SensorReply::_class_data_ = {
    SensorReply::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SensorReply::GetClassData() const {
  return &_class_data_;
}

void SensorReply::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SensorReply*>(&to_msg);
  auto& from = static_cast<const SensorReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensor_msg.SensorReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SensorReply::CopyFrom(const SensorReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msg.SensorReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SensorReply::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SensorReply::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SensorReply::InternalSwap(SensorReply* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.mode_, other->_impl_.mode_);
}

::google::protobuf::Metadata SensorReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_2eproto_getter, &descriptor_table_sensor_2eproto_once,
      file_level_metadata_sensor_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace sensor_msg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
