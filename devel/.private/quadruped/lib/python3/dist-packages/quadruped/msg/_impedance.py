# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from quadruped/impedance.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class impedance(genpy.Message):
  _md5sum = "d8f3da9fe1b8bf0d60714457a27593ec"
  _type = "quadruped/impedance"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 M_x
float64 M_y
float64 K0_x
float64 K0_y
float64 D_x
float64 D_y
float64 adaptive_kp_x
float64 adaptive_kp_y
float64 adaptive_ki_x
float64 adaptive_ki_y
float64 adaptive_kd_x
float64 adaptive_kd_y"""
  __slots__ = ['M_x','M_y','K0_x','K0_y','D_x','D_y','adaptive_kp_x','adaptive_kp_y','adaptive_ki_x','adaptive_ki_y','adaptive_kd_x','adaptive_kd_y']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       M_x,M_y,K0_x,K0_y,D_x,D_y,adaptive_kp_x,adaptive_kp_y,adaptive_ki_x,adaptive_ki_y,adaptive_kd_x,adaptive_kd_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(impedance, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.M_x is None:
        self.M_x = 0.
      if self.M_y is None:
        self.M_y = 0.
      if self.K0_x is None:
        self.K0_x = 0.
      if self.K0_y is None:
        self.K0_y = 0.
      if self.D_x is None:
        self.D_x = 0.
      if self.D_y is None:
        self.D_y = 0.
      if self.adaptive_kp_x is None:
        self.adaptive_kp_x = 0.
      if self.adaptive_kp_y is None:
        self.adaptive_kp_y = 0.
      if self.adaptive_ki_x is None:
        self.adaptive_ki_x = 0.
      if self.adaptive_ki_y is None:
        self.adaptive_ki_y = 0.
      if self.adaptive_kd_x is None:
        self.adaptive_kd_x = 0.
      if self.adaptive_kd_y is None:
        self.adaptive_kd_y = 0.
    else:
      self.M_x = 0.
      self.M_y = 0.
      self.K0_x = 0.
      self.K0_y = 0.
      self.D_x = 0.
      self.D_y = 0.
      self.adaptive_kp_x = 0.
      self.adaptive_kp_y = 0.
      self.adaptive_ki_x = 0.
      self.adaptive_ki_y = 0.
      self.adaptive_kd_x = 0.
      self.adaptive_kd_y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12d().pack(_x.M_x, _x.M_y, _x.K0_x, _x.K0_y, _x.D_x, _x.D_y, _x.adaptive_kp_x, _x.adaptive_kp_y, _x.adaptive_ki_x, _x.adaptive_ki_y, _x.adaptive_kd_x, _x.adaptive_kd_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 96
      (_x.M_x, _x.M_y, _x.K0_x, _x.K0_y, _x.D_x, _x.D_y, _x.adaptive_kp_x, _x.adaptive_kp_y, _x.adaptive_ki_x, _x.adaptive_ki_y, _x.adaptive_kd_x, _x.adaptive_kd_y,) = _get_struct_12d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12d().pack(_x.M_x, _x.M_y, _x.K0_x, _x.K0_y, _x.D_x, _x.D_y, _x.adaptive_kp_x, _x.adaptive_kp_y, _x.adaptive_ki_x, _x.adaptive_ki_y, _x.adaptive_kd_x, _x.adaptive_kd_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 96
      (_x.M_x, _x.M_y, _x.K0_x, _x.K0_y, _x.D_x, _x.D_y, _x.adaptive_kp_x, _x.adaptive_kp_y, _x.adaptive_ki_x, _x.adaptive_ki_y, _x.adaptive_kd_x, _x.adaptive_kd_y,) = _get_struct_12d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d = None
def _get_struct_12d():
    global _struct_12d
    if _struct_12d is None:
        _struct_12d = struct.Struct("<12d")
    return _struct_12d
