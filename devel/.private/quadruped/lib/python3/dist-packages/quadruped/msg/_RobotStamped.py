# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from quadruped/RobotStamped.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import quadruped.msg
import std_msgs.msg

class RobotStamped(genpy.Message):
  _md5sum = "62662962505d5647d611c2ede8e80fa9"
  _type = "quadruped/RobotStamped"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """LegStamped A_LF
LegStamped B_RF
LegStamped C_RH
LegStamped D_LH

================================================================================
MSG: quadruped/LegStamped
Header header

float64 theta
float64 beta

motor motor_r
motor motor_l

force force
impedance impedance

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: quadruped/motor
float64 angle
float64 twist
float64 torque
float64 kp
float64 ki
float64 kd
================================================================================
MSG: quadruped/force
float64 pose_x
float64 pose_y
float64 force_x
float64 force_y
================================================================================
MSG: quadruped/impedance
float64 M_x
float64 M_y
float64 K0_x
float64 K0_y
float64 D_x
float64 D_y
float64 adaptive_kp_x
float64 adaptive_kp_y
float64 adaptive_ki_x
float64 adaptive_ki_y
float64 adaptive_kd_x
float64 adaptive_kd_y"""
  __slots__ = ['A_LF','B_RF','C_RH','D_LH']
  _slot_types = ['quadruped/LegStamped','quadruped/LegStamped','quadruped/LegStamped','quadruped/LegStamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       A_LF,B_RF,C_RH,D_LH

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotStamped, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.A_LF is None:
        self.A_LF = quadruped.msg.LegStamped()
      if self.B_RF is None:
        self.B_RF = quadruped.msg.LegStamped()
      if self.C_RH is None:
        self.C_RH = quadruped.msg.LegStamped()
      if self.D_LH is None:
        self.D_LH = quadruped.msg.LegStamped()
    else:
      self.A_LF = quadruped.msg.LegStamped()
      self.B_RF = quadruped.msg.LegStamped()
      self.C_RH = quadruped.msg.LegStamped()
      self.D_LH = quadruped.msg.LegStamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.A_LF.header.seq, _x.A_LF.header.stamp.secs, _x.A_LF.header.stamp.nsecs))
      _x = self.A_LF.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_30d3I().pack(_x.A_LF.theta, _x.A_LF.beta, _x.A_LF.motor_r.angle, _x.A_LF.motor_r.twist, _x.A_LF.motor_r.torque, _x.A_LF.motor_r.kp, _x.A_LF.motor_r.ki, _x.A_LF.motor_r.kd, _x.A_LF.motor_l.angle, _x.A_LF.motor_l.twist, _x.A_LF.motor_l.torque, _x.A_LF.motor_l.kp, _x.A_LF.motor_l.ki, _x.A_LF.motor_l.kd, _x.A_LF.force.pose_x, _x.A_LF.force.pose_y, _x.A_LF.force.force_x, _x.A_LF.force.force_y, _x.A_LF.impedance.M_x, _x.A_LF.impedance.M_y, _x.A_LF.impedance.K0_x, _x.A_LF.impedance.K0_y, _x.A_LF.impedance.D_x, _x.A_LF.impedance.D_y, _x.A_LF.impedance.adaptive_kp_x, _x.A_LF.impedance.adaptive_kp_y, _x.A_LF.impedance.adaptive_ki_x, _x.A_LF.impedance.adaptive_ki_y, _x.A_LF.impedance.adaptive_kd_x, _x.A_LF.impedance.adaptive_kd_y, _x.B_RF.header.seq, _x.B_RF.header.stamp.secs, _x.B_RF.header.stamp.nsecs))
      _x = self.B_RF.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_30d3I().pack(_x.B_RF.theta, _x.B_RF.beta, _x.B_RF.motor_r.angle, _x.B_RF.motor_r.twist, _x.B_RF.motor_r.torque, _x.B_RF.motor_r.kp, _x.B_RF.motor_r.ki, _x.B_RF.motor_r.kd, _x.B_RF.motor_l.angle, _x.B_RF.motor_l.twist, _x.B_RF.motor_l.torque, _x.B_RF.motor_l.kp, _x.B_RF.motor_l.ki, _x.B_RF.motor_l.kd, _x.B_RF.force.pose_x, _x.B_RF.force.pose_y, _x.B_RF.force.force_x, _x.B_RF.force.force_y, _x.B_RF.impedance.M_x, _x.B_RF.impedance.M_y, _x.B_RF.impedance.K0_x, _x.B_RF.impedance.K0_y, _x.B_RF.impedance.D_x, _x.B_RF.impedance.D_y, _x.B_RF.impedance.adaptive_kp_x, _x.B_RF.impedance.adaptive_kp_y, _x.B_RF.impedance.adaptive_ki_x, _x.B_RF.impedance.adaptive_ki_y, _x.B_RF.impedance.adaptive_kd_x, _x.B_RF.impedance.adaptive_kd_y, _x.C_RH.header.seq, _x.C_RH.header.stamp.secs, _x.C_RH.header.stamp.nsecs))
      _x = self.C_RH.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_30d3I().pack(_x.C_RH.theta, _x.C_RH.beta, _x.C_RH.motor_r.angle, _x.C_RH.motor_r.twist, _x.C_RH.motor_r.torque, _x.C_RH.motor_r.kp, _x.C_RH.motor_r.ki, _x.C_RH.motor_r.kd, _x.C_RH.motor_l.angle, _x.C_RH.motor_l.twist, _x.C_RH.motor_l.torque, _x.C_RH.motor_l.kp, _x.C_RH.motor_l.ki, _x.C_RH.motor_l.kd, _x.C_RH.force.pose_x, _x.C_RH.force.pose_y, _x.C_RH.force.force_x, _x.C_RH.force.force_y, _x.C_RH.impedance.M_x, _x.C_RH.impedance.M_y, _x.C_RH.impedance.K0_x, _x.C_RH.impedance.K0_y, _x.C_RH.impedance.D_x, _x.C_RH.impedance.D_y, _x.C_RH.impedance.adaptive_kp_x, _x.C_RH.impedance.adaptive_kp_y, _x.C_RH.impedance.adaptive_ki_x, _x.C_RH.impedance.adaptive_ki_y, _x.C_RH.impedance.adaptive_kd_x, _x.C_RH.impedance.adaptive_kd_y, _x.D_LH.header.seq, _x.D_LH.header.stamp.secs, _x.D_LH.header.stamp.nsecs))
      _x = self.D_LH.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_30d().pack(_x.D_LH.theta, _x.D_LH.beta, _x.D_LH.motor_r.angle, _x.D_LH.motor_r.twist, _x.D_LH.motor_r.torque, _x.D_LH.motor_r.kp, _x.D_LH.motor_r.ki, _x.D_LH.motor_r.kd, _x.D_LH.motor_l.angle, _x.D_LH.motor_l.twist, _x.D_LH.motor_l.torque, _x.D_LH.motor_l.kp, _x.D_LH.motor_l.ki, _x.D_LH.motor_l.kd, _x.D_LH.force.pose_x, _x.D_LH.force.pose_y, _x.D_LH.force.force_x, _x.D_LH.force.force_y, _x.D_LH.impedance.M_x, _x.D_LH.impedance.M_y, _x.D_LH.impedance.K0_x, _x.D_LH.impedance.K0_y, _x.D_LH.impedance.D_x, _x.D_LH.impedance.D_y, _x.D_LH.impedance.adaptive_kp_x, _x.D_LH.impedance.adaptive_kp_y, _x.D_LH.impedance.adaptive_ki_x, _x.D_LH.impedance.adaptive_ki_y, _x.D_LH.impedance.adaptive_kd_x, _x.D_LH.impedance.adaptive_kd_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.A_LF is None:
        self.A_LF = quadruped.msg.LegStamped()
      if self.B_RF is None:
        self.B_RF = quadruped.msg.LegStamped()
      if self.C_RH is None:
        self.C_RH = quadruped.msg.LegStamped()
      if self.D_LH is None:
        self.D_LH = quadruped.msg.LegStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.A_LF.header.seq, _x.A_LF.header.stamp.secs, _x.A_LF.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A_LF.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.A_LF.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 252
      (_x.A_LF.theta, _x.A_LF.beta, _x.A_LF.motor_r.angle, _x.A_LF.motor_r.twist, _x.A_LF.motor_r.torque, _x.A_LF.motor_r.kp, _x.A_LF.motor_r.ki, _x.A_LF.motor_r.kd, _x.A_LF.motor_l.angle, _x.A_LF.motor_l.twist, _x.A_LF.motor_l.torque, _x.A_LF.motor_l.kp, _x.A_LF.motor_l.ki, _x.A_LF.motor_l.kd, _x.A_LF.force.pose_x, _x.A_LF.force.pose_y, _x.A_LF.force.force_x, _x.A_LF.force.force_y, _x.A_LF.impedance.M_x, _x.A_LF.impedance.M_y, _x.A_LF.impedance.K0_x, _x.A_LF.impedance.K0_y, _x.A_LF.impedance.D_x, _x.A_LF.impedance.D_y, _x.A_LF.impedance.adaptive_kp_x, _x.A_LF.impedance.adaptive_kp_y, _x.A_LF.impedance.adaptive_ki_x, _x.A_LF.impedance.adaptive_ki_y, _x.A_LF.impedance.adaptive_kd_x, _x.A_LF.impedance.adaptive_kd_y, _x.B_RF.header.seq, _x.B_RF.header.stamp.secs, _x.B_RF.header.stamp.nsecs,) = _get_struct_30d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.B_RF.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.B_RF.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 252
      (_x.B_RF.theta, _x.B_RF.beta, _x.B_RF.motor_r.angle, _x.B_RF.motor_r.twist, _x.B_RF.motor_r.torque, _x.B_RF.motor_r.kp, _x.B_RF.motor_r.ki, _x.B_RF.motor_r.kd, _x.B_RF.motor_l.angle, _x.B_RF.motor_l.twist, _x.B_RF.motor_l.torque, _x.B_RF.motor_l.kp, _x.B_RF.motor_l.ki, _x.B_RF.motor_l.kd, _x.B_RF.force.pose_x, _x.B_RF.force.pose_y, _x.B_RF.force.force_x, _x.B_RF.force.force_y, _x.B_RF.impedance.M_x, _x.B_RF.impedance.M_y, _x.B_RF.impedance.K0_x, _x.B_RF.impedance.K0_y, _x.B_RF.impedance.D_x, _x.B_RF.impedance.D_y, _x.B_RF.impedance.adaptive_kp_x, _x.B_RF.impedance.adaptive_kp_y, _x.B_RF.impedance.adaptive_ki_x, _x.B_RF.impedance.adaptive_ki_y, _x.B_RF.impedance.adaptive_kd_x, _x.B_RF.impedance.adaptive_kd_y, _x.C_RH.header.seq, _x.C_RH.header.stamp.secs, _x.C_RH.header.stamp.nsecs,) = _get_struct_30d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.C_RH.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.C_RH.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 252
      (_x.C_RH.theta, _x.C_RH.beta, _x.C_RH.motor_r.angle, _x.C_RH.motor_r.twist, _x.C_RH.motor_r.torque, _x.C_RH.motor_r.kp, _x.C_RH.motor_r.ki, _x.C_RH.motor_r.kd, _x.C_RH.motor_l.angle, _x.C_RH.motor_l.twist, _x.C_RH.motor_l.torque, _x.C_RH.motor_l.kp, _x.C_RH.motor_l.ki, _x.C_RH.motor_l.kd, _x.C_RH.force.pose_x, _x.C_RH.force.pose_y, _x.C_RH.force.force_x, _x.C_RH.force.force_y, _x.C_RH.impedance.M_x, _x.C_RH.impedance.M_y, _x.C_RH.impedance.K0_x, _x.C_RH.impedance.K0_y, _x.C_RH.impedance.D_x, _x.C_RH.impedance.D_y, _x.C_RH.impedance.adaptive_kp_x, _x.C_RH.impedance.adaptive_kp_y, _x.C_RH.impedance.adaptive_ki_x, _x.C_RH.impedance.adaptive_ki_y, _x.C_RH.impedance.adaptive_kd_x, _x.C_RH.impedance.adaptive_kd_y, _x.D_LH.header.seq, _x.D_LH.header.stamp.secs, _x.D_LH.header.stamp.nsecs,) = _get_struct_30d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.D_LH.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.D_LH.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 240
      (_x.D_LH.theta, _x.D_LH.beta, _x.D_LH.motor_r.angle, _x.D_LH.motor_r.twist, _x.D_LH.motor_r.torque, _x.D_LH.motor_r.kp, _x.D_LH.motor_r.ki, _x.D_LH.motor_r.kd, _x.D_LH.motor_l.angle, _x.D_LH.motor_l.twist, _x.D_LH.motor_l.torque, _x.D_LH.motor_l.kp, _x.D_LH.motor_l.ki, _x.D_LH.motor_l.kd, _x.D_LH.force.pose_x, _x.D_LH.force.pose_y, _x.D_LH.force.force_x, _x.D_LH.force.force_y, _x.D_LH.impedance.M_x, _x.D_LH.impedance.M_y, _x.D_LH.impedance.K0_x, _x.D_LH.impedance.K0_y, _x.D_LH.impedance.D_x, _x.D_LH.impedance.D_y, _x.D_LH.impedance.adaptive_kp_x, _x.D_LH.impedance.adaptive_kp_y, _x.D_LH.impedance.adaptive_ki_x, _x.D_LH.impedance.adaptive_ki_y, _x.D_LH.impedance.adaptive_kd_x, _x.D_LH.impedance.adaptive_kd_y,) = _get_struct_30d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.A_LF.header.seq, _x.A_LF.header.stamp.secs, _x.A_LF.header.stamp.nsecs))
      _x = self.A_LF.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_30d3I().pack(_x.A_LF.theta, _x.A_LF.beta, _x.A_LF.motor_r.angle, _x.A_LF.motor_r.twist, _x.A_LF.motor_r.torque, _x.A_LF.motor_r.kp, _x.A_LF.motor_r.ki, _x.A_LF.motor_r.kd, _x.A_LF.motor_l.angle, _x.A_LF.motor_l.twist, _x.A_LF.motor_l.torque, _x.A_LF.motor_l.kp, _x.A_LF.motor_l.ki, _x.A_LF.motor_l.kd, _x.A_LF.force.pose_x, _x.A_LF.force.pose_y, _x.A_LF.force.force_x, _x.A_LF.force.force_y, _x.A_LF.impedance.M_x, _x.A_LF.impedance.M_y, _x.A_LF.impedance.K0_x, _x.A_LF.impedance.K0_y, _x.A_LF.impedance.D_x, _x.A_LF.impedance.D_y, _x.A_LF.impedance.adaptive_kp_x, _x.A_LF.impedance.adaptive_kp_y, _x.A_LF.impedance.adaptive_ki_x, _x.A_LF.impedance.adaptive_ki_y, _x.A_LF.impedance.adaptive_kd_x, _x.A_LF.impedance.adaptive_kd_y, _x.B_RF.header.seq, _x.B_RF.header.stamp.secs, _x.B_RF.header.stamp.nsecs))
      _x = self.B_RF.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_30d3I().pack(_x.B_RF.theta, _x.B_RF.beta, _x.B_RF.motor_r.angle, _x.B_RF.motor_r.twist, _x.B_RF.motor_r.torque, _x.B_RF.motor_r.kp, _x.B_RF.motor_r.ki, _x.B_RF.motor_r.kd, _x.B_RF.motor_l.angle, _x.B_RF.motor_l.twist, _x.B_RF.motor_l.torque, _x.B_RF.motor_l.kp, _x.B_RF.motor_l.ki, _x.B_RF.motor_l.kd, _x.B_RF.force.pose_x, _x.B_RF.force.pose_y, _x.B_RF.force.force_x, _x.B_RF.force.force_y, _x.B_RF.impedance.M_x, _x.B_RF.impedance.M_y, _x.B_RF.impedance.K0_x, _x.B_RF.impedance.K0_y, _x.B_RF.impedance.D_x, _x.B_RF.impedance.D_y, _x.B_RF.impedance.adaptive_kp_x, _x.B_RF.impedance.adaptive_kp_y, _x.B_RF.impedance.adaptive_ki_x, _x.B_RF.impedance.adaptive_ki_y, _x.B_RF.impedance.adaptive_kd_x, _x.B_RF.impedance.adaptive_kd_y, _x.C_RH.header.seq, _x.C_RH.header.stamp.secs, _x.C_RH.header.stamp.nsecs))
      _x = self.C_RH.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_30d3I().pack(_x.C_RH.theta, _x.C_RH.beta, _x.C_RH.motor_r.angle, _x.C_RH.motor_r.twist, _x.C_RH.motor_r.torque, _x.C_RH.motor_r.kp, _x.C_RH.motor_r.ki, _x.C_RH.motor_r.kd, _x.C_RH.motor_l.angle, _x.C_RH.motor_l.twist, _x.C_RH.motor_l.torque, _x.C_RH.motor_l.kp, _x.C_RH.motor_l.ki, _x.C_RH.motor_l.kd, _x.C_RH.force.pose_x, _x.C_RH.force.pose_y, _x.C_RH.force.force_x, _x.C_RH.force.force_y, _x.C_RH.impedance.M_x, _x.C_RH.impedance.M_y, _x.C_RH.impedance.K0_x, _x.C_RH.impedance.K0_y, _x.C_RH.impedance.D_x, _x.C_RH.impedance.D_y, _x.C_RH.impedance.adaptive_kp_x, _x.C_RH.impedance.adaptive_kp_y, _x.C_RH.impedance.adaptive_ki_x, _x.C_RH.impedance.adaptive_ki_y, _x.C_RH.impedance.adaptive_kd_x, _x.C_RH.impedance.adaptive_kd_y, _x.D_LH.header.seq, _x.D_LH.header.stamp.secs, _x.D_LH.header.stamp.nsecs))
      _x = self.D_LH.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_30d().pack(_x.D_LH.theta, _x.D_LH.beta, _x.D_LH.motor_r.angle, _x.D_LH.motor_r.twist, _x.D_LH.motor_r.torque, _x.D_LH.motor_r.kp, _x.D_LH.motor_r.ki, _x.D_LH.motor_r.kd, _x.D_LH.motor_l.angle, _x.D_LH.motor_l.twist, _x.D_LH.motor_l.torque, _x.D_LH.motor_l.kp, _x.D_LH.motor_l.ki, _x.D_LH.motor_l.kd, _x.D_LH.force.pose_x, _x.D_LH.force.pose_y, _x.D_LH.force.force_x, _x.D_LH.force.force_y, _x.D_LH.impedance.M_x, _x.D_LH.impedance.M_y, _x.D_LH.impedance.K0_x, _x.D_LH.impedance.K0_y, _x.D_LH.impedance.D_x, _x.D_LH.impedance.D_y, _x.D_LH.impedance.adaptive_kp_x, _x.D_LH.impedance.adaptive_kp_y, _x.D_LH.impedance.adaptive_ki_x, _x.D_LH.impedance.adaptive_ki_y, _x.D_LH.impedance.adaptive_kd_x, _x.D_LH.impedance.adaptive_kd_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.A_LF is None:
        self.A_LF = quadruped.msg.LegStamped()
      if self.B_RF is None:
        self.B_RF = quadruped.msg.LegStamped()
      if self.C_RH is None:
        self.C_RH = quadruped.msg.LegStamped()
      if self.D_LH is None:
        self.D_LH = quadruped.msg.LegStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.A_LF.header.seq, _x.A_LF.header.stamp.secs, _x.A_LF.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A_LF.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.A_LF.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 252
      (_x.A_LF.theta, _x.A_LF.beta, _x.A_LF.motor_r.angle, _x.A_LF.motor_r.twist, _x.A_LF.motor_r.torque, _x.A_LF.motor_r.kp, _x.A_LF.motor_r.ki, _x.A_LF.motor_r.kd, _x.A_LF.motor_l.angle, _x.A_LF.motor_l.twist, _x.A_LF.motor_l.torque, _x.A_LF.motor_l.kp, _x.A_LF.motor_l.ki, _x.A_LF.motor_l.kd, _x.A_LF.force.pose_x, _x.A_LF.force.pose_y, _x.A_LF.force.force_x, _x.A_LF.force.force_y, _x.A_LF.impedance.M_x, _x.A_LF.impedance.M_y, _x.A_LF.impedance.K0_x, _x.A_LF.impedance.K0_y, _x.A_LF.impedance.D_x, _x.A_LF.impedance.D_y, _x.A_LF.impedance.adaptive_kp_x, _x.A_LF.impedance.adaptive_kp_y, _x.A_LF.impedance.adaptive_ki_x, _x.A_LF.impedance.adaptive_ki_y, _x.A_LF.impedance.adaptive_kd_x, _x.A_LF.impedance.adaptive_kd_y, _x.B_RF.header.seq, _x.B_RF.header.stamp.secs, _x.B_RF.header.stamp.nsecs,) = _get_struct_30d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.B_RF.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.B_RF.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 252
      (_x.B_RF.theta, _x.B_RF.beta, _x.B_RF.motor_r.angle, _x.B_RF.motor_r.twist, _x.B_RF.motor_r.torque, _x.B_RF.motor_r.kp, _x.B_RF.motor_r.ki, _x.B_RF.motor_r.kd, _x.B_RF.motor_l.angle, _x.B_RF.motor_l.twist, _x.B_RF.motor_l.torque, _x.B_RF.motor_l.kp, _x.B_RF.motor_l.ki, _x.B_RF.motor_l.kd, _x.B_RF.force.pose_x, _x.B_RF.force.pose_y, _x.B_RF.force.force_x, _x.B_RF.force.force_y, _x.B_RF.impedance.M_x, _x.B_RF.impedance.M_y, _x.B_RF.impedance.K0_x, _x.B_RF.impedance.K0_y, _x.B_RF.impedance.D_x, _x.B_RF.impedance.D_y, _x.B_RF.impedance.adaptive_kp_x, _x.B_RF.impedance.adaptive_kp_y, _x.B_RF.impedance.adaptive_ki_x, _x.B_RF.impedance.adaptive_ki_y, _x.B_RF.impedance.adaptive_kd_x, _x.B_RF.impedance.adaptive_kd_y, _x.C_RH.header.seq, _x.C_RH.header.stamp.secs, _x.C_RH.header.stamp.nsecs,) = _get_struct_30d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.C_RH.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.C_RH.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 252
      (_x.C_RH.theta, _x.C_RH.beta, _x.C_RH.motor_r.angle, _x.C_RH.motor_r.twist, _x.C_RH.motor_r.torque, _x.C_RH.motor_r.kp, _x.C_RH.motor_r.ki, _x.C_RH.motor_r.kd, _x.C_RH.motor_l.angle, _x.C_RH.motor_l.twist, _x.C_RH.motor_l.torque, _x.C_RH.motor_l.kp, _x.C_RH.motor_l.ki, _x.C_RH.motor_l.kd, _x.C_RH.force.pose_x, _x.C_RH.force.pose_y, _x.C_RH.force.force_x, _x.C_RH.force.force_y, _x.C_RH.impedance.M_x, _x.C_RH.impedance.M_y, _x.C_RH.impedance.K0_x, _x.C_RH.impedance.K0_y, _x.C_RH.impedance.D_x, _x.C_RH.impedance.D_y, _x.C_RH.impedance.adaptive_kp_x, _x.C_RH.impedance.adaptive_kp_y, _x.C_RH.impedance.adaptive_ki_x, _x.C_RH.impedance.adaptive_ki_y, _x.C_RH.impedance.adaptive_kd_x, _x.C_RH.impedance.adaptive_kd_y, _x.D_LH.header.seq, _x.D_LH.header.stamp.secs, _x.D_LH.header.stamp.nsecs,) = _get_struct_30d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.D_LH.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.D_LH.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 240
      (_x.D_LH.theta, _x.D_LH.beta, _x.D_LH.motor_r.angle, _x.D_LH.motor_r.twist, _x.D_LH.motor_r.torque, _x.D_LH.motor_r.kp, _x.D_LH.motor_r.ki, _x.D_LH.motor_r.kd, _x.D_LH.motor_l.angle, _x.D_LH.motor_l.twist, _x.D_LH.motor_l.torque, _x.D_LH.motor_l.kp, _x.D_LH.motor_l.ki, _x.D_LH.motor_l.kd, _x.D_LH.force.pose_x, _x.D_LH.force.pose_y, _x.D_LH.force.force_x, _x.D_LH.force.force_y, _x.D_LH.impedance.M_x, _x.D_LH.impedance.M_y, _x.D_LH.impedance.K0_x, _x.D_LH.impedance.K0_y, _x.D_LH.impedance.D_x, _x.D_LH.impedance.D_y, _x.D_LH.impedance.adaptive_kp_x, _x.D_LH.impedance.adaptive_kp_y, _x.D_LH.impedance.adaptive_ki_x, _x.D_LH.impedance.adaptive_ki_y, _x.D_LH.impedance.adaptive_kd_x, _x.D_LH.impedance.adaptive_kd_y,) = _get_struct_30d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_30d = None
def _get_struct_30d():
    global _struct_30d
    if _struct_30d is None:
        _struct_30d = struct.Struct("<30d")
    return _struct_30d
_struct_30d3I = None
def _get_struct_30d3I():
    global _struct_30d3I
    if _struct_30d3I is None:
        _struct_30d3I = struct.Struct("<30d3I")
    return _struct_30d3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
